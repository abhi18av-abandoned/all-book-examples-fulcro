{"version":3,"sources":["datascript/impl/entity.cljc"],"mappings":"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","names":["datascript.impl.entity/entid","db","eid","cljs.core/sequential?","cljs.core/Keyword","datascript.db/entid","js/Error","datascript.impl.entity/entity","datascript.db/db?","temp__5735__auto__","e","G__57793","G__57794","G__57795","G__57796","datascript.impl.entity/->Entity","cljs.core/volatile!","datascript.impl.entity/entity-attr","a","datoms","datascript.db/multival?","datascript.db/ref?","p1__57798#","p2__57799#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p1__57800#","p2__57801#","cljs.core/first","datascript.impl.entity/-lookup-backwards","attr","not-found","temp__5733__auto__","cljs.core/not-empty","datascript.db/-search","datascript.db/component?","p1__57802#","p2__57803#","datascript.impl.entity/multival->js","val","cljs.core/to-array","datascript.impl.entity/js-seq","datascript.impl.entity/touch","iter__4523__auto__","s__57812","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__57814","cljs.core/chunk-buffer","i__57813","vec__57815","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57811","cljs.core/chunk-rest","vec__57819","cljs.core/cons","cljs.core/rest","cljs.core/deref","v","self__","args57827","cljs.core/aclone","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","datascript.impl.entity/Entity","touched","cache","this","cljs.core/pr-str*","other","datascript.impl.entity/equiv-entity","cljs.core/es6-iterator","cljs.core/keys","cljs.core/es6-entries-iterator","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","datascript.db/reverse-ref?","datascript.db/reverse-ref","G__57866","datascript.impl.entity/lookup-entity","f","seq__57828","chunk__57829","count__57830","i__57831","vec__57839","c__4550__auto__","cljs.core/chunk-first","vec__57843","cljs.core/next","use-as-this","seq__57849","chunk__57850","count__57851","i__57852","vec__57859","vec__57862","o","_","cljs.core/hash","k","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__57873","G__57874","G__57875","writer","opts","cljs.core/-pr-writer","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","datascript.impl.entity/entity?","x","that","var_args","G__57888","datascript.impl.entity.lookup_entity.cljs$core$IFn$_invoke$arity$3","temp__5737__auto__","fexpr__57890","value","cljs.core/vreset!","datascript.impl.entity/touch-components","a->v","cljs.core/reduce-kv","acc","cljs.core/set","datascript.impl.entity/datoms->cache","part","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","goog/exportSymbol"],"sourcesContent":["(ns ^:no-doc datascript.impl.entity\n  (:refer-clojure :exclude [keys get])\n  (:require [#?(:cljs cljs.core :clj clojure.core) :as c]\n            [datascript.db :as db]))\n\n(declare entity ->Entity equiv-entity lookup-entity touch)\n\n(defn- entid [db eid]\n  (when (or (number? eid)\n            (sequential? eid)\n            (keyword? eid))\n    (db/entid db eid)))\n\n(defn entity [db eid]\n  {:pre [(db/db? db)]}\n  (when-let [e (entid db eid)]\n    (->Entity db e (volatile! false) (volatile! {}))))\n\n(defn- entity-attr [db a datoms]\n  (if (db/multival? db a)\n    (if (db/ref? db a)\n      (reduce #(conj %1 (entity db (:v %2))) #{} datoms)\n      (reduce #(conj %1 (:v %2)) #{} datoms))\n    (if (db/ref? db a)\n      (entity db (:v (first datoms)))\n      (:v (first datoms)))))\n\n(defn- -lookup-backwards [db eid attr not-found]\n  (if-let [datoms (not-empty (db/-search db [nil attr eid]))]\n    (if (db/component? db attr)\n      (entity db (:e (first datoms)))\n      (reduce #(conj %1 (entity db (:e %2))) #{} datoms))\n    not-found))\n\n#?(:cljs\n   (defn- multival->js [val]\n     (when val (to-array val))))\n\n#?(:cljs\n   (defn- js-seq [e]\n     (touch e)\n     (for [[a v] @(.-cache e)]\n       (if (db/multival? (.-db e) a)\n         [a (multival->js v)]\n         [a v]))))\n\n(deftype Entity [db eid touched cache]\n  #?@(:cljs\n      [Object\n       (toString [this]\n                 (pr-str* this))\n       (equiv [this other]\n              (equiv-entity this other))\n\n       ;; js/map interface\n       (keys [this]\n             (es6-iterator (c/keys this)))\n       (entries [this]\n                (es6-entries-iterator (js-seq this)))\n       (values [this]\n               (es6-iterator (map second (js-seq this))))\n       (has [this attr]\n            (not (nil? (.get this attr))))\n       (get [this attr]\n            (if (= attr \":db/id\")\n              eid\n              (if (db/reverse-ref? attr)\n                (-> (-lookup-backwards db eid (db/reverse-ref attr) nil)\n                    multival->js)\n                (cond-> (lookup-entity this attr)\n                  (db/multival? db attr) multival->js))))\n       (forEach [this f]\n                (doseq [[a v] (js-seq this)]\n                  (f v a this)))\n       (forEach [this f use-as-this]\n                (doseq [[a v] (js-seq this)]\n                  (.call f use-as-this v a this)))\n\n       ;; js fallbacks\n       (key_set   [this] (to-array (c/keys this)))\n       (entry_set [this] (to-array (map to-array (js-seq this))))\n       (value_set [this] (to-array (map second (js-seq this))))\n\n       IEquiv\n       (-equiv [this o] (equiv-entity this o))\n\n       IHash\n       (-hash [_]\n              (hash eid)) ;; db?\n\n       ISeqable\n       (-seq [this]\n             (touch this)\n             (seq @cache))\n\n       ICounted\n       (-count [this]\n               (touch this)\n               (count @cache))\n\n       ILookup\n       (-lookup [this attr]           (lookup-entity this attr nil))\n       (-lookup [this attr not-found] (lookup-entity this attr not-found))\n\n       IAssociative\n       (-contains-key? [this k]\n                       (not= ::nf (lookup-entity this k ::nf)))\n\n       IFn\n       (-invoke [this k]\n                (lookup-entity this k))\n       (-invoke [this k not-found]\n                (lookup-entity this k not-found))\n\n       IPrintWithWriter\n       (-pr-writer [_ writer opts]\n                   (-pr-writer (assoc @cache :db/id eid) writer opts))]\n\n      :clj\n      [Object\n       (toString [e]      (pr-str (assoc @cache :db/id eid)))\n       (hashCode [e]      (hash eid)) ; db?\n       (equals [e o]      (equiv-entity e o))\n\n       clojure.lang.Seqable\n       (seq [e]           (touch e) (seq @cache))\n\n       clojure.lang.Associative\n       (equiv [e o]       (equiv-entity e o))\n       (containsKey [e k] (not= ::nf (lookup-entity e k ::nf)))\n       (entryAt [e k]     (some->> (lookup-entity e k) (clojure.lang.MapEntry. k)))\n\n       (empty [e]         (throw (UnsupportedOperationException.)))\n       (assoc [e k v]     (throw (UnsupportedOperationException.)))\n       (cons  [e [k v]]   (throw (UnsupportedOperationException.)))\n       (count [e]         (touch e) (count @(.-cache e)))\n\n       clojure.lang.ILookup\n       (valAt [e k]       (lookup-entity e k))\n       (valAt [e k not-found] (lookup-entity e k not-found))\n\n       clojure.lang.IFn\n       (invoke [e k]      (lookup-entity e k))\n       (invoke [e k not-found] (lookup-entity e k not-found))\n       ]))\n\n(defn entity? [x] (instance? Entity x))\n\n#?(:clj\n   (defmethod print-method Entity [e, ^java.io.Writer w]\n     (.write w (str e))))\n\n(defn- equiv-entity [^Entity this that]\n  (and\n   (instance? Entity that)\n   ;; (= db  (.-db ^Entity that))\n   (= (.-eid this) (.-eid ^Entity that))))\n\n(defn- lookup-entity\n  ([this attr] (lookup-entity this attr nil))\n  ([^Entity this attr not-found]\n   (if (= attr :db/id)\n     (.-eid this)\n     (if (db/reverse-ref? attr)\n       (-lookup-backwards (.-db this) (.-eid this) (db/reverse-ref attr) not-found)\n       (if-some [v (@(.-cache this) attr)]\n         v\n         (if @(.-touched this)\n           not-found\n           (if-some [datoms (not-empty (db/-search (.-db this) [(.-eid this) attr]))]\n             (let [value (entity-attr (.-db this) attr datoms)]\n               (vreset! (.-cache this) (assoc @(.-cache this) attr value))\n               value)\n             not-found)))))))\n\n(defn touch-components [db a->v]\n  (reduce-kv (fn [acc a v]\n               (assoc acc a\n                 (if (db/component? db a)\n                   (if (db/multival? db a)\n                     (set (map touch v))\n                     (touch v))\n                   v)))\n             {} a->v))\n\n(defn- datoms->cache [db datoms]\n  (reduce (fn [acc part]\n    (let [a (:a (first part))]\n      (assoc acc a (entity-attr db a part))))\n    {} (partition-by :a datoms)))\n\n(defn touch [^Entity e]\n  {:pre [(entity? e)]}\n  (when-not @(.-touched e)\n    (when-let [datoms (not-empty (db/-search (.-db e) [(.-eid e)]))]\n      (vreset! (.-cache e) (->> datoms\n                                (datoms->cache (.-db e))\n                                (touch-components (.-db e))))\n      (vreset! (.-touched e) true)))\n  e)\n\n#?(:cljs (goog/exportSymbol \"datascript.impl.entity.Entity\" Entity))\n"]}