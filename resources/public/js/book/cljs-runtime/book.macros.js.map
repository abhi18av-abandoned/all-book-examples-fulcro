{"version":3,"sources":["book/macros.cljc"],"mappings":"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","names":["book.macros/update-db-view","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__84966","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__84968","map__84970","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","value","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","book.macros/watch-state","this","example-app","target-app-state","G__84977","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core/add-watch","options__72617__auto__","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.macros","js/book.macros.AppHolder","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85073","G__85074","G__85075","goog.object/get","obj85077","com.fulcrologic.fulcro.components/configure-component!","book.macros/AppHolder","_","err","info","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","map__84999","app","root","cljs.core/meta","and__4120__auto__","js/setTimeout","target-div","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2","map__85031","app-holder","com.fulcrologic.fulcro-css.css/get-classnames","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","r","goog.object/set","book.macros/ui-app-holder","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","params","com.fulcrologic.fulcro.components/make-state-map","p__85086","map__85087","map__85090","map__85091","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","js/book.macros.EDN","obj85109","G__85110","G__85111","obj85113","book.macros/EDN","open?","props","edn","map__85096","toggle-button","db-block","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.mutations/toggle!","devcards.util.edn-renderer/html-edn","book.macros/ui-edn","map__85115","js/book.macros.ExampleRoot","obj85130","G__85131","G__85132","obj85134","book.macros/ExampleRoot","edn-tool","watched-state","title","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","map__85119","has-title?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","example-title","G__85122","com.fulcrologic.fulcro.components/computed","book.macros/initial-tree->db","initial-tree","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.merge/merge-alternate-union-elements","p__85136","map__85137","book.macros/new-example","root-class","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta","js/book.macros.app-registry","book.macros/app-registry","cljs.core.atom.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.macros\n  #?(:cljs (:require-macros book.macros))\n  (:require\n    [com.fulcrologic.fulcro.application :as app]\n    [com.fulcrologic.fulcro-css.css :as css]\n    #?@(:cljs [[goog.object :as obj]\n               [devcards.util.edn-renderer :as edn]])\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]\n    [com.fulcrologic.fulcro.algorithms.normalize :as fnorm]\n    [taoensso.timbre :as log]))\n\n#?(:clj (def clj->js identity))\n\n(defmutation update-db-view [{:keys [value]}]\n  (action [{:keys [state]}]\n    (swap! state assoc :watched-state value))\n  (refresh [env] [:watched-state]))\n\n#?(:cljs\n   (defn watch-state [this example-app]\n     (let [target-app-state (some-> example-app ::app/state-atom)]\n       (when target-app-state\n         (comp/transact! this `[(update-db-view {:value ~(deref target-app-state)})])\n         (add-watch target-app-state\n           :example-watch (fn []\n                            (comp/transact! this `[(update-db-view {:value ~(deref target-app-state)})])))))))\n\n#?(:cljs\n   (defsc AppHolder [this _]\n     {:shouldComponentUpdate (fn [_ _] false)\n      :css                   [[:.app-holder {:border  \"2px solid grey\"\n                                             :padding \"10px\"}]]\n      :componentDidCatch     (fn [err info] (log/error \"App holder failed to start.\" err info))\n      :componentDidMount     (fn [this]\n                               #?(:cljs\n                                  (let [{:keys [app root]} (meta (comp/props this))]\n                                    (if (and app root)\n                                      ;; necessary so we don't close over the outer app's reconciler when rendering\n                                      (js/setTimeout #(if-let [target-div (obj/get this \"appdiv\")]\n                                                        (do\n                                                          (app/mount! app root target-div)\n                                                          (comp/set-state! this {:app app})\n                                                          (watch-state this app))\n                                                        (log/fatal \"App holder: Target div not found.\"))\n                                        10)\n                                      (log/fatal \"App holder: Not given an app or root\" :app app :root root)))))}\n     #?(:clj  (dom/div nil \"\")\n        :cljs (let [{:keys [app-holder]} (css/get-classnames AppHolder)]\n                (dom/div {:className app-holder :ref (fn [r] (obj/set this \"appdiv\" r))}\n                  \"\")))))\n\n#?(:cljs\n   (def ui-app-holder (comp/factory AppHolder)))\n\n#?(:cljs\n   (defsc EDN [this {:ui/keys [open?] :as props} {:keys [edn]}]\n     {:initial-state {:ui/open? false}\n      :query         [:ui/open?]\n      :css           [[:.db-block {:padding \"5px\"}]\n                      [:.toggle-button {:font-size \"8pt\"\n                                        :margin    \"5px\"}]]\n      :ident         (fn [] [:widgets/by-id :edn-renderer])}\n     #?(:cljs\n        (let [{:keys [toggle-button db-block]} (css/get-classnames EDN)]\n          (dom/div {:className \"example-edn\"}\n            (dom/button {:className toggle-button :onClick (fn [] (m/toggle! this :ui/open?))} \"Toggle DB View\")\n            (dom/div {:className db-block :style {:display (if open? \"block\" \"none\")}}\n              (edn/html-edn edn)))))))\n\n#?(:cljs\n   (def ui-edn (comp/factory EDN)))\n\n#?(:cljs\n   (defsc ExampleRoot [this {:keys [edn-tool watched-state title example-app] :as props}]\n     {:query         [{:edn-tool (comp/get-query EDN)}\n                      :watched-state\n                      :title\n                      :example-app]\n      :css           [[:.example-title {:margin                  \"0\"\n                                        :padding                 \"5px\"\n                                        :border-top-left-radius  \"8px\"\n                                        :border-top-right-radius \"8px\"\n                                        :width                   \"100%\"\n                                        :color                   \"white\"\n                                        :background-color        \"rgb(70, 148, 70)\"}]]\n      :css-include   [EDN AppHolder]\n      :initial-state {:edn-tool {}}}\n     (let [has-title? (not= \"\" title)\n           {:keys [example-title]} (css/get-classnames ExampleRoot)]\n       (dom/div\n         (when has-title? (dom/h4 {:className example-title} title))\n         (ui-app-holder example-app)\n         (when has-title?\n           (ui-edn (comp/computed edn-tool {:edn watched-state})))))))\n\n(defn initial-tree->db [root initial-tree]\n  (-> (fnorm/tree->db root initial-tree true)\n    (merge/merge-alternate-union-elements root)))\n\n#?(:cljs\n   (defn new-example [{:keys [title example-app root-class]}]\n     (app/fulcro-app {:initial-db (merge (initial-tree->db ExampleRoot (comp/get-initial-state ExampleRoot {}))\n                                    {:example-app (with-meta {} {:app example-app :root root-class})\n                                     :title       title})})))\n\n(defonce app-registry (atom {}))\n\n(defmacro defexample [title root-class id & {:as args}]\n  (let [app (with-meta (symbol (str \"fulcroapp-\" id)) {:extern true})]\n    `(do\n       (defonce ~app (app/fulcro-app ~(merge {:id (name app)} args)))\n       (swap! app-registry assoc ~id ~app)\n       (app/mount! ~app ~root-class ~id))))\n\n\n"]}