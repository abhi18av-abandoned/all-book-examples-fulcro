{"version":3,"sources":["datascript/pull_api.cljc"],"mappings":"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","names":["datascript.pull-api/into!","transient-coll","items","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj!","datascript.pull-api/+default-limit+","datascript.pull-api/initial-frame","pattern","eids","multi?","cljs.core/seq","cljs.core/transient","datascript.pull-api/subpattern-frame","attr","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","datascript.pull-api/reset-frame","frame","kvps","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","G__59434","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","datascript.pull-api/push-recursion","rec","eid","map__59435","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","depth","seen","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","datascript.pull-api/seen-eid?","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","cljs.core/contains?","datascript.pull-api/pull-seen-eid","frames","cljs.core.update.cljs$core$IFn$_invoke$arity$4","datascript.pull-api/single-frame-result","key","G__59448","cljs.core/persistent!","datascript.pull-api/recursion-result","datascript.pull-api/recursion-frame","parent","p__59451","vec__59452","seq__59453","first__59454","cljs.core/first","cljs.core/next","datascript.pull-api/pull-recursion-frame","db","temp__5733__auto__","cljs.core/rest","or__4131__auto__","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","results","G__59456","datascript.pull-api/recurse-attr","map__59457","recursion","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","datascript.pull-parser/PullSpec","datascript.pull-api/expand-frame","attr-key","p__59471","vec__59472","seq__59473","first__59474","datascript.pull-api/pull-attr-datoms","forward?","datoms","opts","limit","found","cljs.core/not-empty","G__59475","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.take.cljs$core$IFn$_invoke$arity$1","ref?","datascript.db/ref?","component?","datascript.db/component?","datascript.db/multival?","datom-val","d","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","and__4120__auto__","as-value","G__59484","p1__59468#","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentHashMap","single?","G__59485","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc!","G__59487","datascript.pull-api/pull-attr","spec","vec__59492","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","datascript.db/-datoms","datascript.pull-api/filter-reverse-attrs","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","p__59495","vec__59496","k","v","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","datascript.pull-api/expand-reverse-subpattern-frame","rattrs","datascript.pull-api/expand-result","p__59503","vec__59504","seq__59505","first__59506","datascript.pull-api/pull-expand-reverse-frame","p__59507","vec__59508","seq__59509","first__59510","datascript.pull-api/pull-expand-frame","datoms-by-attr","vec__59511","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","datascript.pull-api/pull-wildcard-expand","map__59515","cljs.core/group-by","G__59525","datascript.pull-api/pull-wildcard","map__59526","p__59533","vec__59534","seq__59535","first__59536","datascript.pull-api/pull-pattern-frame","specs","new-frames","datascript.pull-api/pull-pattern","G__59537","cljs.core/Keyword","js/Error","vec__59538","seq__59539","first__59540","f","remaining","result","G__59541","cljs.core/not","G__59542","datascript.pull-api/pull-spec","p1__59544#","datascript.db/entid-strict","cljs.core/List","datascript.pull-api/pull","selector","datascript.db/db?","datascript.pull-parser/parse-pull","datascript.pull-api/pull-many"],"sourcesContent":["(ns ^:no-doc datascript.pull-api\n  (:require\n    [datascript.db :as db]\n    [datascript.pull-parser :as dpp #?@(:cljs [:refer [PullSpec]])])\n    #?(:clj\n      (:import\n        [datascript.db Datom]\n        [datascript.pull_parser PullSpec])))\n\n(defn- into!\n  [transient-coll items]\n  (reduce conj! transient-coll items))\n\n(def ^:private ^:const +default-limit+ 1000)\n\n(defn- initial-frame\n  [pattern eids multi?]\n  {:state     :pattern\n   :pattern   pattern\n   :wildcard? (:wildcard? pattern)\n   :specs     (-> pattern :attrs seq)\n   :results   (transient [])\n   :kvps      (transient {})\n   :eids      eids\n   :multi?    multi?\n   :recursion {:depth {} :seen #{}}})\n\n(defn- subpattern-frame\n  [pattern eids multi? attr]\n  (assoc (initial-frame pattern eids multi?) :attr attr))\n\n(defn- reset-frame\n  [frame eids kvps]\n  (let [pattern (:pattern frame)]\n    (assoc frame\n           :eids      eids\n           :specs     (seq (:attrs pattern))\n           :wildcard? (:wildcard? pattern)\n           :kvps      (transient {})\n           :results   (cond-> (:results frame)\n                        (seq kvps) (conj! kvps)))))\n\n(defn- push-recursion\n  [rec attr eid]\n  (let [{:keys [depth seen]} rec]\n    (assoc rec\n           :depth (update depth attr (fnil inc 0))\n           :seen (conj seen eid))))\n\n(defn- seen-eid?\n  [frame eid]\n  (-> frame\n      (get-in [:recursion :seen] #{})\n      (contains? eid)))\n\n(defn- pull-seen-eid\n  [frame frames eid]\n  (when (seen-eid? frame eid)\n    (conj frames (update frame :results conj! {:db/id eid}))))\n\n(defn- single-frame-result\n  [key frame]\n  (some-> (:kvps frame) persistent! (get key)))\n\n(defn- recursion-result [frame]\n  (single-frame-result ::recursion frame))\n\n(defn- recursion-frame\n  [parent eid]\n  (let [attr (:attr parent)\n        rec  (push-recursion (:recursion parent) attr eid)]\n    (assoc (subpattern-frame (:pattern parent) [eid] false ::recursion)\n           :recursion rec)))\n\n(defn- pull-recursion-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (let [frame  (reset-frame frame (rest eids) (recursion-result frame))\n          eid    (first eids)]\n      (or (pull-seen-eid frame frames eid)\n          (conj frames frame (recursion-frame frame eid))))\n    (let [kvps    (recursion-result frame)\n          results (cond-> (:results frame)\n                    (seq kvps) (conj! kvps))]\n      (conj frames (assoc frame :state :done :results results)))))\n\n(defn- recurse-attr\n  [db attr multi? eids eid parent frames]\n  (let [{:keys [recursion pattern]} parent\n        depth  (-> recursion (get :depth) (get attr 0))]\n    (if (-> pattern :attrs (get attr) :recursion (= depth))\n      (conj frames parent)\n      (pull-recursion-frame\n       db\n       (conj frames parent\n             {:state :recursion :pattern pattern\n              :attr attr :multi? multi? :eids eids\n              :recursion recursion\n              :results (transient [])})))))\n\n(let [pattern (PullSpec. true {})]\n  (defn- expand-frame\n    [parent eid attr-key multi? eids]\n    (let [rec (push-recursion (:recursion parent) attr-key eid)]\n      (-> pattern\n          (subpattern-frame eids multi? attr-key)\n          (assoc :recursion rec)))))\n\n(defn- pull-attr-datoms\n  [db attr-key attr eid forward? datoms opts [parent & frames]]\n  (let [limit (get opts :limit +default-limit+)\n        attr-key (or (:as opts) attr-key)\n        found (not-empty\n               (cond->> datoms\n                 limit (into [] (take limit))))]\n    (if found\n      (let [ref?       (db/ref? db attr)\n            component? (and ref? (db/component? db attr))\n            multi?     (if forward? (db/multival? db attr) (not component?))\n            datom-val  (if forward? (fn [d] (.-v ^Datom d)) (fn [d] (.-e ^Datom d)))]\n        (cond\n          (contains? opts :subpattern)\n          (->> (subpattern-frame (:subpattern opts)\n                                 (mapv datom-val found)\n                                 multi? attr-key)\n               (conj frames parent))\n\n          (contains? opts :recursion)\n          (recurse-attr db attr-key multi?\n                        (mapv datom-val found)\n                        eid parent frames)\n\n          (and component? forward?)\n          (->> found\n               (mapv datom-val)\n               (expand-frame parent eid attr-key multi?)\n               (conj frames parent))\n          \n          :else \n          (let [as-value  (cond->> datom-val\n                            ref? (comp #(hash-map :db/id %)))\n                single?   (not multi?)]\n            (->> (cond-> (into [] (map as-value) found)\n                   single? first)\n                 (update parent :kvps assoc! attr-key)\n                 (conj frames)))))\n      (->> (cond-> parent\n             (contains? opts :default)\n             (update :kvps assoc! attr-key (:default opts)))\n           (conj frames)))))\n\n(defn- pull-attr\n  [db spec eid frames]\n  (let [[attr-key opts] spec]\n    (if (= :db/id attr-key)\n      (if (not-empty (db/-datoms db :eavt [eid]))\n        (conj (rest frames)\n              (update (first frames) :kvps assoc! :db/id eid))\n        frames)\n      (let [attr     (:attr opts)\n            forward? (= attr-key attr)\n            results  (if forward?\n                       (db/-datoms db :eavt [eid attr])\n                       (db/-datoms db :avet [attr eid]))]\n        (pull-attr-datoms db attr-key attr eid forward?\n                          results opts frames)))))\n\n(def ^:private filter-reverse-attrs\n  (filter (fn [[k v]] (not= k (:attr v)))))\n\n(defn- expand-reverse-subpattern-frame\n  [parent eid rattrs]\n  (-> (:pattern parent)\n      (assoc :attrs rattrs :wildcard? false)\n      (subpattern-frame [eid] false ::expand-rev)))\n\n(defn- expand-result\n  [frames kvps]\n  (->> kvps\n       (persistent!)\n       (update (first frames) :kvps into!)\n       (conj (rest frames))))\n\n(defn- pull-expand-reverse-frame\n  [db [frame & frames]]\n  (->> (or (single-frame-result ::expand-rev frame) {})\n       (into! (:expand-kvps frame))\n       (expand-result frames)))\n\n(defn- pull-expand-frame\n  [db [frame & frames]]\n  (if-let [datoms-by-attr (seq (:datoms frame))]\n    (let [[attr datoms] (first datoms-by-attr)\n          opts          (-> frame\n                            (get-in [:pattern :attrs])\n                            (get attr {}))]\n      (pull-attr-datoms db attr attr (:eid frame) true datoms opts\n                        (conj frames (update frame :datoms rest))))\n    (if-let [rattrs (->> (get-in frame [:pattern :attrs])\n                         (into {} filter-reverse-attrs)\n                         not-empty)]\n      (let [frame  (assoc frame\n                          :state       :expand-rev\n                          :expand-kvps (:kvps frame)\n                          :kvps        (transient {}))]\n        (->> rattrs\n             (expand-reverse-subpattern-frame frame (:eid frame))\n             (conj frames frame)))\n      (expand-result frames (:kvps frame)))))\n\n(defn- pull-wildcard-expand\n  [db frame frames eid pattern]\n  (let [datoms (group-by (fn [d] (.-a ^Datom d)) (db/-datoms db :eavt [eid]))\n        {:keys [attr recursion]} frame\n        rec (cond-> recursion\n              (some? attr) (push-recursion attr eid))]\n    (->> {:state :expand :kvps (transient {:db/id eid})\n          :eid eid :pattern pattern :datoms (seq datoms)\n          :recursion rec}\n         (conj frames frame)\n         (pull-expand-frame db))))\n\n(defn- pull-wildcard\n  [db frame frames]\n  (let [{:keys [eid pattern]} frame]\n    (or (pull-seen-eid frame frames eid)\n        (pull-wildcard-expand db frame frames eid pattern))))\n\n(defn- pull-pattern-frame\n  [db [frame & frames]]\n  (if-let [eids (seq (:eids frame))]\n    (if (:wildcard? frame)\n      (pull-wildcard db\n                     (assoc frame\n                            :specs []\n                            :eid (first eids)\n                            :wildcard? false)\n                     frames)\n      (if-let [specs (seq (:specs frame))]\n        (let [spec       (first specs)\n              pattern    (:pattern frame)\n              new-frames (conj frames (assoc frame :specs (rest specs)))]\n          (pull-attr db spec (first eids) new-frames))\n        (->> frame :kvps persistent! not-empty\n             (reset-frame frame (rest eids))\n             (conj frames)\n             (recur db))))\n    (conj frames (assoc frame :state :done))))\n\n(defn- pull-pattern\n  [db frames]\n  (case (:state (first frames))\n    :expand     (recur db (pull-expand-frame db frames))\n    :expand-rev (recur db (pull-expand-reverse-frame db frames))\n    :pattern    (recur db (pull-pattern-frame db frames))\n    :recursion  (recur db (pull-recursion-frame db frames))\n    :done       (let [[f & remaining] frames\n                      result (cond-> (persistent! (:results f))\n                               (not (:multi? f)) first)]\n                  (if (seq remaining)\n                    (->> (cond-> (first remaining)\n                           result (update :kvps assoc! (:attr f) result))\n                         (conj (rest remaining))\n                         (recur db))\n                    result))))\n\n(defn pull-spec\n  [db pattern eids multi?]\n  (let [eids (into [] (map #(db/entid-strict db %)) eids)]\n    (pull-pattern db (list (initial-frame pattern eids multi?)))))\n\n(defn pull [db selector eid]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) [eid] false))\n\n(defn pull-many [db selector eids]\n  {:pre [(db/db? db)]}\n  (pull-spec db (dpp/parse-pull selector) eids true))\n"]}