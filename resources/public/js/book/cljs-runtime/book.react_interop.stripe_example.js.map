{"version":3,"sources":["book/react_interop/stripe_example.cljs"],"mappings":"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","names":["book.react-interop.stripe-example/test-key","book.react-interop.stripe-example/ui-stripe-provider","com.fulcrologic.fulcro.algorithms.react-interop/react-factory","js/module$node_modules$react_stripe_elements$lib$index.StripeProvider","book.react-interop.stripe-example/ui-elements","js/module$node_modules$react_stripe_elements$lib$index.Elements","book.react-interop.stripe-example/ui-card-element","js/module$node_modules$react_stripe_elements$lib$index.CardNumberElement","book.react-interop.stripe-example/ui-exp-element","js/module$node_modules$react_stripe_elements$lib$index.CardExpiryElement","book.react-interop.stripe-example/ui-cvc-element","js/module$node_modules$react_stripe_elements$lib$index.CardCvcElement","book.react-interop.stripe-example/handle-result","result","map__85406","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","map__85407","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__85408","message","id","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic","js/alert","options__72617__auto__","params","com.fulcrologic.fulcro.components/make-state-map","p__85415","map__85416","com.fulcrologic.fulcro.components/wrapped-render","map__85418","com.fulcrologic.fulcro.components/props","map__85419","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","js/book","js/book.react-interop","js/book.react-interop.stripe-example","js/book.react-interop.stripe-example.CCForm","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85431","G__85432","G__85433","goog.object/get","obj85435","com.fulcrologic.fulcro.components/configure-component!","book.react-interop.stripe-example/CCForm","this","name","props","injected-props","computed","stripe","com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","e","com.fulcrologic.fulcro.dom/macro-create-element*","p1__85414#","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__85424","G__85425","G__85428","book.react-interop.stripe-example/ui-cc-form","com.fulcrologic.fulcro.algorithms.react-interop/hoc-factory","js/module$node_modules$react_stripe_elements$lib$index.injectStripe","map__85436","js/book.react-interop.stripe-example.Root","obj85449","G__85450","G__85451","obj85453","book.react-interop.stripe-example/Root","cc-form","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","G__85439","G__85440","G__85441","G__85442"],"sourcesContent":["(ns book.react-interop.stripe-example\n  (:require\n    [\"react-stripe-elements\" :as stripe :refer [StripeProvider Elements injectStripe\n                                                CardNumberElement\n                                                CardExpiryElement\n                                                CardCvcElement]]\n    [com.fulcrologic.fulcro.algorithms.react-interop :as interop]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.mutations :as m]))\n\n(def test-key \"pk_test_crQ5GM8nCR8tM06YZcgunnmZ00qjGWhSNV\")\n\n;; Wrap the stripe UI components in interop factories\n(def ui-stripe-provider (interop/react-factory StripeProvider))\n(def ui-elements (interop/react-factory Elements))\n(def ui-card-element (interop/react-factory CardNumberElement))\n(def ui-exp-element (interop/react-factory CardExpiryElement))\n(def ui-cvc-element (interop/react-factory CardCvcElement))\n\n(defn handle-result [result]\n  (let [{{:keys [message]} :error\n         {:keys [id]}      :token} (js->clj result :keywordize-keys true)]\n    (when message\n      (js/alert (str \"Error: \" message)))\n    (when id\n      (js/alert (str \"Created payment token \" id)))))\n\n(defsc CCForm [this {:customer/keys [name] :as props} {:keys [injected-props] :as computed}]\n  {:query         [:customer/name]\n   :initial-state {:customer/name \"\"}\n   :ident         (fn [] [:component/id ::ccform])}\n  ;; isoget is a util that gets props from js maps in cljs, or CLJ ones in clj\n  (let [stripe (comp/isoget injected-props \"stripe\")]\n    (dom/form :.ui.form\n      {:onSubmit (fn [e] (.preventDefault e))}\n      (dom/div :.field\n        (dom/label \"Name\")\n        (dom/input {:value    name\n                    :onChange #(m/set-string! this :customer/name :event %)}))\n      (dom/div :.field\n        (dom/label \"Card Number\")\n        (ui-card-element {}))\n      (dom/div :.two.fields\n        (dom/div :.field\n          (dom/label \"Expired\")\n          (ui-exp-element {}))\n        (dom/div :.field\n          (dom/label \"CVC\")\n          (ui-cvc-element {})))\n      (dom/button {:onClick (fn [e]\n                              ;; createToken is a calls to the low-level JS API\n                              (-> (.createToken stripe #js {:type \"card\" :name name})\n                                (.then (fn [result] (handle-result result)))\n                                (.catch (fn [result] (handle-result result)))))}\n        \"Pay\"))))\n\n;; NOTE: The js library says you should call injectStripe(FormComponent) to get your wrapped component,\n;; so use interop to do that:\n(def ui-cc-form (interop/hoc-factory CCForm injectStripe))\n\n(defsc Root [this {:keys [root/cc-form] :as props}]\n  {:query         [{:root/cc-form (comp/get-query CCForm)}]\n   :initial-state {:root/cc-form {}}}\n  (dom/div\n    (dom/h2 \"Payment Form\")\n    ;; Stripe documentation says to wrap a stripe provider around the whole thing, and use the\n    ;; HOC form.\n    (ui-stripe-provider #js {:apiKey test-key}\n      (ui-elements #js {}\n        ;; NOTE: Remember to pass parent's `this` to the child when using an HOC factory.\n        (ui-cc-form this cc-form)))))\n\n"]}