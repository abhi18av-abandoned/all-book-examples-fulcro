{"version":3,"sources":["book/forms/form_state_demo_1.cljs"],"mappings":"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","names":["book.forms.form-state-demo-1/field-attrs","component","field","form","com.fulcrologic.fulcro.components/props","entity-ident","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","id","cljs.core/first","cljs.core/second","is-dirty?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2","clean?","validity","com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2","is-invalid?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","value","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.spec.alpha/def-impl","p1__85917#","cljs.core/re-matches","book.forms.form-state-demo-1/abort-phone-edit","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__85921","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__85923","map__85924","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.form-state/pristine->entity*","book.forms.form-state-demo-1/submit-phone","map__85926","p__85928","map__85929","delta","com.fulcrologic.fulcro.algorithms.form-state/entity->pristine*","book.forms.form-state-demo-1/input-with-label","label","validation-message","input","map__85937","dirty?","invalid?","com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","options__72617__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","map__85944","js/book","js/book.forms","js/book.forms.form-state-demo-1","js/book.forms.form-state-demo-1.PhoneForm","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85951","G__85952","G__85953","goog.object/get","obj85955","com.fulcrologic.fulcro.components/configure-component!","book.forms.form-state-demo-1/PhoneForm","this","type","number","com.fulcrologic.fulcro.algorithms.form-state/form-config-join","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$1","p1__85943#","or__4131__auto__","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__85946","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","cljs.core/name","v","G__85947","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.mutations/set-value!","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","G__85948","com.fulcrologic.fulcro.algorithms.form_state.checked_QMARK_.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1","G__85949","com.fulcrologic.fulcro.algorithms.form-state/dirty-fields","book.forms.form-state-demo-1/ui-phone-form","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","map__85956","map__85957","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","js/book.forms.form-state-demo-1.PhoneNumber","obj85961","G__85962","G__85963","obj85966","book.forms.form-state-demo-1/PhoneNumber","onSelect","book.forms.form-state-demo-1/ui-phone-number","map__85980","map__85981","js/book.forms.form-state-demo-1.PhoneBook","obj86001","G__86003","G__86004","obj86006","book.forms.form-state-demo-1/PhoneBook","phone-numbers","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","n","G__85995","com.fulcrologic.fulcro.components/computed","book.forms.form-state-demo-1/ui-phone-book","book.forms.form-state-demo-1/edit-phone-number","map__86018","p__86023","map__86024","phone-type","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.form-state/add-form-config*","com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","map__86036","phone","phonebook","js/book.forms.form-state-demo-1.Root","obj86043","G__86044","G__86045","obj86047","book.forms.form-state-demo-1/Root","book.elements/ui-iframe","cljs.core/contains?","G__86038","G__86039"],"sourcesContent":["(ns book.forms.form-state-demo-1\n  (:require\n    [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :as dropdown]\n    [book.elements :as ele]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [cljs.spec.alpha :as s]\n    [taoensso.timbre :as log]))\n\n(declare Root PhoneForm)\n\n(defn field-attrs\n  \"A helper function for getting aspects of a particular field.\"\n  [component field]\n  (let [form         (comp/props component)\n        entity-ident (comp/get-ident component form)\n        id           (str (first entity-ident) \"-\" (second entity-ident))\n        is-dirty?    (fs/dirty? form field)\n        clean?       (not is-dirty?)\n        validity     (fs/get-spec-validity form field)\n        is-invalid?  (= :invalid validity)\n        value        (get form field \"\")]\n    {:dirty?   is-dirty?\n     :ident    entity-ident\n     :id       id\n     :clean?   clean?\n     :validity validity\n     :invalid? is-invalid?\n     :value    value}))\n\n(s/def :phone/number #(re-matches #\"\\(?[0-9]{3}[-.)]? *[0-9]{3}-?[0-9]{4}\" %))\n\n(defmutation abort-phone-edit [{:keys [id]}]\n  (action [{:keys [state]}]\n    (swap! state (fn [s]\n                   (-> s\n                     ; stop editing\n                     (dissoc :root/phone)\n                     ; revert to the pristine state\n                     (fs/pristine->entity* [:phone/id id])))))\n  (refresh [env] [:root/phone]))\n\n(defmutation submit-phone [{:keys [id delta]}]\n  (action [{:keys [state]}]\n    (swap! state (fn [s]\n                   (-> s\n                     ; stop editing\n                     (dissoc :root/phone)\n                     ; update the pristine state\n                     (fs/entity->pristine* [:phone/id id])))))\n  (remote [env] true)\n  (refresh [env] [:root/phone [:phone/id id]]))\n\n(defn input-with-label\n  [component field label validation-message input]\n  (let [{:keys [dirty? invalid?]} (field-attrs component field)]\n    (comp/fragment\n      (dom/div :.field {:classes [(when invalid? \"error\") (when dirty? \"warning\")]}\n        (dom/label {:htmlFor (str field)} label)\n        input)\n      (when invalid?\n        (dom/div :.ui.error.message {} validation-message))\n      (when dirty?\n        (dom/div :.ui.warning.message {} \"(dirty)\")))))\n\n(defsc PhoneForm [this {:phone/keys [id type number] :as props}]\n  {:query       [:phone/id :phone/type :phone/number fs/form-config-join]\n   :form-fields #{:phone/number :phone/type}\n   :ident       :phone/id}\n  (let [dirty?   (fs/dirty? props)\n        invalid? (= :invalid (fs/get-spec-validity props))]\n    (dom/div :.ui.form {:classes [(when invalid? \"error\") (when dirty? \"warning\")]}\n      (input-with-label this :phone/number \"Phone:\" \"10-digit phone number is required.\"\n        (dom/input {:value    (or (str number) \"\")\n                    :onChange #(m/set-string! this :phone/number :event %)}))\n      (input-with-label this :phone/type \"Type:\" \"\"\n        (dropdown/ui-dropdown {:value     (name type)\n                               :selection true\n                               :options   [{:text \"Home\" :value \"home\"}\n                                           {:text \"Work\" :value \"work\"}]\n                               :onChange  (fn [_ v]\n                                            (when-let [v (some-> (.-value v) keyword)]\n                                              (m/set-value! this :phone/type v)))}))\n      (dom/button :.ui.button {:onClick #(comp/transact! this [(abort-phone-edit {:id id})])} \"Cancel\")\n      (dom/button :.ui.button {:disabled (or (not (fs/checked? props)) (fs/invalid-spec? props))\n                               :onClick  #(comp/transact! this [(submit-phone {:id id :delta (fs/dirty-fields props true)})])} \"Commit!\"))))\n\n(def ui-phone-form (comp/factory PhoneForm {:keyfn :phone/id}))\n\n(defsc PhoneNumber [this {:phone/keys [id type number]} {:keys [onSelect]}]\n  {:query         [:phone/id :phone/number :phone/type]\n   :initial-state {:phone/id :param/id :phone/number :param/number :phone/type :param/type}\n   :ident         :phone/id}\n  (dom/li :.ui.item\n    (dom/a {:onClick (fn [] (onSelect id))}\n      (str number \" (\" (get {:home \"Home\" :work \"Work\" nil \"Unknown\"} type) \")\"))))\n\n(def ui-phone-number (comp/factory PhoneNumber {:keyfn :phone/id}))\n\n(defsc PhoneBook [this {:phonebook/keys [id phone-numbers]} {:keys [onSelect]}]\n  {:query         [:phonebook/id {:phonebook/phone-numbers (comp/get-query PhoneNumber)}]\n   :initial-state {:phonebook/id            :main\n                   :phonebook/phone-numbers [{:id 1 :number \"541-555-1212\" :type :home}\n                                             {:id 2 :number \"541-555-5533\" :type :work}]}\n   :ident         :phonebook/id}\n  (dom/div\n    (dom/h4 \"Phone Book (click a number to edit)\")\n    (dom/ul\n      (map (fn [n] (ui-phone-number (comp/computed n {:onSelect onSelect}))) phone-numbers))))\n\n(def ui-phone-book (comp/factory PhoneBook {:keyfn :phonebook/id}))\n\n(defmutation edit-phone-number [{:keys [id]}]\n  (action [{:keys [state]}]\n    (let [phone-type (get-in @state [:phone/id id :phone/type])]\n      (swap! state (fn [s]\n                     (-> s\n                       ; make sure the form config is with the entity\n                       (fs/add-form-config* PhoneForm [:phone/id id])\n                       ; since we're editing an existing thing, we should start it out complete (validations apply)\n                       (fs/mark-complete* [:phone/id id])\n                       ; tell the root UI that we're editing a phone number by linking it in\n                       (assoc :root/phone [:phone/id id])))))))\n\n(defsc Root [this {:keys [:root/phone :root/phonebook]}]\n  {:query         [{:root/phonebook (comp/get-query PhoneBook)}\n                   {:root/phone (comp/get-query PhoneForm)}]\n   :initial-state {:root/phonebook {}\n                   :root/phone     {}}}\n  (ele/ui-iframe {:frameBorder 0 :width 500 :height 400}\n    (dom/div\n      (dom/link {:rel \"stylesheet\" :href \"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"})\n      (if (contains? phone :phone/number)\n        (ui-phone-form phone)\n        (ui-phone-book (comp/computed phonebook {:onSelect (fn [id] (comp/transact! this [(edit-phone-number {:id id})]))}))))))\n"]}