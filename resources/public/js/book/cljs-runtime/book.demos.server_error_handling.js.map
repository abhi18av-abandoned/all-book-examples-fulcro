{"version":3,"sources":["book/demos/server_error_handling.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/mutation","book.demos.server-error-handling/server-error-mutation","env","params","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.connect/resolver","book.demos.server-error-handling/child-resolver","input","book.demos.server-error-handling/resolvers","book.demos.server-error-handling/read-error","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","js/alert","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","book.demos.server-error-handling/error-mutation","p__88885","map__88888","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app","ref","result","options__72617__auto__","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.server-error-handling","js/book.demos.server-error-handling.Child","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj88944","G__88946","G__88947","goog.object/get","obj88949","com.fulcrologic.fulcro.components/configure-component!","book.demos.server-error-handling/Child","this","props","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","book.demos.server-error-handling/ui-child","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__88950","js/book.demos.server-error-handling.Root","obj88953","G__88954","G__88955","obj88957","book.demos.server-error-handling/Root","child","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","book.demos.server-error-handling/contains-error?","body","cljs.core/map?","values","cljs.core/vals","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","error?","v","cljs.core/contains?","cljs.core/set","cljs.core/keys","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/reduced","book.demos.server-error-handling/SPA","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1","p__89019","map__89020","or__4131__auto__","com.fulcrologic.fulcro.application/default-remote-error?"],"sourcesContent":["(ns book.demos.server-error-handling\n  (:require\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [taoensso.timbre :as log]\n    [com.wsscode.pathom.connect :as pc]\n    [com.wsscode.pathom.core :as p]\n    [com.fulcrologic.fulcro.application :as app]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SERVER:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(pc/defmutation server-error-mutation [env params]\n  {::pc/sym `error-mutation}\n  ;; Throw a mutation error for the client to handle\n  (throw (ex-info \"Mutation error\" {})))\n\n(pc/defresolver child-resolver [env input]\n  {::pc/output [:fulcro/read-error]}\n  (throw (ex-info \"read error\" {})))\n\n(def resolvers [server-error-mutation child-resolver])\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; Mutation used as a fallback for load error: In this case the `env` from the load result *is* the params to this mutation\n(defmutation read-error [params]\n  (action [env]\n    (js/alert \"There was a read error\")\n    (log/info \"Result from server:\" (:result params))\n    (log/info \"Original load params:\" (:load-params params))))\n\n;; an :error key is injected into the fallback mutation's params argument\n(defmutation error-mutation [params]\n  (ok-action [env] (log/info \"Optimistic action ran ok\"))\n  ;; Error action is only called if `:remote-error?` for the application is defined to consider the response an error.\n  (error-action [{:keys [app ref result]}]\n    (js/alert \"Mutation error\")\n    (log/info \"Result \" result))\n  (remote [env] true))\n\n(defsc Child [this props]\n  {:initial-state {}\n   :query         ['*]\n   :ident         (fn [] [:error.child/by-id :singleton])}\n  (dom/div\n    ;; declare a tx/fallback in the same transact call as the mutation\n    ;; if the mutation fails, the fallback will be called\n    (dom/button {:onClick #(df/load! this :fulcro/read-error nil {:fallback `read-error})}\n      \"Failing read with a fallback\")\n    (dom/button {:onClick #(comp/transact! this `[(error-mutation {})])} \"Failing mutation\")\n    ))\n\n(def ui-child (comp/factory Child))\n\n(defsc Root [this {:keys [child]}]\n  {:initial-state (fn [params] {:child (comp/get-initial-state Child {})})\n   :query         [{:child (comp/get-query Child)}]}\n  (dom/div (ui-child child)))\n\n(defn contains-error?\n  \"Check to see if the response contains Pathom error indicators.\"\n  [body]\n  (when (map? body)\n    (let [values (vals body)]\n      (reduce\n        (fn [error? v]\n          (if (or\n                (and (map? v) (contains? (set (keys v)) ::p/reader-error))\n                (= v ::p/reader-error))\n            (reduced true)\n            error?))\n        false\n        values))))\n\n(def SPA (app/fulcro-app {:remote-error? (fn [{:keys [body] :as result}]\n                                           (or\n                                             (app/default-remote-error? result)\n                                             (contains-error? body)))}))\n"]}