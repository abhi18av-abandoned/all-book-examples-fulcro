{"version":3,"sources":["book/forms/form_state_demo_2.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","p__85918","map__85919","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","book.forms.form-state-demo-2/person-resolver","env","id","js/book","js/book.forms","js/book.forms.form-state-demo-2","js/book.forms.form-state-demo-2.id","book.forms.form-state-demo-2/id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","book.forms.form-state-demo-2/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","com.wsscode.pathom.connect/mutation","book.forms.form-state-demo-2/submit-person-mutation","inputs","params","js/console.log","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","ids","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__85931","vec__85932","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core/second","remaps","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.algorithms.tempid/tempid?","book.forms.form-state-demo-2/resolvers","cljs.spec.alpha/def-impl","cljs.spec.alpha/and-spec-impl","p1__85935#","cljs.core/string?","cljs.core/seq","clojure.string/trim","p1__85936#","cljs.spec.alpha/int-in-range?","book.forms.form-state-demo-2/field-attrs","component","field","form","com.fulcrologic.fulcro.components/props","entity-ident","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","cljs.core/first","is-dirty?","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$2","clean?","validity","com.fulcrologic.fulcro.algorithms.form_state.get_spec_validity.cljs$core$IFn$_invoke$arity$2","is-invalid?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","value","cljs.core.get.cljs$core$IFn$_invoke$arity$3","book.forms.form-state-demo-2/integer-fields","book.forms.form-state-demo-2/input-with-label","label","validation-message","input","map__85939","dirty?","invalid?","com.fulcrologic.fulcro.components.fragment.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","p1__85941#","cljs.core/re-matches","options__72617__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","map__85964","js/book.forms.form-state-demo-2.PhoneForm","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85987","G__85988","G__85989","goog.object/get","obj85994","com.fulcrologic.fulcro.components/configure-component!","book.forms.form-state-demo-2/PhoneForm","this","number","type","com.fulcrologic.fulcro.algorithms.form-state/form-config-join","p1__85942#","or__4131__auto__","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","G__85970","com.fulcrologic.fulcro.algorithms.form-state/mark-complete!","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","G__85971","com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown/ui-dropdown","cljs.core/name","temp__5735__auto__","G__85972","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.mutations/set-value!","G__85973","book.forms.form-state-demo-2/ui-phone-form","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","book.forms.form-state-demo-2/add-phone*","state-map","phone-id","person-id","phone-ident","new-phone-entity","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","cljs.core/assoc-in","book.forms.form-state-demo-2/add-phone","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__85996","p__85998","map__85999","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","state","com.fulcrologic.fulcro.algorithms.tempid.tempid.cljs$core$IFn$_invoke$arity$0","s","com.fulcrologic.fulcro.algorithms.form-state/add-form-config*","map__86008","js/book.forms.form-state-demo-2.PersonForm","obj86013","G__86014","G__86015","obj86017","book.forms.form-state-demo-2/PersonForm","name","age","phone-numbers","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","G__86010","evt","p1__86007#","G__86011","com.fulcrologic.fulcro.mutations.set_integer_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","book.forms.form-state-demo-2/ui-person-form","book.forms.form-state-demo-2/add-person*","person-ident","person","book.forms.form-state-demo-2/edit-new-person","p__86019","map__86020","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","book.forms.form-state-demo-2/edit-existing-person","map__86026","p__86028","map__86029","com.fulcrologic.fulcro.algorithms.form-state/entity->pristine*","com.fulcrologic.fulcro.algorithms.form_state.mark_complete_STAR_.cljs$core$IFn$_invoke$arity$2","book.forms.form-state-demo-2/submit-person","map__86031","p__86033","map__86034","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","map__86040","js/book.forms.form-state-demo-2.Root","obj86049","G__86076","G__86077","obj86079","book.forms.form-state-demo-2/Root","book.elements/ui-iframe","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.algorithms.form_state.dirty_QMARK_.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.form-state/dirty-fields","com.fulcrologic.fulcro.algorithms.form_state.invalid_spec_QMARK_.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.forms.form-state-demo-2\n  (:require\n    [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :as dropdown]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.algorithms.form-state :as fs]\n    [com.fulcrologic.fulcro.algorithms.tempid :as tempid]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [clojure.string :as str]\n    [cljs.spec.alpha :as s]\n    [com.wsscode.pathom.connect :as pc]\n    [book.elements :as ele]\n    [taoensso.timbre :as log]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Server Code\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n; a simple query for any person, that will return valid-looking data\n(pc/defresolver person-resolver [env {:person/keys [id]}]\n  {::pc/input  #{:person/id}\n   ::pc/output [:person/name :person/age :person/phone-numbers]}\n  {:person/id            id\n   :person/name          (str \"User \" id)\n   :person/age           56\n   :person/phone-numbers [{:phone/id 1 :phone/number \"555-111-1212\" :phone/type :work}\n                          {:phone/id 2 :phone/number \"555-333-4444\" :phone/type :home}]})\n\n(defonce id (atom 1000))\n(defn next-id [] (swap! id inc))\n\n; Server submission...just prints delta for demo, and remaps tempids (forms with tempids are always considered dirty)\n(pc/defmutation submit-person-mutation [env inputs]\n  {::pc/sym `submit-person}\n  (let [params (-> env :ast :params)]\n    (js/console.log \"Server received form submission with content: \")\n    (cljs.pprint/pprint params)\n    (let [ids    (map (fn [[k v]] (second k)) (:diff params))\n          remaps (into {} (keep (fn [v] (when (tempid/tempid? v) [v (next-id)])) ids))]\n      {:tempids remaps})))\n\n(def resolvers [person-resolver submit-person-mutation])\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Client Code\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(s/def :person/name (s/and string? #(seq (str/trim %))))\n(s/def :person/age #(s/int-in-range? 1 120 %))\n\n(defn field-attrs\n  \"A helper function for getting aspects of a particular field.\"\n  [component field]\n  (let [form         (comp/props component)\n        entity-ident (comp/get-ident component form)\n        id           (str (first entity-ident) \"-\" (second entity-ident))\n        is-dirty?    (fs/dirty? form field)\n        clean?       (not is-dirty?)\n        validity     (fs/get-spec-validity form field)\n        is-invalid?  (= :invalid validity)\n        value        (get form field \"\")]\n    {:dirty?   is-dirty?\n     :ident    entity-ident\n     :id       id\n     :clean?   clean?\n     :validity validity\n     :invalid? is-invalid?\n     :value    value}))\n\n(def integer-fields #{:person/age})\n\n(defn input-with-label\n  [component field label validation-message input]\n  (let [{:keys [dirty? invalid?]} (field-attrs component field)]\n    (comp/fragment\n      (dom/div :.field {:classes [(when invalid? \"error\") (when dirty? \"warning\")]}\n        (dom/label {:htmlFor (str field)} label)\n        input)\n      (when invalid?\n        (dom/div :.ui.error.message {} validation-message))\n      (when dirty?\n        (dom/div :.ui.warning.message {} \"(dirty)\")))))\n\n(s/def :phone/number #(re-matches #\"\\(?[0-9]{3}[-.)]? *[0-9]{3}-?[0-9]{4}\" %))\n\n(defsc PhoneForm [this {:phone/keys [id number type] :as props}]\n  {:query       [:phone/id :phone/number :phone/type fs/form-config-join]\n   :form-fields #{:phone/number :phone/type}\n   :ident       :phone/id}\n  (dom/div :.ui.segment\n    (dom/div :.ui.form\n      (input-with-label this :phone/number \"Phone:\" \"10-digit phone number is required.\"\n        (dom/input {:value    (or (str number) \"\")\n                    :onBlur   #(comp/transact! this [(fs/mark-complete! {:entity-ident [:phone/id id]\n                                                                         :field        :phone/number})])\n                    :onChange #(m/set-string! this :phone/number :event %)}))\n      (input-with-label this :phone/type \"Type:\" \"\"\n        (dropdown/ui-dropdown {:value     (name type)\n                               :selection true\n                               :options   [{:text \"Home\" :value \"home\"}\n                                           {:text \"Work\" :value \"work\"}]\n                               :onChange  (fn [_ v]\n                                            (when-let [v (some-> (.-value v) keyword)]\n                                              (m/set-value! this :phone/type v)\n                                              (comp/transact! this [(fs/mark-complete! {:field :phone/type})])))})))))\n\n(def ui-phone-form (comp/factory PhoneForm {:keyfn :phone/id}))\n\n(defn add-phone*\n  \"Add the given phone info to a person.\"\n  [state-map phone-id person-id type number]\n  (let [phone-ident      [:phone/id phone-id]\n        new-phone-entity {:phone/id phone-id :phone/type type :phone/number number}]\n    (-> state-map\n      (update-in [:person/id person-id :person/phone-numbers] (fnil conj []) phone-ident)\n      (assoc-in phone-ident new-phone-entity))))\n\n(defmutation add-phone\n  \"Mutation: Add a phone number to a person, and initialize it as a working form.\"\n  [{:keys [person-id]}]\n  (action [{:keys [state]}]\n    (let [phone-id (tempid/tempid)]\n      (swap! state (fn [s]\n                     (-> s\n                       (add-phone* phone-id person-id :home \"\")\n                       (fs/add-form-config* PhoneForm [:phone/id phone-id])))))))\n\n(defsc PersonForm [this {:person/keys [id name age phone-numbers]}]\n  {:query       [:person/id :person/name :person/age\n                 {:person/phone-numbers (comp/get-query PhoneForm)}\n                 fs/form-config-join]\n   :form-fields #{:person/name :person/age :person/phone-numbers} ; phone-numbers here becomes a subform because it is a join in the query.\n   :ident       :person/id}\n  (dom/div :.ui.form\n    (input-with-label this :person/name \"Name:\" \"Name is required.\"\n      (dom/input {:value    (or name \"\")\n                  :onBlur   #(comp/transact! this [(fs/mark-complete! {:entity-ident [:person/id id]\n                                                                       :field        :person/name})\n                                                   :root/person])\n                  :onChange (fn [evt]\n                              (m/set-string! this :person/name :event evt))}))\n    (input-with-label this :person/age \"Age:\" \"Age must be between 1 and 120\"\n      (dom/input {:value    (or age \"\")\n                  :onBlur   #(comp/transact! this [(fs/mark-complete! {:entity-ident [:person/id id]\n                                                                       :field        :person/age})\n                                                   :root/person])\n                  :onChange #(m/set-integer! this :person/age :event %)}))\n    (dom/h4 \"Phone numbers:\")\n    (when (seq phone-numbers)\n      (map ui-phone-form phone-numbers))\n    (dom/button :.ui.button {:onClick #(comp/transact! this `[(add-phone {:person-id ~id})])} \"+\")))\n\n(def ui-person-form (comp/factory PersonForm {:keyfn :person/id}))\n\n(defn add-person*\n  \"Add a person with the given details to the state database.\"\n  [state-map id name age]\n  (let [person-ident [:person/id id]\n        person       {:person/id id :person/name name :person/age age}]\n    (assoc-in state-map person-ident person)))\n\n(defmutation edit-new-person [_]\n  (action [{:keys [state]}]\n    (let [person-id    (tempid/tempid)\n          person-ident [:person/id person-id]\n          phone-id     (tempid/tempid)]\n      (swap! state\n        (fn [s] (-> s\n                  (add-person* person-id \"\" 0)\n                  (add-phone* phone-id person-id :home \"\")\n                  (assoc :root/person person-ident)         ; join it into the UI as the person to edit\n                  (fs/add-form-config* PersonForm [:person/id person-id])))))))\n\n(defmutation edit-existing-person\n  \"Turn an existing person with phone numbers into an editable form with phone subforms.\"\n  [{:keys [person-id]}]\n  (action [{:keys [state]}]\n    (swap! state\n      (fn [s] (-> s\n                (assoc :root/person [:person/id person-id])\n                (fs/add-form-config* PersonForm [:person/id person-id]) ; will not re-add config to entities that were present\n                (fs/entity->pristine* [:person/id person-id]) ; in case we're re-loading it, make sure the pristine copy it up-to-date\n                ;; it just came from server, so all fields should be valid\n                (fs/mark-complete* [:person/id person-id]))))))\n\n(defmutation submit-person [{:keys [id]}]\n  (action [{:keys [state]}]\n    (swap! state fs/entity->pristine* [:person/id id]))\n  (remote [env] true))\n\n(defsc Root [this {:keys [root/person]}]\n  {:query         [{:root/person (comp/get-query PersonForm)}]\n   :initial-state (fn [params] {})}\n  (ele/ui-iframe {:frameBorder 0 :width 800 :height 820}\n    (dom/div :.ui.container.segments\n      (dom/link {:rel \"stylesheet\" :href \"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"})\n      (dom/button :.ui.button\n        {:onClick #(df/load! this [:person/id 21] PersonForm {:target               [:root/person]\n                                                              :post-mutation        `edit-existing-person\n                                                              :post-mutation-params {:person-id 21}})}\n        \"Simulate Edit (existing) Person from Server\")\n      (dom/button :.ui.buton {:onClick #(comp/transact! this `[(edit-new-person {})])} \"Simulate New Person Creation\")\n\n      (when (:person/id person)\n        (dom/div :.ui.segment\n          (ui-person-form person)))\n\n      (dom/div :.ui.segment\n        (dom/button :.ui.button {:onClick  #(comp/transact! this `[(fs/reset-form! {:form-ident [:person/id ~(:person/id person)]})])\n                                 :disabled (not (fs/dirty? person))} \"Reset\")\n        (dom/button :.ui.button {:onClick  #(comp/transact! this `[(submit-person {:id ~(:person/id person) :diff ~(fs/dirty-fields person false)})])\n                                 :disabled (or\n                                             (fs/invalid-spec? person)\n                                             (not (fs/dirty? person)))} \"Submit\")))))\n"]}