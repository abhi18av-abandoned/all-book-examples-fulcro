{"version":3,"sources":["book/demos/loading_in_response_to_UI_routing.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","book.demos.loading-in-response-to-UI-routing/all-settings-resolver","env","input","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__89292","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/book","js/book.demos","js/book.demos.loading-in-response-to-UI-routing","js/book.demos.loading-in-response-to-UI-routing.SomeSetting","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89295","G__89296","G__89297","goog.object/get","obj89299","com.fulcrologic.fulcro.components/configure-component!","book.demos.loading-in-response-to-UI-routing/SomeSetting","id","value","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","book.demos.loading-in-response-to-UI-routing/ui-setting","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","map__89300","js/book.demos.loading-in-response-to-UI-routing.SettingsTab","obj89303","G__89304","G__89305","obj89308","book.demos.loading-in-response-to-UI-routing/SettingsTab","settings-content","settings","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.map.cljs$core$IFn$_invoke$arity$2","map__89312","js/book.demos.loading-in-response-to-UI-routing.MainTab","obj89315","G__89316","G__89317","obj89319","book.demos.loading-in-response-to-UI-routing/MainTab","main-content","page__85300__auto__","cljs.core/first","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","G__89322","cljs.core/Keyword","fexpr__89323","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","fexpr__89324","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","js/book.demos.loading-in-response-to-UI-routing.UITabs-Union","book.demos.loading-in-response-to-UI-routing/UITabs-Union","obj89333","G__89334","G__89335","obj89337","book.demos.loading-in-response-to-UI-routing/ui-UITabs-Union","computed__85340__auto__","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","props__85341__auto__","props-with-computed__85342__auto__","com.fulcrologic.fulcro.components/computed","js/book.demos.loading-in-response-to-UI-routing.UITabs","obj89339","G__89340","G__89341","obj89343","book.demos.loading-in-response-to-UI-routing/UITabs","book.demos.loading-in-response-to-UI-routing/ui-tabs","book.demos.loading-in-response-to-UI-routing/choose-tab","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__89347","p__89351","map__89352","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","tab","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.routing.legacy-ui-routers/set-route","book.demos.loading-in-response-to-UI-routing/missing-tab?","cljs.core/deref","cljs.core/vector?","cljs.core/empty?","book.demos.loading-in-response-to-UI-routing/lazy-load-tab","map__89354","p__89356","map__89357","app","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","map__89359","js/book.demos.loading-in-response-to-UI-routing.Root","obj89362","G__89363","G__89364","obj89366","book.demos.loading-in-response-to-UI-routing/Root","current-tab","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.demos.loading-in-response-to-UI-routing\n  (:require\n    [com.fulcrologic.fulcro.routing.legacy-ui-routers :as r]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.wsscode.pathom.connect :as pc]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SERVER:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(pc/defresolver all-settings-resolver [env input]\n  {::pc/output [{:all-settings [:id :value]}]}\n  {:all-settings [{:id 1 :value \"Gorgon\"}\n                  {:id 2 :value \"Thraser\"}\n                  {:id 3 :value \"Under\"}]})\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defsc SomeSetting [this {:keys [id value]}]\n  {:query [:ui/fetch-state :id :value]\n   :ident [:setting/by-id :id]}\n  (dom/p nil \"Setting \" id \" from server has value: \" value))\n\n(def ui-setting (comp/factory SomeSetting {:keyfn :id}))\n\n(defsc SettingsTab [this {:keys [settings-content settings]}]\n  {:initial-state {:kind             :settings\n                   :settings-content \"Settings Tab\"\n                   :settings         []}\n   ; This query uses a \"link\"...a special ident with '_ as the ID. This indicates the item is at the database\n   ; root, not inside of the \"settings\" database object. This is not needed as a matter of course...it is only used\n   ; for convenience (since it is trivial to load something into the root of the database)\n   :query         [:kind :settings-content {:settings (comp/get-query SomeSetting)}]}\n  (dom/div nil\n    settings-content\n    (if (seq settings)\n      (map ui-setting settings)\n      (dom/div \"No settings.\"))))\n\n(defsc MainTab [this {:keys [main-content]}]\n  {:initial-state {:kind :main :main-content \"Main Tab\"}\n   :query         [:kind :main-content]}\n  (dom/div nil main-content))\n\n(r/defsc-router UITabs [this props]\n  {:router-id      :ui-router\n   :ident          (fn [] [(:kind props) :tab])\n   :default-route  MainTab\n   :router-targets {:main     MainTab\n                    :settings SettingsTab}})\n\n(def ui-tabs (comp/factory UITabs))\n\n(m/defmutation choose-tab [{:keys [tab]}]\n  (action [{:keys [state]}] (swap! state r/set-route :ui-router [tab :tab])))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; LAZY LOADING TAB CONTENT\n;; This is the shape of what to do. We define a method that can examine the\n;; state to decide if we want to trigger a load. Then we define a mutation\n;; that the UI can call during transact (see the transact! call for Settings on Root in ui.cljs).\n;; The mutation itself (app/lazy-load-tab) below uses a data-fetch helper function to\n;; set :remote to the right thing, and can then give one or more load-data-action's to\n;; indicate what should actually be retrieved. The server implementation is trivial in\n;; this case. See api.clj.\n\n;; When to consider the data missing? Check the state and find out.\n(defn missing-tab? [state tab]\n  (let [settings (-> @state :settings :tab :settings)]\n    (or (not (vector? settings))\n      (and (vector? settings) (empty? settings)))))\n\n(m/defmutation lazy-load-tab [{:keys [tab]}]\n  (action [{:keys [app state] :as env}]\n    ; Specify what you want to load as one or more calls to load-action (each call adds an item to load):\n    (when (missing-tab? state tab)\n      (df/load! app :all-settings SomeSetting\n        {:target  [:settings :tab :settings]\n         :refresh [:settings]}))))\n\n(defsc Root [this {:keys [current-tab] :as props}]\n  ; Construction MUST compose to root, just like the query. The resulting tree will automatically be normalized into the\n  ; app state graph database.\n  {:initial-state (fn [params] {:current-tab (comp/get-initial-state UITabs nil)})\n   :query         [{:current-tab (comp/get-query UITabs)}]}\n  (dom/div\n    ; The selection of tabs can be rendered in a child, but the transact! must be done from the parent (to\n    ; ensure proper re-render of the tab body). See comp/computed for passing callbacks.\n    (dom/button {:onClick #(comp/transact! this `[(choose-tab {:tab :main})])} \"Main\")\n    (dom/button {:onClick #(comp/transact! this `[(choose-tab {:tab :settings})\n                                                  ; extra mutation: sample of what you would do to lazy load the tab content\n                                                  (lazy-load-tab {:tab :settings})])} \"Settings\")\n    (ui-tabs current-tab)))\n\n\n\n"]}