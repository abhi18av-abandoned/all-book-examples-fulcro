{"version":3,"sources":["book/html_converter.cljc"],"mappings":"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","names":["book.html-converter/attr-renames","book.html-converter/fix-style","style","e88058","lines","clojure.string.split.cljs$core$IFn$_invoke$arity$2","style-map","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","line","vec__88059","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","camel-snake-kebab.core/->camelCase","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","clojure.string/trim","e","book.html-converter/classes->keyword","className","cljs.core/seq","classes","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","kw","clojure.string.join.cljs$core$IFn$_invoke$arity$2","book.html-converter/chars->entity","ns","chars","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/str","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","p__88064","map__88065","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","book.html-converter/parse-entity","stream","result","entity-ns","options","s","c","G__88069","cljs.core/rest","p__88070","map__88071","book.html-converter/html-string->react-string","html-str","ignore-entities?","vec__88077","new-stream","new-result","G__88080","segments","cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2","cljs.core/char?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","var_args","G__88082","book.html-converter/element->call","js/Error","p__88090","map__88091","elem","book.html_converter.element__GT_call.cljs$core$IFn$_invoke$arity$2","ns-alias","keep-empty-attrs?","and__4120__auto__","or__4131__auto__","clojure.string/starts-with?","clojure.string/ends-with?","cljs.core/re-matches","cljs.core/vector?","tag","cljs.core/name","raw-props","cljs.core/second","classkey","cljs.core/contains?","attrs","G__88095","clojure.set/rename-keys","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core.update.cljs$core$IFn$_invoke$arity$3","children","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","expanded-children","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/identity","G__88097","book.html-converter/html->clj-dom","html-fragment","hiccup-list","hickory.core/as-hiccup","hickory.core/parse-fragment","G__88098","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/count","cljs.core/vec","book.html_converter.html__GT_clj_dom.cljs$core$IFn$_invoke$arity$2","book.html-converter/convert","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__88099","map__88100","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","p","state","html","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs","book.html_converter.html__GT_clj_dom.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","options__72617__auto__","p__88104","map__88106","com.fulcrologic.fulcro.components/wrapped-render","map__88108","com.fulcrologic.fulcro.components/props","js/book","js/book.html-converter","js/book.html-converter.HTMLConverter","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj88117","G__88118","G__88119","goog.object/get","obj88121","com.fulcrologic.fulcro.components/configure-component!","book.html-converter/HTMLConverter","this","params","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","evt","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","sb__4661__auto__","goog.string/StringBuffer","*print-newline*-orig-val__88112","cljs.core/*print-newline*","*print-fn*-orig-val__88113","cljs.core/*print-fn*","*print-newline*-temp-val__88114","*print-fn*-temp-val__88115","x__4662__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","book.html-converter/ui-html-convert","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.components/make-state-map","map__88122","js/book.html-converter.Root","obj88127","G__88128","G__88129","obj88131","book.html-converter/Root","converter","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.html-converter\n  (:require\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.dom.html-entities :as ent]\n    [taoensso.timbre :as log]\n    [camel-snake-kebab.core :as csk]\n    [hickory.core :as hc]\n    [clojure.set :as set]\n    [clojure.pprint :refer [pprint]]\n    [clojure.string :as str]))\n\n(def attr-renames {:class        :className\n                   :for          :htmlFor\n                   :tabindex     :tabIndex\n                   :viewbox      :viewBox\n                   :spellcheck   :spellcheck\n                   :autocorrect  :autoCorrect\n                   :autocomplete :autoComplete})\n\n(defn fix-style [style]\n  (try\n    (let [lines     (str/split style #\";\")\n          style-map (into {} (map (fn [line]\n                                    (let [[k v] (str/split line #\":\")]\n                                      [(csk/->camelCase (keyword k)) (str/trim v)])) lines))]\n\n      style-map)\n    (catch #?(:cljs :default :clj Exception) e\n      style)))\n\n(defn classes->keyword [className]\n  (when (seq (str/trim className))\n    (let [classes (keep (fn [e] (when (seq e) e)) (str/split className #\"  *\"))\n          kw      (keyword (str \".\" (str/join \".\" classes)))]\n      kw)))\n\n(defn- chars->entity [ns chars]\n  (if (= \\# (first chars))\n    (apply str \"&\" (conj chars \";\"))                        ; skip it. needs (parse int, convert base, format to 4-digit code)\n    (if (seq ns)\n      (symbol ns (apply str chars))\n      (symbol (apply str chars)))))\n\n(defn- parse-entity [stream result {:keys [entity-ns] :as options}]\n  (loop [s stream chars []]\n    (let [c (first s)]\n      (case c\n        (\\; nil) [(rest s) (if (seq chars)\n                             (conj result (chars->entity entity-ns chars))\n                             result)]\n        (recur (rest s) (conj chars c))))))\n\n(defn- html-string->react-string [html-str {:keys [ignore-entities?] :as options}]\n  (if ignore-entities?\n    html-str\n    (loop [s html-str result []]\n      (let [c (first s)\n            [new-stream new-result] (case c\n                                      nil [nil result]\n                                      \\& (parse-entity (rest s) result options)\n                                      [(rest s) (conj result c)])]\n        (if new-stream\n          (recur new-stream new-result)\n          (let [segments (partition-by char? new-result)\n                result   (mapv (fn [s]\n                                 (if (char? (first s))\n                                   (apply str s)\n                                   (first s))) segments)]\n            result))))))\n\n(defn element->call\n  ([elem]\n   (element->call elem {}))\n  ([elem {:keys [ns-alias keep-empty-attrs?] :as options}]\n   (cond\n     (and (string? elem)\n       (let [elem (str/trim elem)]\n         (or\n           (= \"\" elem)\n           (and\n             (str/starts-with? elem \"<!--\")\n             (str/ends-with? elem \"-->\"))\n           (re-matches #\"^[ \\n]*$\" elem)))) nil\n     (string? elem) (html-string->react-string (str/trim elem) options)\n     (vector? elem) (let [tag               (name (first elem))\n                          raw-props         (second elem)\n                          classkey          (when (contains? raw-props :class)\n                                              (classes->keyword (:class raw-props)))\n                          attrs             (cond-> (set/rename-keys raw-props attr-renames)\n                                              (contains? raw-props :class) (dissoc :className)\n                                              (contains? raw-props :style) (update :style fix-style))\n                          children          (keep (fn [c] (element->call c options)) (drop 2 elem))\n                          expanded-children (reduce\n                                              (fn [acc c]\n                                                (if (vector? c)\n                                                  (into [] (concat acc c))\n                                                  (conj acc c)))\n                                              []\n                                              children)]\n                      (concat (list) (keep identity\n                                       [(if (seq ns-alias)\n                                          (symbol ns-alias tag)\n                                          (symbol tag))\n                                        (when classkey classkey)\n                                        (if keep-empty-attrs?\n                                          attrs\n                                          (when (seq attrs) attrs))]) expanded-children))\n     :otherwise \"\")))\n\n(defn html->clj-dom\n  \"Convert an HTML fragment (containing just one tag) into a corresponding Dom cljs.\n\n  Options is a map that can contain:\n\n  - `ns-alias`: The primary DOM namespace alias to use.  If not set, the calls will not be namespaced.\n  - `keep-empty-attrs?`: Boolean (default false). Output (dom/p {} ...) vs (dom/p ...).\n  - `entity-ns`: String (defaults to \\\"ent\\\"). When named HTML entities are found they are converted to the Fulcro\n    HTML entity ns symbols that stand for the correct unicode (e.g. \\\"&quot;\\\" -> `ent/quot`). This is the ns alias\n    for those.\n  - `ignore-entities?`: Boolean (default false). If true, entities in strings will not be touched.\n  \"\n  ([html-fragment options]\n   (let [hiccup-list (map hc/as-hiccup (hc/parse-fragment html-fragment))\n         options     (cond-> options\n                       (not (contains? options :entity-ns)) (assoc :entity-ns \"ent\"))]\n     (let [result (keep (fn [e] (element->call e options)) hiccup-list)]\n       (if (< 1 (count result))\n         (vec result)\n         (first result)))))\n  ([html-fragment]\n   (html->clj-dom html-fragment {:ns-alias \"dom\"})))\n\n(defmutation convert [p]\n  (action [{:keys [state]}]\n    (let [html (get-in @state [:top :conv :html])\n          cljs (html->clj-dom html)]\n      (swap! state assoc-in [:top :conv :cljs] {:code cljs}))))\n\n(defsc HTMLConverter [this {:keys [html cljs]}]\n  {:initial-state (fn [params] {:html \"<div id=\\\"3\\\" class=\\\"b\\\"><p>Paragraph</p></div>\" :cljs {:code (list)}})\n   :query         [:cljs :html]\n   :ident         (fn [] [:top :conv])}\n  (dom/div {:className \"\"}\n    (dom/textarea {:cols     80 :rows 10\n                   :onChange (fn [evt] (m/set-string! this :html :event evt))\n                   :value    html})\n    (dom/button :.c-button {:onClick (fn [evt]\n                                       (comp/transact! this `[(convert {})]))} \"Convert\")\n    (dom/pre {} (with-out-str (pprint (:code cljs))))))\n\n(def ui-html-convert (comp/factory HTMLConverter))\n\n(defsc Root [this {:keys [converter]}]\n  {:initial-state {:converter {}}\n   :query         [{:converter (comp/get-query HTMLConverter)}]}\n  (ui-html-convert converter))\n\n"]}