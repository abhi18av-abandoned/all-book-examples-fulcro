{"version":3,"sources":["book/ui/hover_example.cljs"],"mappings":"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","names":["book.ui.hover-example/change-size*","state-map","amount","current-size","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","new-size","cljs.core/assoc-in","book.ui.hover-example/make-smaller","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__84969","map__84971","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","p","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","book.ui.hover-example/make-bigger","p__84974","map__84975","book.ui.hover-example/update-marker","map__84988","p__84990","map__84991","coords","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","book.ui.hover-example/event->dom-coords","evt","dom-ele","cx","cy","BB","x","y","book.ui.hover-example/event->normalized-coords","w","h","book.ui.hover-example/render-hover-and-marker","canvas","props","marker","size","real-marker-coords","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/*","ctx","clear","drawHover","cljs.core/first","cljs.core/second","drawMarker","book.ui.hover-example/place-marker","child","goog.object/get","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","book.ui.hover-example/hover-marker","updated-coords","com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/props","options__72617__auto__","p__85004","map__85005","com.fulcrologic.fulcro.components/wrapped-render","map__85013","js/book","js/book.ui","js/book.ui.hover-example","js/book.ui.hover-example.Child","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85026","G__85028","G__85029","obj85033","com.fulcrologic.fulcro.components/configure-component!","book.ui.hover-example/Child","this","id","_","com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","r","goog.object/set","book.ui.hover-example/ui-child","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__85040","js/book.ui.hover-example.Root","obj85050","G__85051","G__85052","obj85054","book.ui.hover-example/Root","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","params","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/force-children","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.dom/macro-create-element*"],"sourcesContent":["(ns book.ui.hover-example\n  (:require\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc initial-state]]\n    [goog.object :as gobj]\n    [com.fulcrologic.fulcro.dom :as dom]))\n\n(defn change-size*\n  \"Change the size of the canvas by some (pos or neg) amount..\"\n  [state-map amount]\n  (let [current-size (get-in state-map [:child/by-id 0 :size])\n        new-size     (+ amount current-size)]\n    (assoc-in state-map [:child/by-id 0 :size] new-size)))\n\n; Make the canvas smaller. This will cause\n(defmutation ^:intern make-smaller [p]\n  (action [{:keys [state]}]\n    (swap! state change-size* -20)))\n\n(defmutation ^:intern make-bigger [p]\n  (action [{:keys [state]}]\n    (swap! state change-size* 20)))\n\n(defmutation ^:intern update-marker [{:keys [coords]}]\n  (action [{:keys [state]}]\n    (swap! state assoc-in [:child/by-id 0 :marker] coords)))\n\n\n(defn event->dom-coords\n  \"Translate a javascript evt to a clj [x y] within the given dom element.\"\n  [evt dom-ele]\n  (let [cx (.-clientX evt)\n        cy (.-clientY evt)\n        BB (.getBoundingClientRect dom-ele)\n        x  (- cx (.-left BB))\n        y  (- cy (.-top BB))]\n    [x y]))\n\n(defn event->normalized-coords\n  \"Translate a javascript evt to a clj [x y] within the given dom element as normalized (0 to 1) coordinates.\"\n  [evt dom-ele]\n  (let [cx (.-clientX evt)\n        cy (.-clientY evt)\n        BB (.getBoundingClientRect dom-ele)\n        w  (- (.-right BB) (.-left BB))\n        h  (- (.-bottom BB) (.-top BB))\n        x  (/ (- cx (.-left BB))\n             w)\n        y  (/ (- cy (.-top BB))\n             h)]\n    [x y]))\n\n(defn render-hover-and-marker\n  \"Render the graphics in the canvas. Pass the component props and state. \"\n  [canvas props coords]\n  (let [marker             (:marker props)\n        size               (:size props)\n        real-marker-coords (mapv (partial * size) marker)\n        ; See HTML5 canvas docs\n        ctx                (.getContext canvas \"2d\")\n        clear              (fn []\n                             (set! (.-fillStyle ctx) \"white\")\n                             (.fillRect ctx 0 0 size size))\n        drawHover          (fn []\n                             (set! (.-strokeStyle ctx) \"gray\")\n                             (.strokeRect ctx (- (first coords) 5) (- (second coords) 5) 10 10))\n        drawMarker         (fn []\n                             (set! (.-strokeStyle ctx) \"red\")\n                             (.strokeRect ctx (- (first real-marker-coords) 5) (- (second real-marker-coords) 5) 10 10))]\n    (.save ctx)\n    (clear)\n    (drawHover)\n    (drawMarker)\n    (.restore ctx)))\n\n(defn place-marker\n  \"Update the marker in app state. Derives normalized coordinates, and updates the marker in application state.\"\n  [child evt]\n  (let [canvas (gobj/get child \"canvas\")]\n    (comp/transact! child `[(update-marker\n                              {:coords ~(event->normalized-coords evt canvas)})])))\n\n(defn hover-marker\n  \"Updates the hover location of a proposed marker using canvas coordinates. Hover location\n   is stored in component local state (meaning that a low-level app database query will not\n   run to do the render that responds to this change)\"\n  [child evt]\n  (let [canvas         (gobj/get child \"canvas\")\n        updated-coords (event->dom-coords evt canvas)]\n    (comp/set-state! child {:coords updated-coords})\n    (render-hover-and-marker canvas (comp/props child) updated-coords)))\n\n(defsc Child [this {:keys [id size] :as props}]\n  {:query          [:id :size :marker]\n   :initial-state  (fn [_] {:id 0 :size 50 :marker [0.5 0.5]})\n   :ident          (fn [] [:child/by-id id])\n   :initLocalState (fn [this _] {:coords [-50 -50]})}\n  ; Remember that this \"render\" just renders the DOM (e.g. the canvas DOM element). The graphical\n  ; rendering within the canvas is done during event handling.\n  ; size comes from props. Transactions on size will cause the canvas to resize in the DOM\n  (when-let [canvas (gobj/get this \"canvas\")]\n    (render-hover-and-marker canvas props (comp/get-state this :coords)))\n  (dom/canvas {:width       (str size \"px\")\n               :height      (str size \"px\")\n               :onMouseDown (fn [evt] (place-marker this evt))\n               :onMouseMove (fn [evt] (hover-marker this evt))\n               ; This is a pure React mechanism for getting the underlying DOM element.\n               ; Note: when the DOM element changes this fn gets called with nil\n               ; (to help you manage memory leaks), then the new element\n               :ref         (fn [r]\n                              (when r\n                                (gobj/set this \"canvas\" r)\n                                (render-hover-and-marker r props (comp/get-state this :coords))))\n               :style       {:border \"1px solid black\"}}))\n\n(def ui-child (comp/factory Child))\n\n(defsc Root [this {:keys [child]}]\n  {:query         [{:child (comp/get-query Child)}]\n   :initial-state (fn [params] {:ui/react-key \"K\" :child (comp/get-initial-state Child nil)})}\n  (dom/div\n    (dom/button {:onClick #(comp/transact! this `[(make-bigger {})])} \"Bigger!\")\n    (dom/button {:onClick #(comp/transact! this `[(make-smaller {})])} \"Smaller!\")\n    (dom/br)\n    (dom/br)\n    (ui-child child)))\n\n\n"]}