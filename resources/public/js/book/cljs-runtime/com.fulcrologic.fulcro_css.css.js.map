{"version":3,"sources":["com/fulcrologic/fulcro_css/css.cljc"],"mappings":";;;;;;;;;;AAUA;;;AAAKA,AAAoDC;AACzD,AAAKC,AAAaC;AAClB;;;;AAAKC,AAEHC;AACF,AAAKC,AAAcC;AACnB;;;AAAKC,AAAqEC;AAC1E;;;AAAKC,AAAuGC;AAC5G;;;AAAKC,AAA0GC;AAC/G;;;AAAKC,AAAsHC;AAC3H;;;AAAKC,AAAsHC;AAC3H;;;AAAKC,AAAoIC;AAEzI,AAAA,AAAMC,AACHC,AAASC;AADZ,AAEE,AAAMC,AAAoB,AAAA,AAAWF;AAC/BG,AAAoB,AAAA,AAACC,AAAUF;AADrC,AAEE,AAACG,AAAY,AAAA,AAACC,AAAa,AAAA,AAACE;AAADD;AAAA,AAAM,AAAI,AAAAA,AAACE;AACH,AAAAF,AAACG,AAAmBT;;AADtBM;;;AAGJJ;;AAEjC;;;AAAA,AAAMQ,AAEHC;AAFH,AAGE,AAACC,AAAc,AAAKC;AAAL,AACE,AACE,AAACC,AAAqBD;AAAK,AAACE,AAAeF,AAAIF;;AADjD,AAEE,AAACK,AAAaH;AAAK,AAACf,AAAkBe,AAAIF;;AAF5C,AAGaE;;;;AAAM,AAACzB,AAAAA,AAAAA,AAAgBuB,AAAAA;;AAEvD;;;AAAA,AAAMM,AAEHN;AAFH,AAGE,AAACO,AAAO,AAACR,AAAaC,AACpB,AAACrB,AAAAA,AAAAA,AAAiBqB,AAAAA;;AAEtB;;;AAAA,AAAMQ,AAEHR;AAFH,AAGE,AAAMS,AAAsB,AAACH,AAAcN;AACrCU,AAAsB,AAACC,AAAS,AAAC5B,AAAAA,AAAAA,AAAoBiB,AAAAA;AACrDY,AAAsB,AAAA,AAACG;AAADF,AAAAC;AAAA,AAAS,AAAAD,AAACG,AAAQ,AAAAF,AAACR;;AAAnB,AAAyCI;AAFrE,AAGE,AAACH,AAAOE,AAAUG;;AAEtB;;;;;;;AAAA,AAAMK,AAMHjB;AANH,AAOE,AAACkB,AAAM,AAACV,AAAQR","names":["com.fulcrologic.fulcro-css.css/cssify","com.fulcrologic.fulcro-css.css-implementation/cssify","com.fulcrologic.fulcro-css.css/fq-component","com.fulcrologic.fulcro-css.css-implementation/fqname","com.fulcrologic.fulcro-css.css/local-class","com.fulcrologic.fulcro-css.css-implementation/local-class","com.fulcrologic.fulcro-css.css/set-classname","com.fulcrologic.fulcro-css.css-implementation/set-classname","com.fulcrologic.fulcro-css.css/CSS?","com.fulcrologic.fulcro-css.css-implementation/CSS?","com.fulcrologic.fulcro-css.css/get-local-rules","com.fulcrologic.fulcro-css.css-implementation/get-local-rules","com.fulcrologic.fulcro-css.css/get-global-rules","com.fulcrologic.fulcro-css.css-implementation/get-global-rules","com.fulcrologic.fulcro-css.css/get-includes","com.fulcrologic.fulcro-css.css-implementation/get-includes","com.fulcrologic.fulcro-css.css/get-nested-includes","com.fulcrologic.fulcro-css.css-implementation/get-nested-includes","com.fulcrologic.fulcro-css.css/get-classnames","com.fulcrologic.fulcro-css.css-implementation/get-classnames","com.fulcrologic.fulcro-css.css/localize-selector","selector","comp","val","split-cns-selectors","clojure.string.split.cljs$core$IFn$_invoke$arity$2","garden.selectors/selector","clojure.string.join.cljs$core$IFn$_invoke$arity$2","p1__76801#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro-css.css-implementation/prefixed-name?","com.fulcrologic.fulcro-css.css-implementation/localize-name","com.fulcrologic.fulcro-css.css/localize-css","component","clojure.walk/postwalk","ele","com.fulcrologic.fulcro-css.css-implementation/prefixed-keyword?","com.fulcrologic.fulcro-css.css-implementation/localize-kw","com.fulcrologic.fulcro-css.css-implementation/selector?","com.fulcrologic.fulcro-css.css/get-css-rules","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro-css.css/get-css","own-rules","nested-children","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","nested-children-rules","p1__76802#","p2__76803#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro-css.css/raw-css","garden.core.css.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css\n  (:require [cljs.tagged-literals]\n            [com.fulcrologic.fulcro-css.css-implementation :as ci]\n            [com.fulcrologic.fulcro.components :as comp]\n            [clojure.string :as str]\n            #?(:cljs [cljsjs.react.dom])\n            [clojure.walk :as walk]\n            [garden.core :as g]\n            [garden.selectors :as gs]))\n\n(def cssify \"Replaces slashes and dots with underscore.\" ci/cssify)\n(def fq-component ci/fqname)\n(def local-class \"Generates a string name of a localized CSS class. This function combines the fully-qualified name of the given class\n     with the (optional) specified name.\"\n  ci/local-class)\n(def set-classname ci/set-classname)\n(def CSS? \"`(CSS? class)` : Returns true if the given component has css.\" ci/CSS?)\n(def get-local-rules \"`(get-local-rules class)` : Get the *raw* value from the local-rules of a component.\" ci/get-local-rules)\n(def get-global-rules \"`(get-global-rules class)` : Get the *raw* value from the global-rules of a component.\" ci/get-global-rules)\n(def get-includes \"`(get-inculdes class)` :Returns the list of components from the include-children method of a component\" ci/get-includes)\n(def get-nested-includes \"`(get-nested-includes class)` : Recursively finds all includes starting at the given component.\" ci/get-nested-includes)\n(def get-classnames \"`(get-classnames class)` : Returns a map from user-given CSS rule names to localized names of the given component.\" ci/get-classnames)\n\n(defn localize-selector\n  [selector comp]\n  (let [val                 (:selector selector)\n        split-cns-selectors (str/split val #\" \")]\n    (gs/selector (str/join \" \" (map #(if (ci/prefixed-name? %)\n                                       (ci/localize-name % comp)\n                                       %)\n                                 split-cns-selectors)))))\n\n(defn localize-css\n  \"Converts prefixed keywords into localized keywords and localizes the values of garden selectors\"\n  [component]\n  (walk/postwalk (fn [ele]\n                   (cond\n                     (ci/prefixed-keyword? ele) (ci/localize-kw ele component)\n                     (ci/selector? ele) (localize-selector ele component)\n                     :otherwise ele)) (get-local-rules component)))\n\n(defn get-css-rules\n  \"Gets the raw local and global rules from the given component.\"\n  [component]\n  (concat (localize-css component)\n    (get-global-rules component)))\n\n(defn get-css\n  \"Recursively gets all global and localized rules (in garden notation) starting at the given component.\"\n  [component]\n  (let [own-rules             (get-css-rules component)\n        nested-children       (distinct (get-nested-includes component))\n        nested-children-rules (reduce #(into %1 (get-css-rules %2)) [] nested-children)]\n    (concat own-rules nested-children-rules)))\n\n(defn raw-css\n  \"Returns a string that contains the raw CSS for the rules defined on the given component's sub-tree. This can be used for\n   server-side rendering of the style element, or in a `style` element as the :dangerouslySetInnerHTML/:html value:\n\n   (dom/style #js {:dangerouslySetInnerHTML #js {:__html (raw-css component)}})\n   \"\n  [component]\n  (g/css (get-css component)))\n\n"]}