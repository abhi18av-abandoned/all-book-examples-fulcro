{"version":3,"sources":["book/demos/loading_data_basics.cljs"],"mappings":"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","names":["options__72617__auto__","_","props","com.fulcrologic.fulcro.components/wrapped-render","map__89217","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/book","js/book.demos","js/book.demos.loading-data-basics","js/book.demos.loading-data-basics.Person","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89220","G__89221","G__89222","goog.object/get","obj89224","com.fulcrologic.fulcro.components/configure-component!","book.demos.loading-data-basics/Person","this","id","name","age","time-ms","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1","book.demos.loading-data-basics/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","map__89225","js/book.demos.loading-data-basics.People","obj89228","G__89229","G__89230","obj89232","book.demos.loading-data-basics/People","people","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","book.demos.loading-data-basics/ui-people","map__89236","js/book.demos.loading-data-basics.Root","obj89247","G__89248","G__89249","obj89256","book.demos.loading-data-basics/Root","list","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","com.fulcrologic.fulcro.dom/macro-create-element*"],"sourcesContent":["(ns book.demos.loading-data-basics\n  (:require\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [book.demos.util :refer [now]]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.data-fetch :as df]))\n\n(defsc Person [this {:person/keys [id name age] :server/keys [time-ms] :as props}]\n  {:query [:person/id :person/name :person/age :server/time-ms]\n   :ident :person/id}\n  (dom/li\n    (str name \" (last queried at \" time-ms \")\")\n    (dom/button {:onClick (fn []\n                            ; Load relative to an ident (of this component).\n                            ; This will refresh the entity in the db. The helper function\n                            ; (df/refresh! this) is identical to this, but shorter to write.\n                            (df/load! this (comp/get-ident this) Person))} \"Update\")))\n\n(def ui-person (comp/factory Person {:keyfn :db/id}))\n\n(defsc People [this {:list/keys [people]}]\n  {:initial-state {:list/id :param/id :list/people []}\n   :query         [:list/id {:list/people (comp/get-query Person)}]\n   :ident         :list/id}\n  (dom/ul\n    (map ui-person people)))\n\n(def ui-people (comp/factory People {:keyfn :people/kind}))\n\n(defsc Root [this {:root/keys [list]}]\n  {:initial-state (fn [_] {:root/list (comp/get-initial-state People {:id :people})})\n   :query         [{:root/list (comp/get-query People)}]}\n  (dom/div\n    (dom/button\n      {:onClick (fn []\n                  (df/load! this :all-people Person {:target [:list/id :people :list/people]}))}\n      \"Load People\")\n    (dom/h4 \"People in Database\")\n    (ui-people list)))\n\n"]}