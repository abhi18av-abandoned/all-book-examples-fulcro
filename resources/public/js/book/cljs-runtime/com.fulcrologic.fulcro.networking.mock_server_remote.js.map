{"version":3,"sources":["com/fulcrologic/fulcro/networking/mock_server_remote.cljs"],"mappings":"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","names":["p__74381","map__74382","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.networking.mock-server-remote/mock-http-server","parser","options","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__74385","p__74386","map__74387","map__74388","ast","result-handler","update-handler","active-requests","send-node","edn","edn-query-language.core/ast->query","ok-handler","result","e74391","G__74392","cljs.core/select-keys","e","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","error-handler","error-result","e74393","G__74394","e74395","c__52131__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__52132__auto__","switch__52035__auto__","state_74405","state_val_74406","inst_74396","cljs.core.async.impl.ioc-helpers/take!","inst_74398","inst_74399","inst_74400","inst_74401","cljs.core/PersistentHashMap","inst_74402","cljs.core.async.impl.ioc-helpers/return-chan","statearr-74412","state-machine__52036__auto__","ret-value__52037__auto__","result__52038__auto__","cljs.core/keyword-identical?","e74413","js/Object","ex__52039__auto__","statearr-74414","cljs.core.async.impl.ioc-helpers/process-exception","state__52133__auto__","statearr-74417","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","this","id"],"sourcesContent":["(ns com.fulcrologic.fulcro.networking.mock-server-remote\n  \"Simple adapter code that allows you to use a generic parser 'as if' it were a client remote in CLJS.\"\n  (:require\n    [com.fulcrologic.fulcro.algorithms.tx-processing :as txn]\n    [taoensso.timbre :as log]\n    [edn-query-language.core :as eql]\n    [cljs.core.async :as async]))\n\n(defn mock-http-server\n  \"Create a remote that mocks a Fulcro remote server.\n\n  :parser - A function `(fn [eql-query] async-channel)` that returns a core async channel with the result for the\n  given eql-query.\"\n  [{:keys [parser] :as options}]\n  (merge options\n    {:transmit! (fn transmit! [{:keys [active-requests]} {:keys [::txn/ast ::txn/result-handler ::txn/update-handler] :as send-node}]\n                  (let [edn           (eql/ast->query ast)\n                        ok-handler    (fn [result]\n                                        (try\n                                          (result-handler (select-keys result #{:transaction :status-code :body :status-text}))\n                                          (catch :default e\n                                            (log/error e \"Result handler failed with an exception.\"))))\n                        error-handler (fn [error-result]\n                                        (try\n                                          (result-handler (merge {:status-code 500} (select-keys error-result #{:transaction :status-code :body :status-text})))\n                                          (catch :default e\n                                            (log/error e \"Error handler failed with an exception.\"))))]\n                    (try\n                      (async/go\n                        (let [result (async/<! (parser edn))]\n                          (ok-handler {:transaction edn :status-code 200 :body result})))\n                      (catch :default e\n                        (error-handler {:transaction edn :status-code 500})))))\n     :abort!    (fn abort! [this id])}))\n"]}