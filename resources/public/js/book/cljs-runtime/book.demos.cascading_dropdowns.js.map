{"version":3,"sources":["book/demos/cascading_dropdowns.cljs"],"mappings":";;;;;;;;;;AAeA,AAAA,AAAMA,AAAQC,AAAMC;AAApB,AAAA,AAAA,AAAA,AACSA,AAAYD;;AAErB,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAgBC,AAAgBC,AAAIC;AAApC,AAEE,AAAMC,AAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIF;AAAf,AAAA,AAAA,AACW,AAAAG,AAAMD;AAANC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AACS,AAAA,AAAA,AAACR,AAAyB,AAAA,AAAA,AAACA;;;AADpC;AAAA,AAEU,AAAA,AAAA,AAACA,AAAuB,AAAA,AAAA,AAACA;;;;AAFnC,AAAA,AAAAU,AAAA,AAAA,AAAAF;;;;;AAQb,AAAA;;;AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AAEHO,AAAMC,AAASC;AAFlB,AAGE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAsCF,AAAcD,AACnD,AAAA,AAAA,AAAA,AAACI,AAAMC,AACL,AAAAC,AAAA,AAAA,AAAA,AAAA,AACA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACAJ;;;AAPN,AAAA,AAAA,AAAMT;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AASA","names":["book.demos.cascading-dropdowns/option","value","text","com.wsscode.pathom.connect/resolver","book.demos.cascading-dropdowns/model-resolver","env","_","make","G__89046","cljs.core/Keyword","js/Error","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","book.demos.cascading-dropdowns/render-example","seq89047","G__89048","cljs.core/first","cljs.core/next","G__89049","self__4717__auto__","width","height","children","book.elements/ui-iframe","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","com.fulcrologic.fulcro.dom/div","com.fulcrologic.fulcro.dom/macro-create-element*"],"sourcesContent":["(ns book.demos.cascading-dropdowns\n  (:require\n    [com.fulcrologic.semantic-ui.modules.dropdown.ui-dropdown :as dropdown]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [book.elements :as ele]\n    [taoensso.timbre :as log]\n    [com.wsscode.pathom.connect :as pc]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Server\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn option [value text]\n  {:text text :value value})\n\n(pc/defresolver model-resolver [env _]\n  {::pc/output [:models]}\n  (let [make (-> env :ast :params :make)]\n    {:models (case make\n               :ford [(option :escort \"Escort\") (option :F-150 \"F-150\")]\n               :honda [(option :civic \"Civic\") (option :accort \"Accord\")])}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Client\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn render-example\n  \"Wrap an example in an iframe so we can load external CSS without affecting the containing page.\"\n  [width height & children]\n  (ele/ui-iframe {:frameBorder 0 :height height :width width}\n    (apply dom/div {:key \"example-frame-key\"}\n      (dom/style \".boxed {border: 1px solid black}\")\n      (dom/link {:rel \"stylesheet\" :href \"https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.css\"})\n      children)))\n\n(comment\n\n  (defmutation show-list-loading\n    \"Change the items of the dropdown with the given ID to a single item that indicates Loading...\"\n    [{:keys [id]}]\n    (action [{:keys [state]}]\n      (swap! state assoc-in\n        [:bootstrap.dropdown/by-id id :fulcro.ui.bootstrap3/items]\n        [(assoc (bs/dropdown-item :loading \"Loading...\") :fulcro.ui.bootstrap3/disabled? true)])))\n\n  (defsc Root [this {:keys [make-dropdown model-dropdown]}]\n    {:initial-state {}\n     :query         [; initial state for two Bootstrap dropdowns\n                     {:make-dropdown (comp/get-query bs/Dropdown)}\n                     {:model-dropdown (comp/get-query bs/Dropdown)}]}\n    (let [{:keys [:fulcro.ui.bootstrap3/items]} model-dropdown]\n      (render-example \"200px\" \"200px\"\n        (dom/div\n          (dropdown/ui-dropdown\n            {:onSelect  (fn [item]\n                          ; Update the state of the model dropdown to show a loading indicator\n                          (comp/transact! this `[(show-list-loading {:id :model})])\n                          ; Issue the remote load. Note the use of DropdownItem as the query, so we get proper normalization\n                          ; The targeting is used to make sure we hit the correct dropdown's items\n                          (df/load this :models bs/DropdownItem {:target [:bootstrap.dropdown/by-id :model :fulcro.ui.bootstrap3/items]\n                                                                 ; don't overwrite state with loading markers...we're doing that manually to structure it specially\n                                                                 :marker false\n                                                                 ; A server parameter on the query\n                                                                 :params {:make item}}))\n             :stateful? true})\n          (dropdown/ui-dropdown model-dropdown\n            {:onSelect  (fn [item] (log/info item))\n             :stateful? true}))))))\n"]}