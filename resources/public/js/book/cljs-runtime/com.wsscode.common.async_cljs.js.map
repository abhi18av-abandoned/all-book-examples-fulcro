{"version":3,"sources":["com/wsscode/common/async_cljs.cljs"],"mappings":";;;;AAKA,AAAA,AAAMA,AAAOC;AAAb,AACE,AAAA,AAAA,AAAA,AAAgCA;AAAhC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAgCD;AAAhC;;AAAA,AAAA,AAAA,AAAgCA;AAAhC,AAAAE,AAAYC,AAAoBH;;AAAhC;;;;AAAA,AAAAE,AAAYC,AAAoBH;;;AAElC,AAAA,AAAMI,AAAeC;AAArB,AACE,AAAML,AAAE,AAACM;AAAT,AACE,AAAA,AAAOD;AAAPE;AAAA,AACG,AAAA,AAAA,AAAAA,AAACE,AAAWT;;AADf;AAAAQ;AAAA,AAEG,AAAA,AAAA,AAAAA,AAACC,AAAWT;;;;AACfA;;AAEJ,AAAA,AAAMU,AAAeC;AAArB,AACE,AAAI,AAAA,AAACC,AAAUD;AACb,AAAO,AAAA,AAAQA;;AACf,AAAA,AAAUA;;;AAEd,AAAA,AAAME,AAAQC;AAAd,AACE,AAAWC,AAASD;;AAEtB,AAAA,AAAME,AAAWC;AAAjB,AACE,AAAI,AAACJ,AAAOI;AACV,AAAOA;;AACPA","names":["com.wsscode.common.async-cljs/chan?","c","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core.async.impl.protocols/ReadPort","com.wsscode.common.async-cljs/promise->chan","p","cljs.core.async.promise_chan.cljs$core$IFn$_invoke$arity$0","p1__59726#","p1__59727#","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","com.wsscode.common.async-cljs/consumer-pair","resp","cljs.core/contains?","com.wsscode.common.async-cljs/error?","err","js/Error","com.wsscode.common.async-cljs/throw-err","x"],"sourcesContent":["(ns com.wsscode.common.async-cljs\n  (:require-macros [com.wsscode.common.async-cljs :refer [go-catch <?]])\n  (:require [cljs.core.async :as async]\n            [cljs.core.async.impl.protocols :as async.prot]))\n\n(defn chan? [c]\n  (satisfies? async.prot/ReadPort c))\n\n(defn promise->chan [p]\n  (let [c (async/promise-chan)]\n    (.then p\n      #(async/put! c {:success %})\n      #(async/put! c {:error %}))\n    c))\n\n(defn consumer-pair [resp]\n  (if (contains? resp :error)\n    (throw (:error resp))\n    (:success resp)))\n\n(defn error? [err]\n  (instance? js/Error err))\n\n(defn throw-err [x]\n  (if (error? x)\n    (throw x)\n    x))\n"]}