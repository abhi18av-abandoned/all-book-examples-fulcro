{
"version":3,
"file":"module$node_modules$react_motion$lib$mergeDiff.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/react-motion/lib/mergeDiff.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_motion$lib$mergeDiff\"] = function(global,require,module,exports) {\n\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = mergeDiff;\n\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n\n  var prevKeyIndex = {};\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  var nextKeyIndex = {};\n  for (var i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  }\n\n  // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n  var ret = [];\n  for (var i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n  for (var i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(i, prev[i]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  }\n\n  // now all the items all present. Core sorting logic to have the right order\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      }\n      // pluggable. default to: next bigger than prev\n      return 1;\n    }\n    // prevOrderA, nextOrderB\n    for (var i = 0; i < next.length; i++) {\n      var pivot = next[i].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    }\n    // pluggable. default to: next bigger than prev\n    return -1;\n  });\n}\n\nmodule.exports = exports['default'];\n// to loop through and find a key's index each time), but I no longer care\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","mergeDiff","prev","next","onRemove","prevKeyIndex","i","length","key","nextKeyIndex","ret","Object","prototype","hasOwnProperty","call","fill","push","sort","a","b","nextOrderA","nextOrderB","prevOrderA","prevOrderB","pivot"]
}
