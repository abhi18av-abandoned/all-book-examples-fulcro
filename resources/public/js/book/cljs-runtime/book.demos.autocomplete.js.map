{"version":3,"sources":["book/demos/autocomplete.cljs"],"mappings":"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","names":["book.demos.autocomplete/airport-search","s","book.demos.airports/airports","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","i","clojure.string/includes?","clojure.string/lower-case","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","com.wsscode.pathom.connect/resolver","book.demos.autocomplete/list-resolver","env","params","search","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","book.demos.autocomplete/autocomplete-ident","id-or-props","cljs.core/map?","options__72617__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__85968","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/book","js/book.demos","js/book.demos.autocomplete","js/book.demos.autocomplete.CompletionList","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85975","G__85976","G__85977","goog.object/get","obj85979","com.fulcrologic.fulcro.components/configure-component!","book.demos.autocomplete/CompletionList","this","values","onValueSelect","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","cljs.core.map.cljs$core$IFn$_invoke$arity$2","v","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","book.demos.autocomplete/ui-completion-list","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","book.demos.autocomplete/populate-loaded-suggestions","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__85984","p__85990","map__85991","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","id","state","autocomplete-path","source-path","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","target-path","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","cljs.core/deref","book.demos.autocomplete/get-suggestions","comp","new-value","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","goog.functions/debounce","load-suggestions","p__86051","map__86052","p__86054","map__86055","map__86057","js/book.demos.autocomplete.Autocomplete","obj86061","G__86062","G__86063","obj86065","book.demos.autocomplete/Autocomplete","suggestions","value","props","field-id","filtered-suggestions","cljs.core/vector?","p1__86050#","exact-match?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","cljs.core/first","onSelect","com.fulcrologic.fulcro.mutations.set_string_BANG_.cljs$core$IFn$_invoke$arity$variadic","evt","com.fulcrologic.fulcro.mutations/set-value!","cljs.core/seq","G__86059","book.demos.autocomplete/ui-autocomplete","map__86066","js/book.demos.autocomplete.AutocompleteRoot","obj86070","G__86071","G__86072","obj86074","book.demos.autocomplete/AutocompleteRoot","airport-input","p","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.demos.autocomplete\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [book.demos.airports :refer [airports]]\n    [clojure.string :as str]\n    [goog.functions :as gf]\n    [com.wsscode.pathom.connect :as pc]\n    ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SERVER:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn airport-search [s]\n  (->> airports\n    (filter (fn [i] (str/includes? (str/lower-case i) (str/lower-case s))))\n    (take 10)\n    vec))\n\n(pc/defresolver list-resolver [env params]\n  {::pc/output [:autocomplete/airports]}\n  (let [search (get-in env [:ast :params :search])]\n    {:autocomplete/airports (airport-search search)}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn autocomplete-ident\n  \"Returns the ident for an autocomplete control. Can be passed a map of props, or a raw ID.\"\n  [id-or-props]\n  (if (map? id-or-props)\n    [:autocomplete/by-id (:db/id id-or-props)]\n    [:autocomplete/by-id id-or-props]))\n\n(defsc CompletionList [this {:keys [values onValueSelect]}]\n  (dom/ul nil\n    (map (fn [v]\n           (dom/li {:key v}\n             (dom/a {:href \"javascript:void(0)\" :onClick #(onValueSelect v)} v))) values)))\n\n(def ui-completion-list (comp/factory CompletionList))\n\n(m/defmutation populate-loaded-suggestions\n  \"Mutation: Autocomplete suggestions are loaded in a non-visible property to prevent flicker. This is\n  used as a post mutation to move them to the active UI field so they appear.\"\n  [{:keys [id]}]\n  (action [{:keys [state]}]\n    (let [autocomplete-path (autocomplete-ident id)\n          source-path       (conj autocomplete-path :autocomplete/loaded-suggestions)\n          target-path       (conj autocomplete-path :autocomplete/suggestions)]\n      (swap! state assoc-in target-path (get-in @state source-path)))))\n\n(def get-suggestions\n  \"A debounced function that will trigger a load of the server suggestions into a temporary locations and fire\n   a post mutation when that is complete to move them into the main UI view.\"\n  (letfn [(load-suggestions [comp new-value id]\n            (df/load! comp :autocomplete/airports nil\n              {:params               {:search new-value}\n               :marker               false\n               :post-mutation        `populate-loaded-suggestions\n               :post-mutation-params {:id id}\n               :target               (conj (autocomplete-ident id) :autocomplete/loaded-suggestions)}))]\n    (gf/debounce load-suggestions 500)))\n\n(defsc Autocomplete [this {:keys [db/id autocomplete/suggestions autocomplete/value] :as props}]\n  {:query         [:db/id                                   ; the component's ID\n                   :autocomplete/loaded-suggestions         ; A place to do the loading, so we can prevent flicker in the UI\n                   :autocomplete/suggestions                ; the current completion suggestions\n                   :autocomplete/value]                     ; the current user-entered value\n   :ident         (fn [] (autocomplete-ident props))\n   :initial-state (fn [{:keys [id]}] {:db/id id :autocomplete/suggestions [] :autocomplete/value \"\"})}\n  (let [field-id             (str \"autocomplete-\" id)       ; for html label/input association\n        ;; server gives us a few, and as the user types we need to filter it further.\n        filtered-suggestions (when (vector? suggestions)\n                               (filter #(str/includes? (str/lower-case %) (str/lower-case value)) suggestions))\n        ; We want to not show the list if they've chosen something valid\n        exact-match?         (and (= 1 (count filtered-suggestions)) (= value (first filtered-suggestions)))\n        ; When they select an item, we place it's value in the input\n        onSelect             (fn [v] (m/set-string! this :autocomplete/value :value v))]\n    (dom/div {:style {:height \"600px\"}}\n      (dom/label {:htmlFor field-id} \"Airport: \")\n      (dom/input {:id       field-id\n                  :value    value\n                  :onChange (fn [evt]\n                              (let [new-value (.. evt -target -value)]\n                                ; we avoid even looking for help until they've typed a couple of letters\n                                (if (>= (.-length new-value) 2)\n                                  (get-suggestions this new-value id)\n                                  ; if they shrink the value too much, clear suggestions\n                                  (m/set-value! this :autocomplete/suggestions []))\n                                ; always update the input itself (controlled)\n                                (m/set-string! this :autocomplete/value :value new-value)))})\n      ; show the completion list when it exists and isn't just exactly what they've chosen\n      (when (and (vector? suggestions) (seq suggestions) (not exact-match?))\n        (ui-completion-list {:values filtered-suggestions :onValueSelect onSelect})))))\n\n(def ui-autocomplete (comp/factory Autocomplete))\n\n(defsc AutocompleteRoot [this {:keys [airport-input]}]\n  {:initial-state (fn [p] {:airport-input (comp/get-initial-state Autocomplete {:id :airports})})\n   :query         [{:airport-input (comp/get-query Autocomplete)}]}\n  (dom/div\n    (dom/h4 \"Airport Autocomplete\")\n    (ui-autocomplete airport-input)))\n\n"]}