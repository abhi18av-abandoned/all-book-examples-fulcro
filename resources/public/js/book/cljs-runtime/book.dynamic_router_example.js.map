{"version":3,"sources":["book/dynamic_router_example.cljs"],"mappings":"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","names":["options__72617__auto__","params","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.dynamic-router-example","js/book.dynamic-router-example.Settings","props__72618__auto__","this__72619__auto__","temp__5733__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","init-state__72620__auto__","obj88719","G__88720","G__88721","goog.object/get","obj88723","com.fulcrologic.fulcro.components/configure-component!","book.dynamic-router-example/Settings","this","props","app","route-params","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.routing.dynamic-routing/route-immediate","js/console.log","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.dom/macro-create-element*","_","map__88741","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","js/book.dynamic-router-example.Person","obj88744","G__88745","G__88746","obj88748","book.dynamic-router-example/Person","modified?","id","name","city","state","p__88724","map__88725","p__88727","map__88728","js/alert","cljs.core/not","p__88730","map__88731","js/parseInt","com.fulcrologic.fulcro.routing.dynamic-routing/route-deferred","G__88737","G__88738","G__88739","G__88740","com.fulcrologic.fulcro.data-fetch/load","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.mutations/toggle!","cljs.core/boolean","book.dynamic-router-example/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","js/book.dynamic-router-example.Main","obj88750","G__88751","G__88752","obj88754","book.dynamic-router-example/Main","map__88756","current-route","current-state","com.fulcrologic.fulcro.ui-state-machines/get-active-state","state-map","com.fulcrologic.fulcro.components/component->state-map","sm-env","com.fulcrologic.fulcro.ui_state_machines.state_machine_env.cljs$core$IFn$_invoke$arity$5","pending-path-segment","com.fulcrologic.fulcro.ui_state_machines.retrieve.cljs$core$IFn$_invoke$arity$2","class","com.fulcrologic.fulcro.routing.dynamic-routing/current-route-class","fexpr__88758","factory","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","G__88759","com.fulcrologic.fulcro.components/computed","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","map__88760","p__88763","map__88764","this__88448__auto__","com.fulcrologic.fulcro.routing.dynamic-routing/validate-route-targets","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","js/book.dynamic-router-example.TopRouter","obj88767","G__88768","G__88769","obj88771","book.dynamic-router-example/TopRouter","G__88762","cljs.core/Keyword","book.dynamic-router-example/ui-top-router","map__88772","js/book.dynamic-router-example.Root","obj88775","G__88776","G__88777","obj88781","book.dynamic-router-example/Root","router","com.fulcrologic.fulcro.routing.dynamic_routing.change_route.cljs$core$IFn$_invoke$arity$2","book.dynamic-router-example/client-did-mount"],"sourcesContent":["(ns book.dynamic-router-example\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.routing.dynamic-routing :as dr :refer [defrouter]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [taoensso.timbre :as log]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.mutations :as m]))\n\n(defsc Settings [this props]\n  {:ident         (fn [] [:component/id ::settings])\n   :query         [:settings]\n   :initial-state {:settings \"stuff\"}\n   :route-segment [\"settings\"]\n   :will-enter    (fn [app route-params]\n                    (log/info \"Will enter settings with route params \" route-params)\n                    (dr/route-immediate [:component/id ::settings]))\n   :will-leave    (fn [this props]\n                    (js/console.log (comp/get-ident this) \"props\" props)\n                    true)}\n  (dom/div \"Settings\"))\n\n(defsc Person [this {:ui/keys      [modified?]\n                     :person/keys  [id name]\n                     :address/keys [city state]\n                     :as           props}]\n  {:query           [:ui/modified? :person/id :person/name :address/city :address/state]\n   :ident           :person/id\n   :route-segment   [\"person\" :person/id]\n   :route-cancelled (fn [{:person/keys [id]}]\n                      (log/info \"Routing cancelled to user \" id))\n   :will-leave      (fn [this {:ui/keys [modified?]}]\n                      (when modified?\n                        (js/alert \"You cannot navigate until the user is not modified!\"))\n                      (not modified?))\n   :will-enter      (fn [app {:person/keys [id] :as route-params}]\n                      (log/info \"Will enter user with route params \" route-params)\n                      ;; be sure to convert strings to int for this case\n                      (let [id (if (string? id) (js/parseInt id) id)]\n                        (dr/route-deferred [:person/id id]\n                          #(df/load app [:person/id id] Person\n                             {:post-mutation `dr/target-ready\n                              :post-mutation-params\n                                             {:target [:person/id id]}}))))}\n  (dom/div\n    (dom/h3 (str \"Person \" id))\n    (dom/div (str name \" from \" city \", \" state))\n    (dom/div\n      (dom/input {:type     \"checkbox\"\n                  :onChange (fn []\n                              (m/toggle! this :ui/modified?))\n                  :checked  (boolean modified?)})\n      \"Modified (prevent routing)\")))\n\n(def ui-person (comp/factory Person {:keyfn :person/id}))\n\n(defsc Main [this props]\n  {:ident         (fn [] [:component/id ::main])\n   :query         [:main]\n   :initial-state {:main \"stuff\"}\n   :route-segment [\"main\"]\n   :will-enter    (fn [app route-params]\n                    (log/info \"Will enter main\" route-params)\n                    (dr/route-immediate [:component/id ::main]))\n   :will-leave    (fn [this props]\n                    (log/info (comp/get-ident this) \"props\" props)\n                    true)}\n  (dom/div \"Main\"))\n\n(defrouter TopRouter [this {:keys [current-state pending-path-segment]}]\n  {:router-targets [Main Settings Person]}\n  (case current-state\n    :pending (dom/div \"Loading...\")\n    :failed (dom/div \"Loading seems to have failed. Try another route.\")\n    (dom/div \"Unknown route\")))\n\n(def ui-top-router (comp/factory TopRouter))\n\n(defsc Root [this {:root/keys [router]}]\n  {:query         [{:root/router (comp/get-query TopRouter)}]\n   :initial-state {:root/router {}}}\n  (dom/div\n    (dom/button {:onClick #(dr/change-route this [\"main\"])} \"Go to main\")\n    (dom/button {:onClick #(dr/change-route this [\"settings\"])} \"Go to settings\")\n    (dom/button {:onClick #(dr/change-route this [\"person\" \"1\"])} \"Go to person 1\")\n    (dom/button {:onClick #(dr/change-route this [\"person\" \"2\"])} \"Go to person 2\")\n    (ui-top-router router)))\n\n(defn client-did-mount\n  \"Must be used as :client-did-mount parameter of app creation, or called just after you mount the app.\"\n  [app]\n  (dr/change-route app [\"main\"]))\n\n\n"]}