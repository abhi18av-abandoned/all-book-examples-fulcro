{
"version":3,
"file":"module$node_modules$victory_core$lib$victory_util$textsize.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/victory-core/lib/victory-util/textsize.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$victory_core$lib$victory_util$textsize\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _defaults2 = _interopRequireDefault(require(\"lodash/defaults\"));\n\nvar _assign2 = _interopRequireDefault(require(\"lodash/assign\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar fontDictionary = {\n  \"American Typewriter\": 2.09,\n  Baskerville: 2.51,\n  Georgia: 2.27,\n  \"Hoefler Text\": 2.39,\n  Palatino: 2.26,\n  \"Times New Roman\": 2.48,\n  Arial: 2.26,\n  \"Gill Sans\": 2.47,\n  \"Gill Sans 300\": 2.58,\n  \"Helvetica Neue\": 2.24,\n  \"Lucida Grande\": 2.05,\n  Tahoma: 2.25,\n  \"Trebuchet MS\": 2.2,\n  Verdana: 1.96,\n  \"Courier New\": 1.67,\n  cursive: 1.84,\n  fantasy: 2.09,\n  monospace: 1.81,\n  serif: 2.04,\n  \"sans-serif\": 1.89\n}; //https://developer.mozilla.org/en/docs/Web/CSS/length\n// Absolute sizes in pixels for obsolete measurement units.\n\nvar absoluteMeasurementUnitsToPixels = {\n  mm: 3.8,\n  sm: 38,\n  pt: 1.33,\n  pc: 16,\n  in: 96,\n  px: 1\n};\nvar relativeMeasurementUnitsCoef = {\n  em: 1,\n  ex: 0.5\n};\nvar coefficients = {\n  averageFontConstant: 2.1675,\n  // Average pixels per glyph in existing font.\n  widthOverlapCoef: 1.25,\n  // Coefficient for width value to prevent overlap.\n  heightOverlapCoef: 1.05,\n  // Coefficient for height value to prevent overlap.\n  lineCapitalCoef: 1.15,\n  // Coefficient for height value. Reserve space for capital chars.\n  lineSpaceHeightCoef: 0.2 // Coefficient for height value. Reserve space between lines.\n\n};\nvar defaultStyle = {\n  lineHeight: 1,\n  letterSpacing: \"0px\",\n  fontSize: 0,\n  angle: 0,\n  fontFamily: \"\"\n};\n\nvar _degreeToRadian = function (angle) {\n  return angle * Math.PI / 180;\n};\n\nvar _getFontCharacterConstant = function (fontFamily) {\n  var firstFont = fontFamily.split(\",\")[0].replace(/'|\"/g, \"\");\n  return fontDictionary[firstFont] || coefficients.averageFontConstant;\n};\n\nvar _splitToLines = function (text) {\n  return Array.isArray(text) ? text : text.toString().split(/\\r\\n|\\r|\\n/g);\n};\n\nvar _getSizeWithRotate = function (axisSize, dependentSize, angle) {\n  var angleInRadian = _degreeToRadian(angle);\n\n  return Math.abs(Math.cos(angleInRadian) * axisSize) + Math.abs(Math.sin(angleInRadian) * dependentSize);\n};\n/**\n * Convert length-type parameters from specific measurement units to pixels\n * @param  {string} length Css length string value.\n * @param  {number} fontSize Current text font-size.\n * @returns {number} Approximate Css length in pixels.\n */\n\n\nvar convertLengthToPixels = function (length, fontSize) {\n  var attribute = length.match(/[a-zA-Z%]+/)[0];\n  var value = length.match(/[0-9.,]+/);\n  var result;\n\n  if (absoluteMeasurementUnitsToPixels.hasOwnProperty(attribute)) {\n    result = value * absoluteMeasurementUnitsToPixels[attribute];\n  } else if (relativeMeasurementUnitsCoef.hasOwnProperty(attribute)) {\n    result = (fontSize ? value * fontSize : value * defaultStyle.fontSize) * relativeMeasurementUnitsCoef[attribute];\n  } else {\n    result = value;\n  }\n\n  return result;\n};\n\nvar _prepareParams = function (inputStyle, index) {\n  var lineStyle = Array.isArray(inputStyle) ? inputStyle[index] : inputStyle;\n  var style = (0, _defaults2.default)({}, lineStyle, defaultStyle);\n  return (0, _assign2.default)({}, style, {\n    characterConstant: style.characterConstant || _getFontCharacterConstant(style.fontFamily),\n    letterSpacing: convertLengthToPixels(style.letterSpacing, style.fontSize),\n    fontSize: typeof style.fontSize === \"number\" ? style.fontSize : convertLengthToPixels(String(style.fontSize))\n  });\n};\n\nvar _approximateTextWidthInternal = function (text, style) {\n  if (!text) {\n    return 0;\n  }\n\n  var widths = _splitToLines(text).map(function (line, index) {\n    var len = line.toString().length;\n\n    var _prepareParams2 = _prepareParams(style, index),\n        fontSize = _prepareParams2.fontSize,\n        characterConstant = _prepareParams2.characterConstant,\n        letterSpacing = _prepareParams2.letterSpacing;\n\n    return len * fontSize / characterConstant + letterSpacing * Math.max(len - 1, 0);\n  });\n\n  return Math.max.apply(Math, _toConsumableArray(widths));\n};\n\nvar _approximateTextHeightInternal = function (text, style) {\n  if (!text) {\n    return 0;\n  }\n\n  return _splitToLines(text).reduce(function (total, line, index) {\n    var lineStyle = _prepareParams(style, index);\n\n    var containsCaps = line.toString().match(/[(A-Z)(0-9)]/);\n    var height = containsCaps ? lineStyle.fontSize * coefficients.lineCapitalCoef : lineStyle.fontSize;\n    var emptySpace = index === 0 ? 0 : lineStyle.fontSize * coefficients.lineSpaceHeightCoef;\n    return total + lineStyle.lineHeight * (height + emptySpace);\n  }, 0);\n};\n/**\n * Predict text size by font params.\n * @param {string} text Content for width calculation.\n * @param {Object} style Text styles, ,fontFamily, fontSize, etc.\n * @param {string} style.fontFamily Text fontFamily.\n * @param {(number|string)} style.fontSize Text fontSize.\n * @param {number} style.angle Text rotate angle.\n * @param {string} style.letterSpacing Text letterSpacing(space between letters).\n * @param {number} style.characterConstant Average pixels per glyph.\n * @param {number} style.lineHeight Line height coefficient.\n * @returns {number} Approximate text label height.\n */\n\n\nvar approximateTextSize = function (text, style) {\n  var angle = Array.isArray(style) ? style[0] && style[0].angle : style && style.angle;\n\n  var height = _approximateTextHeightInternal(text, style);\n\n  var width = _approximateTextWidthInternal(text, style);\n\n  var widthWithRotate = angle ? _getSizeWithRotate(width, height, angle) : width;\n  var heightWithRotate = angle ? _getSizeWithRotate(height, width, angle) : height;\n  return {\n    width: widthWithRotate * coefficients.widthOverlapCoef,\n    height: heightWithRotate * coefficients.heightOverlapCoef\n  };\n};\n\nvar _default = {\n  approximateTextSize: approximateTextSize,\n  convertLengthToPixels: convertLengthToPixels\n};\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","Symbol","iterator","Object","iter","prototype","toString","call","from","TypeError","defineProperty","value","_defaults2","_assign2","fontDictionary","Baskerville","Georgia","Palatino","Arial","Tahoma","Verdana","cursive","fantasy","monospace","serif","absoluteMeasurementUnitsToPixels","mm","sm","pt","pc","in","px","relativeMeasurementUnitsCoef","em","ex","defaultStyle","lineHeight","letterSpacing","fontSize","angle","fontFamily","_splitToLines","text","split","_getSizeWithRotate","axisSize","dependentSize","angleInRadian","Math","PI","abs","cos","sin","convertLengthToPixels","attribute","match","hasOwnProperty","result","_prepareParams","inputStyle","index","lineStyle","style","characterConstant","firstFont","replace","averageFontConstant","String","_approximateTextWidthInternal","widths","map","line","len","_prepareParams2","max","apply","_approximateTextHeightInternal","reduce","total","height","containsCaps","lineCapitalCoef","emptySpace","lineSpaceHeightCoef","_default","approximateTextSize","width","widthWithRotate","heightWithRotate","widthOverlapCoef","heightOverlapCoef"]
}
