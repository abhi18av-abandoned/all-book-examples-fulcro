{"version":3,"sources":["book/queries/recursive_demo_1.cljs"],"mappings":"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","names":["book.queries.recursive-demo-1/make-person","id","name","children","G__85732","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__85735","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/book","js/book.queries","js/book.queries.recursive-demo-1","js/book.queries.recursive-demo-1.Person","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85738","G__85739","G__85740","goog.object/get","obj85742","com.fulcrologic.fulcro.components/configure-component!","book.queries.recursive-demo-1/Person","p","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","cljs.core/seq","cljs.core.map.cljs$core$IFn$_invoke$arity$2","book.queries.recursive-demo-1/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","map__85783","js/book.queries.recursive-demo-1.Root","obj85786","G__85791","G__85792","obj85794","book.queries.recursive-demo-1/Root","person-of-interest","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.queries.recursive-demo-1\n  (:require [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n            [com.fulcrologic.fulcro.dom :as dom]))\n\n(defn make-person\n  \"Make a person data map with optional children.\"\n  [id name children]\n  (cond-> {:db/id id :person/name name}\n    children (assoc :person/children children)))\n\n(declare ui-person)\n\n; The ... in the query means there will be children of the same type, of arbitrary depth\n; it is equivalent to (comp/get-query Person), but calling get query on yourself would\n; lead to infinite compiler recursion.\n(defsc Person [this {:keys [:person/name :person/children]}]\n  {:query         (fn [] [:db/id :person/name {:person/children '...}])\n   :initial-state (fn [p]\n                    (make-person 1 \"Joe\"\n                      [(make-person 2 \"Suzy\" [])\n                       (make-person 3 \"Billy\" [])\n                       (make-person 4 \"Rae\"\n                         [(make-person 5 \"Ian\"\n                            [(make-person 6 \"Zoe\" [])])])]))\n   :ident         [:person/id :db/id]}\n  (dom/div\n    (dom/h4 name)\n    (when (seq children)\n      (dom/div\n        (dom/ul\n          (map (fn [p]\n                 (ui-person p))\n            children))))))\n\n(def ui-person (comp/factory Person {:keyfn :db/id}))\n\n(defsc Root [this {:keys [person-of-interest]}]\n  {:initial-state {:person-of-interest {}}\n   :query         [{:person-of-interest (comp/get-query Person)}]}\n  (dom/div\n    (ui-person person-of-interest)))\n"]}