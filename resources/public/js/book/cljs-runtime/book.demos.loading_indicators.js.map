{"version":3,"sources":["book/demos/loading_indicators.cljs"],"mappings":";;;;;AAUA,AAAA,AAEA,AAAA,AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAayB;AAAb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEsCI;AAFtC,AAAA,AAAA5B,AAAawB;AAAb,AAAA,AAAAvB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAgD0B;AAAhD,AAAAtB,AAAAJ,AAAA,AAA0BwB;AAA1B,AAAApB,AAAAJ,AAAA,AAAgCyB;AAAhC,AAAA,AAAA,AAGyCD;AAHzC,AAAA,AAAaD;AAAb,AAAA,AAAAlB,AAAA,AAAakB;AAAb,AAAA,AAAAjB,AAAA,AAAAC,AAAagB;AAAbjB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAAA,AAAgDoB;AAAhD,AAAAtB,AAAAE,AAAA,AAA0BkB;AAA1B,AAAApB,AAAAE,AAAA,AAAgCmB;AAAhC,AAIE,AAAMG,AAAU,AAAA,AAACC,AAAsB,AAAKL;AACtCM,AAAU,AAAA,AAACC,AAAOL,AAAOC,AAAgBC;AAD/C,AAEE,AAAAI,AAAA,AAAA,AAAA,AAAAC,AAASR,AAGP,AAAI,AAACS,AAAYJ,AACf,AAAAK,AAAA,AAAA,AAAA,AAAA,AAIA,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAAuB,AAAA,AAAA,AAACI,AAAYb,AAAcK;;AARtD,AAQI,AAAA;;;AAdR,AAAA,AAAA,AAAApB,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAOW;AAAPV;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAN,AAAA;AAAA,AAAA,AAAAgB;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAC,AAAAJ;AAAAK,AAAA,AAAAC,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAAH,AAAA,AAAAO,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAC,AAAA,AAAAvB,AAAOwB;AAgBP,AAAKe,AAAQ,AAAA,AAAA,AAAA,AAACC,AAAahB;AAE3B,AAAA,AAAA;AAAA,AAAAxB,AAAA,AAAA,AAAA,AAAcyB;AAAd,AAAA,AAAA,AAAA,AAAA,AACgC,AAAC0B,AAAe3B;AADhD,AAAA,AAAAiB,AAAchB;AAAd,AAAA,AAAAiB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvC,AAAA,AAAAuC,AAAA,AAAA,AAAA,AAAA,AAAAtC,AAAAC,AAAAqC,AAAAA;AAAAA,AAAkDd;AAAlD,AAAAtB,AAAAoC,AAAA,AAA2Bf;AAA3B,AAAArB,AAAAoC,AAAA,AAAuCQ;AAAvC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAczB;AAAd,AAAA,AAAAlB,AAAA,AAAckB;AAAd,AAAA,AAAAkB,AAAA,AAAAlC,AAAcgB;AAAdkB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxC,AAAA,AAAAwC,AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAAC,AAAAsC,AAAAA;AAAAA,AAAkDf;AAAlD,AAAAtB,AAAAqC,AAAA,AAA2BhB;AAA3B,AAAArB,AAAAqC,AAAA,AAAuCO;AAAvC,AAGE,AAAME,AAAY;AAAKF;AAAL,AAAY,AAACG,AAAId,AAAQW;;;AAA3C,AACE,AAAAhB,AAAA,AAAA,AAAA,AAAAC,AACE,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF,AAAuBR,AACvB,AAAI,AAAC2B,AAAIJ,AACP,AAACG,AAAId,AAAQW,AACb,AAAAhB,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAAuB,AAAA,AAAA,AAAA,AAAA,AAACqB,AAAe9B;;AAJ3C,AAII,AAAA;;;AARR,AAAA,AAAA,AAAAf,AAAAC,AAAAC,AAAAgC;AAAA;AAAA,AAAA,AAAA,AAAOK;AAAPnC;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAN,AAAA;AAAA,AAAA,AAAAgB;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA8B,AAAA,AAAA,AAAA,AAAAC,AAAA/B;AAAAgC,AAAA,AAAA1B,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAA6B,AAAAC,AAAA9B,AAAA6B,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAA9B,AAAA,AAAAiC,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAzB,AAAA,AAAAvB,AAAOiD;AAUP,AAAKO,AAAS,AAAA,AAAA,AAAA,AAAChB,AAAaS;AAE5B,AAAA,AAAA;AAAA,AAAAjD,AAAA,AAAA,AAAA,AACuBoE;AADvB,AAAA,AAAA,AAAA;AAAA,AAAA,AAAc3C;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEiDI,AAA4B,AAACsB,AAAeF;AAF7F,AAAA,AAAAQ,AAAchC;AAAd,AAAA,AAAAiC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvD,AAAA,AAAAuD,AAAA,AAAA,AAAA,AAAA,AAAAtD,AAAAC,AAAAqD,AAAAA;AAAAA,AAAsD9B;AAAtD,AAAAtB,AAAAoD,AAAA,AAA2BQ;AAA3B,AAAA5D,AAAAoD,AAAA,AAA2CS;AAA3C,AAAA,AAAA,AAAA;AAAA,AAAA,AAAc1C;AAAd,AAAA,AAAAlB,AAAA,AAAckB;AAAd,AAAA,AAAAkC,AAAA,AAAAlD,AAAcgB;AAAdkC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxD,AAAA,AAAAwD,AAAA,AAAA,AAAA,AAAA,AAAAvD,AAAAC,AAAAsD,AAAAA;AAAAA,AAAsD/B;AAAtD,AAAAtB,AAAAqD,AAAA,AAA2BO;AAA3B,AAAA5D,AAAAqD,AAAA,AAA2CQ;AAA3C,AAIE,AAAME,AAAQ,AAAC/D,AAAIsB,AAAMC;AACnBG,AAAQ,AAAA,AAAC1B,AAAI+D;AADnB,AAEE,AAAAnC,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAA,AACE,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0C,AAAA,AAAA,AAAIgC,AAC9C,AAAA7B,AAAA,AAAA,AAAA,AAAA,AACA,AAAIL,AACF,AAAAK,AAAA,AAAA,AAAA,AAAA,AACA,AAAI8B,AACF,AAACX,AAAAA,AAAAA,AAASW,AAAAA,AACV,AAAAjC,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AAAuB,AAAA,AAAA,AAAA,AAAA,AAACqB,AAAe9B;;AAP7C,AAOM,AAAA;;;AAbV,AAAA,AAAA,AAAAf,AAAAC,AAAAC,AAAAgD;AAAA;AAAA,AAAA,AAAA,AAAOK;AAAPnD;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAN,AAAA;AAAA,AAAA,AAAAgB;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAAC,AAAA/C;AAAAgD,AAAA,AAAA1C,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAA6C,AAAAC,AAAA9C,AAAA6C,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAA9C,AAAA,AAAAiD,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAzC,AAAA,AAAAvB,AAAOiE;AAeP,AAAKK,AAAS,AAACC,AAAaN;AAI5B,AAAA,AAAA;AAAA,AAAAjE,AAAA,AAAA,AAAA,AACuBoE;AADvB,AAAA,AAAA,AACuC,AAAA,AAACY,AAAuBf;AAD/D,AAAA,AAAaxC;AAAb,AAAA,AAAA,AAAA,AAE2B,AAAC0B,AAAec;AAF3C,AAAA,AAAaxC;AAAb,AAAA,AAAAlB,AAAA,AAAakB;AAAb,AAAA,AAAA+C,AAAA,AAAA/D,AAAagB;AAAb+C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArE,AAAA,AAAAqE,AAAA,AAAA,AAAA,AAAA,AAAApE,AAAAC,AAAAmE,AAAAA;AAAAA,AAAqC5C;AAArC,AAAAtB,AAAAkE,AAAA,AAA0BO;AAA1B,AAGE,AAAA7C,AAAA,AAAA,AAAA,AAAS,AAACoC,AAAAA,AAAAA,AAASS,AAAAA;;;AAHrB,AAAA,AAAA,AAAArE,AAAAC,AAAAC,AAAA6D;AAAA;AAAA,AAAA,AAAA,AAAOK;AAAPhE;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAN,AAAA;AAAA,AAAA,AAAAgB;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA2D,AAAA,AAAA,AAAA,AAAAC,AAAA5D;AAAA6D,AAAA,AAAAvD,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAA0D,AAAAC,AAAA3D,AAAA0D,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAA3D,AAAA,AAAA8D,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAtD,AAAA,AAAAvB,AAAO8E","names":["options__72617__auto__","p__89344","map__89345","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/wrapped-render","map__89348","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.loading-indicators","js/book.demos.loading-indicators.Item","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89371","G__89372","G__89373","goog.object/get","obj89375","com.fulcrologic.fulcro.components/configure-component!","book.demos.loading-indicators/Item","this","id","label","props","com.fulcrologic.fulcro.data-fetch/marker-table","marker-id","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","marker","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.data-fetch/loading?","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.data_fetch.refresh_BANG_.cljs$core$IFn$_invoke$arity$2","book.demos.loading-indicators/ui-item","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","p__89377","map__89378","map__89383","js/book.demos.loading-indicators.Child","obj89387","G__89388","G__89389","obj89391","book.demos.loading-indicators/Child","items","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","render-list","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","com.fulcrologic.fulcro.data-fetch/load-field!","book.demos.loading-indicators/ui-child","p__89394","map__89395","map__89401","js/book.demos.loading-indicators.Panel","obj89407","G__89408","G__89409","obj89412","book.demos.loading-indicators/Panel","loading-data","child","params","markers","book.demos.loading-indicators/ui-panel","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__89413","js/book.demos.loading-indicators.Root","obj89416","G__89417","G__89418","obj89420","book.demos.loading-indicators/Root","panel","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.demos.loading-indicators\n  (:require\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]] ))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(declare Item)\n\n(defsc Item [this {:keys [db/id item/label] :as props}]\n  ; query for the entire load marker table. use the lambda form of query for link queries\n  {:query (fn [] [:db/id :item/label [df/marker-table '_]])\n   :ident (fn [] [:lazy-load.items/by-id id])}\n  (let [marker-id (keyword \"item-marker\" (str id))\n        marker    (get-in props [df/marker-table marker-id])]\n    (dom/div label\n      ; If an item is rendered, and the fetch state is present, you can use helper functions from df namespace\n      ; to provide augmented rendering.\n      (if (df/loading? marker)\n        (dom/span \" (reloading...)\")\n        ; the `refresh!` function is a helper that can send an ident-based join query for a component.\n        ; it is equivalent to `(load reconciler [:lazy-load.items/by-id id] Item)`, but finds the params\n        ; using the component itself.\n        (dom/button {:onClick #(df/refresh! this {:marker marker-id})} \"Refresh\")))))\n\n(def ui-item (comp/factory Item {:keyfn :db/id}))\n\n(defsc Child [this {:keys [child/label items] :as props}]\n  {:query [:child/label {:items (comp/get-query Item)}]\n   :ident (fn [] [:lazy-load/ui :child])}\n  (let [render-list (fn [items] (map ui-item items))]\n    (dom/div\n      (dom/p \"Child Label: \" label)\n      (if (seq items)\n        (map ui-item items)\n        (dom/button {:onClick #(df/load-field! this :items {:marker :child-marker})} \"Load Items\")))))\n\n(def ui-child (comp/factory Child {:keyfn :child/label}))\n\n(defsc Panel [this {:keys [ui/loading-data child] :as props}]\n  {:initial-state (fn [params] {:child nil})\n   :query         (fn [] [[:ui/loading-data '_] [df/marker-table '_] {:child (comp/get-query Child)}]) ; link querys require lambda\n   :ident         (fn [] [:lazy-load/ui :panel])}\n  (let [markers (get props df/marker-table)\n        marker  (get markers :child-marker)]\n    (dom/div\n      (dom/div {:style {:float \"right\" :display (if loading-data \"block\" \"none\")}} \"GLOBAL LOADING\")\n      (dom/div \"This is the Panel\")\n      (if marker\n        (dom/h4 \"Loading child...\")\n        (if child\n          (ui-child child)\n          (dom/button {:onClick #(df/load-field! this :child {:marker :child-marker})} \"Load Child\"))))))\n\n(def ui-panel (comp/factory Panel))\n\n; Note: Kinda hard to do idents/lazy loading right on root...so generally just have root render simple layout\n; and then render a child that has the rest.\n(defsc Root [this {:keys [panel] :as props}]\n  {:initial-state (fn [params] {:panel (comp/get-initial-state Panel nil)})\n   :query         [{:panel (comp/get-query Panel)}]}\n  (dom/div (ui-panel panel)))\n\n\n"]}