{"version":3,"sources":["book/database.cljs"],"mappings":"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","names":["book.database/schema","js/book","js/book.database","js/book.database.connection","book.database/connection","datascript.core.create_conn.cljs$core$IFn$_invoke$arity$1","book.database/db","connection","cljs.core/deref","book.database/seed-database","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.connect/resolver","p__68651","p__68652","map__68654","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__68655","book.database/person-resolver","id","G__68660","G__68661","G__68662","datascript.core/pull","p__68665","map__68666","book.database/all-people-resolver","_","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","G__68668","G__68669","datascript.core/q","p__68672","p__68673","map__68674","map__68675","book.database/address-resolver","parent-query","env","G__68679","G__68680","G__68681","p__68682","p__68683","map__68684","map__68685","book.database/phone-resolver","G__68690","G__68691","G__68692","p__68697","p__68698","map__68699","map__68700","book.database/default-address-resolver","address-id","G__68704","G__68705","G__68706","book.database/time-resolver","cljs.core/inst-ms","js/Date","book.database/general-resolvers"],"sourcesContent":["(ns book.database\n  (:require\n    [cljs.spec.alpha :as s]\n    [datascript.core :as d]\n    [com.wsscode.pathom.connect :as pc]\n    [com.wsscode.pathom.core :as p]\n    [cljs.core.async :as async]\n    clojure.pprint\n    [taoensso.timbre :as log]))\n\n(def schema {:person/id            {:db/unique :db.unique/identity}\n             :person/spouse        {:db/cardinality :db.cardinality/one}\n             :person/children      {:db/cardinality :db.cardinality/many}\n             :person/addresses     {:db/cardinality :db.cardinality/many}\n             :person/phone-numbers {:db/cardinality :db.cardinality/many}})\n\n(defonce connection (d/create-conn schema))\n\n(defn db [connection] (deref connection))\n\n(defn seed-database []\n  (d/transact! connection [{:db/id                1\n                            :person/id            1\n                            :person/age           45\n                            :person/name          \"Sally\"\n                            :person/spouse        2\n                            :person/addresses     #{100}\n                            :person/phone-numbers #{10 11}\n                            :person/children      #{4 3}}\n\n                           {:db/id        10\n                            :phone/id     10\n                            :phone/number \"812-555-1212\"\n                            :phone/type   :work}\n\n                           {:db/id        11\n                            :phone/id     11\n                            :phone/number \"502-555-1212\"\n                            :phone/type   :home}\n\n                           {:db/id        12\n                            :phone/id     12\n                            :phone/number \"503-555-1212\"\n                            :phone/type   :work}\n\n                           {:db/id                2\n                            :person/id            2\n                            :person/name          \"Tom\"\n                            :person/age           48\n                            :person/phone-numbers #{11 12}\n                            :person/addresses     #{100}\n                            :person/spouse        1\n                            :person/children      #{3 4}}\n\n                           {:db/id            3\n                            :person/id        3\n                            :person/age       17\n                            :person/addresses #{100}\n                            :person/name      \"Amy\"}\n\n                           {:db/id            4\n                            :person/id        4\n                            :person/age       25\n                            :person/addresses #{100}\n                            :person/name      \"Billy\"\n                            :person/children  #{5}}\n\n                           {:db/id            5\n                            :person/addresses #{100}\n                            :person/id        5\n                            :person/age       1\n                            :person/name      \"Billy Jr.\"}\n\n                           {:db/id               100\n                            :address/id          100\n                            :address/street      \"101 Main St\"\n                            :address/city        \"Nowhere\"\n                            :address/state       \"GA\"\n                            :address/postal-code \"99999\"}]))\n\n(pc/defresolver person-resolver [{:keys [connection]} {:person/keys [id]}]\n  {::pc/input  #{:person/id}\n   ::pc/output [:person/name\n                :person/age\n                {:person/addresses [:address/id]}\n                {:person/phone-numbers [:phone/id]}\n                {:person/spouse [:person/id]}\n                {:person/children [:person/id]}]}\n  (d/pull (db connection)\n    [:person/name\n     :person/age\n     {:person/addresses [:address/id]}\n     {:person/phone-numbers [:phone/id]}\n     {:person/spouse [:person/id]}\n     {:person/children [:person/id]}]\n    id))\n\n(pc/defresolver all-people-resolver [{:keys [connection]} _]\n  {::pc/output [{:all-people [:person/id]}]}\n  {:all-people (mapv\n                 (fn [id] {:person/id id})\n                 (d/q '[:find [?e ...]\n                        :where\n                        [?e :person/id]]\n                   (db connection)))})\n\n(pc/defresolver address-resolver [{::p/keys [parent-query]\n                                   :keys    [connection] :as env} {:address/keys [id]}]\n  {::pc/input  #{:address/id}\n   ::pc/output [:address/street :address/state :address/city :address/postal-code]}\n  (d/pull (db connection) parent-query id))\n\n(pc/defresolver phone-resolver [{::p/keys [parent-query]\n                                 :keys    [connection] :as env} {:phone/keys [id]}]\n  {::pc/input  #{:phone/id}\n   ::pc/output [:phone/number :phone/type]}\n  (d/pull (db connection) parent-query id))\n\n;; Allow a person ID to resolve to (any) one of their addresses\n(pc/defresolver default-address-resolver [{:keys [connection]} {:person/keys [id]}]\n  {::pc/input  #{:person/id}\n   ::pc/output [:address/id]}\n  (let [address-id (d/q '[:find ?a .\n                          :in $ ?pid\n                          :where\n                          [?pid :person/addresses ?addr]\n                          [?addr :address/id ?a]]\n                     (db connection) id)]\n    (when address-id\n      {:address/id address-id})))\n\n;; Resolve :server/time-ms anywhere in a query. Allows us to timestamp a result.\n(pc/defresolver time-resolver [_ _]\n  {::pc/output [:server/time-ms]}\n  {:server/time-ms (inst-ms (js/Date.))})\n\n(def general-resolvers [phone-resolver address-resolver person-resolver\n                        default-address-resolver\n                        all-people-resolver time-resolver])\n\n"]}