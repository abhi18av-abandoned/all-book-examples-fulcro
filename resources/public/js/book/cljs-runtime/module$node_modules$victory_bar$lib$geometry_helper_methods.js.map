{
"version":3,
"file":"module$node_modules$victory_bar$lib$geometry_helper_methods.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/victory-bar/lib/geometry-helper-methods.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$victory_bar$lib$geometry_helper_methods\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.point = exports.circle = void 0;\n\n/**\n * A point in the 2d plane\n * @param {number} x - x coordinate\n * @param {number} y - y coordinate\n * @returns {object} - point object\n */\nvar point = function (x, y) {\n  return {\n    x: x,\n    y: y,\n    distance: function (p1) {\n      return Math.sqrt(Math.pow(this.x - p1.x, 2) + Math.pow(this.y - p1.y, 2));\n    },\n    // vector addition in 2d plane\n    add: function (p1) {\n      return point(this.x + p1.x, this.y + p1.y);\n    },\n    // vector subtraction in 2d\n    // returns p0 - p1\n    subtract: function (p1) {\n      return point(this.x - p1.x, this.y - p1.y);\n    },\n    // multiply a 2d point by a scalar\n    scalarMult: function (n) {\n      return point(this.x * n, this.y * n);\n    },\n    scalarDivide: function (n) {\n      if (n === 0) {\n        throw new Error(\"Division by 0 error\");\n      }\n\n      return point(this.x / n, this.y / n);\n    },\n    equals: function (p1) {\n      return this.x === p1.x && this.y === p1.y;\n    }\n  };\n};\n/**\n * A circle in the 2d plane\n * @param {point} center - center of circle\n * @param {number} radius - radius of circle\n * @returns {object} - point object\n */\n\n\nexports.point = point;\n\nvar circle = function (center, radius) {\n  return {\n    center: center,\n    radius: radius,\n    hasIntersection: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (d > r0 + r1) {\n        return false; // separate circles\n      }\n\n      if (d < Math.abs(r0 - r1)) {\n        return false; // one circle contains another\n      }\n\n      return true;\n    },\n    equals: function (circle1) {\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      return r0 === r1 && P0.equals(P1);\n    },\n    // Source: http://paulbourke.net/geometry/circlesphere/\n    // \"Intersection of two circles\" by Paul Bourke\n    // Left-most point is returned as 0th element of array\n    // Right-most point is returned as 1st elemennt of array\n    intersection: function (circle1) {\n      // eslint-disable-line max-statements\n      var P0 = this.center;\n      var P1 = circle1.center;\n      var r0 = this.radius;\n      var r1 = circle1.radius;\n      var d = P0.distance(P1);\n\n      if (!this.hasIntersection(circle1) || this.equals(circle1)) {\n        return [];\n      }\n\n      var a = (Math.pow(r0, 2) - Math.pow(r1, 2) + Math.pow(d, 2)) / (2 * d);\n      var h = Math.sqrt(Math.pow(r0, 2) - Math.pow(a, 2));\n      var P2 = P0.add(P1.subtract(P0).scalarMult(a).scalarDivide(d));\n      var x0 = P0.x,\n          y0 = P0.y;\n      var x1 = P1.x,\n          y1 = P1.y;\n      var x2 = P2.x,\n          y2 = P2.y;\n      var P3s = [point(x2 - h * (y1 - y0) / d, y2 + h * (x1 - x0) / d), point(x2 + h * (y1 - y0) / d, y2 - h * (x1 - x0) / d)];\n      P3s.sort(function (Point1, Point2) {\n        return Point1.x - Point2.x;\n      });\n      return P3s;\n    },\n    solveX: function (y) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(y - this.center.y, 2));\n      return [this.center.x - sqrt, this.center.x + sqrt];\n    },\n    solveY: function (x) {\n      var sqrt = Math.sqrt(Math.pow(this.radius, 2) - Math.pow(x - this.center.x, 2));\n      return [this.center.y - sqrt, this.center.y + sqrt];\n    }\n  };\n};\n\nexports.circle = circle;\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","point","circle","x","y","distance","p1","Math","sqrt","pow","add","subtract","scalarMult","n","scalarDivide","Error","equals","center","radius","hasIntersection","circle1","r0","r1","d","abs","P0","P1","intersection","a","h","P2","x0","y0","x1","y1","x2","y2","P3s","sort","Point1","Point2","solveX","solveY"]
}
