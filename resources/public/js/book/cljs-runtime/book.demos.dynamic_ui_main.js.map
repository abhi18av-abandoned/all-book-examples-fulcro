{"version":3,"sources":["book/demos/dynamic_ui_main.cljs"],"mappings":";;;;;;;AAWA,AAAA,AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAayB;AAAb,AAAA,AAAA,AAAA,AACmBG;AADnB,AAAA,AAEuBC;AAFvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgCD;AAFhC,AAAA,AAAA3B,AAAawB;AAAb,AAAA,AAAAvB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAA0BwB;AAA1B,AAAApB,AAAAJ,AAAA,AAAgCyB;AAAhC,AAAA,AAAA,AAAA;AAAA,AAAA,AAAaF;AAAb,AAAA,AAAAlB,AAAA,AAAakB;AAAb,AAAA,AAAAjB,AAAA,AAAAC,AAAagB;AAAbjB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAA,AAAAF,AAAAE,AAAA,AAA0BkB;AAA1B,AAAApB,AAAAE,AAAA,AAAgCmB;AAAhC,AAIE,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AACE,AAAA,AAAKL,AAAUC;;;AALnB,AAAA,AAAA,AAAAjB,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAOW;AAAPV;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAV,AAAAN,AAAA;AAAA,AAAA,AAAAgB;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAC,AAAAJ;AAAAK,AAAA,AAAAC,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAAH,AAAA,AAAAO,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAC,AAAA,AAAAvB,AAAOwB;AAOP,AAAA,AAAeQ;AAAf,AACE,AAAAC,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AAEF,AAAAC,AAAA,AAAA,AAAiDC;AAAjD,AAAoDb;;AACpD,AAAAc,AAAA;AAAA,AAAA,AAAAA,AAACC","names":["options__72617__auto__","p__89873","map__89874","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/wrapped-render","map__89878","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.dynamic-ui-main","js/book.demos.dynamic-ui-main.Main","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89887","G__89888","G__89889","goog.object/get","obj89891","com.fulcrologic.fulcro.components/configure-component!","book.demos.dynamic-ui-main/Main","this","label","main-prop","com.fulcrologic.fulcro.routing.legacy-ui-routers/dynamic-route-key","params","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","book.demos.dynamic-ui-main/init","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.routing.legacy-ui-routers/get-dynamic-router-target","k","G__89894","shadow.loader/set-loaded!"],"sourcesContent":["(ns book.demos.dynamic-ui-main\n  (:require\n    [com.fulcrologic.fulcro.components :refer [defsc]]\n    [com.fulcrologic.fulcro.routing.legacy-ui-routers :as r]\n    [com.fulcrologic.fulcro.dom :as dom]\n    cljs.loader\n    [taoensso.timbre :as log]))\n\n; This is a \"screen\" that we want to load with code-splitting modules. See the \"demos\" build in project.clj. The name\n; of the module needs to match the first element of the ident, as that's how the dynamic router figures out what module\n; to load.\n(defsc Main [this {:keys [label main-prop]}]\n  {:query         [r/dynamic-route-key :label :main-prop]\n   :initial-state (fn [params] {r/dynamic-route-key :ui-main :label \"MAIN\" :main-prop \"main page data\"})\n   :ident         (fn [] [:ui-main :singleton])}\n  (dom/div {:style {:backgroundColor \"red\"}}\n    (str label \" \" main-prop)))\n\n(defn ^:export init []\n  (log/info \"dynamic ui main loaded\"))\n\n(defmethod r/get-dynamic-router-target :ui-main [k] Main)\n(cljs.loader/set-loaded! :ui-main)\n\n"]}