{"version":3,"sources":["book/ui_routing.cljs"],"mappings":"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","names":["options__72617__auto__","params","com.fulcrologic.fulcro.components/make-state-map","p__86114","map__86115","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/wrapped-render","map__86117","com.fulcrologic.fulcro.components/props","js/book","js/book.ui-routing","js/book.ui-routing.Main","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj86120","G__86121","G__86122","goog.object/get","obj86124","com.fulcrologic.fulcro.components/configure-component!","book.ui-routing/Main","this","label","props","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","p__86127","map__86128","map__86130","js/book.ui-routing.Login","obj86133","G__86134","G__86135","obj86137","book.ui-routing/Login","p__86138","map__86139","map__86141","js/book.ui-routing.NewUser","obj86144","G__86145","G__86146","obj86148","book.ui-routing/NewUser","p__86149","map__86150","map__86152","js/book.ui-routing.StatusReport","obj86158","G__86159","G__86160","obj86162","book.ui-routing/StatusReport","id","page","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","p__86165","map__86166","map__86174","js/book.ui-routing.GraphingReport","obj86177","G__86178","G__86179","obj86181","book.ui-routing/GraphingReport","page__85300__auto__","cljs.core/first","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","G__86182","cljs.core/Keyword","fexpr__86183","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","fexpr__86184","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","js/book.ui-routing.ReportRouter-Union","book.ui-routing/ReportRouter-Union","obj86186","G__86187","G__86188","obj86190","book.ui-routing/ui-ReportRouter-Union","computed__85340__auto__","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","props__85341__auto__","props-with-computed__85342__auto__","com.fulcrologic.fulcro.components/computed","js/book.ui-routing.ReportRouter","obj86192","G__86193","G__86194","obj86196","book.ui-routing/ReportRouter","book.ui-routing/ui-report-router","p__86212","map__86214","map__86219","js/book.ui-routing.ReportsMain","obj86228","G__86229","G__86230","obj86232","book.ui-routing/ReportsMain","report-router","G__86235","fexpr__86237","fexpr__86238","fexpr__86239","fexpr__86240","js/book.ui-routing.TopRouter-Union","book.ui-routing/TopRouter-Union","obj86242","G__86243","G__86244","obj86246","book.ui-routing/ui-TopRouter-Union","js/book.ui-routing.TopRouter","obj86248","G__86249","G__86250","obj86252","book.ui-routing/TopRouter","book.ui-routing/ui-top","book.ui-routing/routing-tree","com.fulcrologic.fulcro.routing.legacy_ui_routers.routing_tree.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.routing.legacy-ui-routers/make-route","com.fulcrologic.fulcro.routing.legacy-ui-routers/router-instruction","map__86279","js/book.ui-routing.Root","obj86313","G__86314","G__86315","obj86317","book.ui-routing/Root","top-router","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.routing.legacy-ui-routers/routing-tree-key","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns book.ui-routing\n  (:require\n    [com.fulcrologic.fulcro.routing.legacy-ui-routers :as r :refer-macros [defsc-router]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.mutations :as m]))\n\n(defsc Main [this {:keys [label] :as props}]\n  {:initial-state {:page :main :label \"MAIN\"}\n   :ident         (fn [] [(:page props) :top])\n   :query         [:page :label]}\n  (dom/div {:style {:backgroundColor \"red\"}}\n    label))\n\n(defsc Login [this {:keys [label] :as props}]\n  {:initial-state {:page :login :label \"LOGIN\"}\n   :ident         (fn [] [(:page props) :top])\n   :query         [:page :label]}\n  (dom/div {:style {:backgroundColor \"green\"}}\n    label))\n\n(defsc NewUser [this {:keys [label] :as props}]\n  {:initial-state {:page :new-user :label \"New User\"}\n   :ident         (fn [] [(:page props) :top])\n   :query         [:page :label]}\n  (dom/div {:style {:backgroundColor \"skyblue\"}}\n    label))\n\n(defsc StatusReport [this {:keys [id page]}]\n  {:initial-state {:id :a :page :status-report}\n   :ident         (fn [] [page id])\n   :query         [:id :page :label]}\n  (dom/div {:style {:backgroundColor \"yellow\"}}\n    (dom/div (str \"Status \" id))))\n\n(defsc GraphingReport [this {:keys [id page]}]\n  {:initial-state {:id :a :page :graphing-report}\n   :ident         (fn [] [page id])\n   :query         [:id :page :label]}                       ; make sure you query for everything need by the router's ident function!\n  (dom/div {:style {:backgroundColor \"orange\"}}\n    (dom/div (str \"Graph \" id))))\n\n(defsc-router ReportRouter [this props]\n  {:router-id      :report-router\n   :ident          (fn [] [(:page props) (:id props)])\n   :default-route  StatusReport\n   :router-targets {:status-report   StatusReport\n                    :graphing-report GraphingReport}})\n\n(def ui-report-router (comp/factory ReportRouter))\n\n; BIG GOTCHA: Make sure you query for the prop (in this case :page) that the union needs in order to decide. It won't pull it itself!\n(defsc ReportsMain [this {:keys [page report-router]}]\n  ; nest the router under any arbitrary key, just be consistent in your query and props extraction.\n  {:initial-state (fn [params] {:page :report :report-router (comp/get-initial-state ReportRouter {})})\n   :ident         (fn [] [page :top])\n   :query         [:page {:report-router (comp/get-query ReportRouter)}]}\n  (dom/div {:style {:backgroundColor \"grey\"}}\n    ; Screen-specific content to be shown \"around\" or \"above\" the subscreen\n    \"REPORT MAIN SCREEN\"\n    ; Render the sub-router. You can also def a factory for the router (e.g. ui-report-router)\n    (ui-report-router report-router)))\n\n(defsc-router TopRouter [this props]\n  {:router-id      :top-router\n   :default-route  Main\n   :ident          (fn [] [(:page props) :top])\n   :router-targets {:main     Main\n                    :login    Login\n                    :new-user NewUser\n                    :report   ReportsMain}})\n\n(def ui-top (comp/factory TopRouter))\n\n(def routing-tree\n  \"A map of route handling instructions. The top key is the handler name of the route which can be\n  thought of as the terminal leaf in the UI graph of the screen that should be \\\"foremost\\\".\n\n  The value is a vector of routing-instructions to tell the UI routers which ident\n  of the route that should be made visible.\n\n  A value in this ident using the `param` namespace will be replaced with the incoming route parameter\n  (without the namespace). E.g. the incoming route-param :report-id will replace :param/report-id\"\n  (r/routing-tree\n    (r/make-route :main [(r/router-instruction :top-router [:main :top])])\n    (r/make-route :login [(r/router-instruction :top-router [:login :top])])\n    (r/make-route :new-user [(r/router-instruction :top-router [:new-user :top])])\n    (r/make-route :graph [(r/router-instruction :top-router [:report :top])\n                          (r/router-instruction :report-router [:graphing-report :param/report-id])])\n    (r/make-route :status [(r/router-instruction :top-router [:report :top])\n                           (r/router-instruction :report-router [:status-report :param/report-id])])))\n\n(defsc Root [this {:keys [top-router]}]\n  ; r/routing-tree-key implies the alias of com.fulcrologic.fulcro.routing.legacy-ui-routers as r.\n  {:initial-state (fn [params] (merge routing-tree\n                                 {:top-router (comp/get-initial-state TopRouter {})}))\n   :query         [r/routing-tree-key\n                   {:top-router (comp/get-query TopRouter)}]}\n  (dom/div\n    ; Sample nav mutations\n    (dom/a {:onClick #(comp/transact! this `[(r/route-to {:handler :main})])} \"Main\") \" | \"\n    (dom/a {:onClick #(comp/transact! this `[(r/route-to {:handler :new-user})])} \"New User\") \" | \"\n    (dom/a {:onClick #(comp/transact! this `[(r/route-to {:handler :login})])} \"Login\") \" | \"\n    (dom/a {:onClick #(comp/transact! this `[(r/route-to {:handler :status :route-params {:report-id :a}})])} \"Status A\") \" | \"\n    (dom/a {:onClick #(comp/transact! this `[(r/route-to {:handler :graph :route-params {:report-id :a}})])} \"Graph A\")\n    (ui-top top-router)))\n\n\n"]}