{"version":3,"sources":["book/tree_to_db.cljs"],"mappings":"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","names":["options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.tree-to-db","js/book.tree-to-db.SubQuery","props__72618__auto__","this__72619__auto__","temp__5733__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","init-state__72620__auto__","obj87202","G__87203","G__87204","goog.object/get","obj87206","com.fulcrologic.fulcro.components/configure-component!","book.tree-to-db/SubQuery","t","p","js/book.tree-to-db.TopQuery","obj87209","G__87210","G__87211","obj87214","book.tree-to-db/TopQuery","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","book.tree-to-db/normalize-from-to-result","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__87216","map__87217","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","ignored-params","state","result","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3","cljs.core/deref","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","book.tree-to-db/reset","p__87219","map__87220","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","map__87223","js/book.tree-to-db.Root","obj87227","G__87228","G__87229","obj87231","book.tree-to-db/Root","from","params","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","devcards.util.edn-renderer/html-edn","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.tree-to-db\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [devcards.util.edn-renderer :refer [html-edn]]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.normalize :as fnorm]))\n\n(defsc SubQuery [t p]\n  {:ident [:sub/by-id :id]\n   :query [:id :data]})\n\n(defsc TopQuery [t p]\n  {:ident [:top/by-id :id]\n   :query [:id {:subs (comp/get-query SubQuery)}]})\n\n(defmutation normalize-from-to-result [ignored-params]\n  (action [{:keys [state]}]\n    (let [result (fnorm/tree->db TopQuery (:from @state) true)]\n      (swap! state assoc :result result))))\n\n(defmutation reset [ignored-params] (action [{:keys [state]}] (swap! state dissoc :result)))\n\n(defsc Root [this {:keys [from result]}]\n  {:query         [:from :result]\n   :initial-state (fn [params]\n                    ; some data we're just shoving into the database from root...***not normalized***\n                    {:from {:id :top-1 :subs [{:id :sub-1 :data 1} {:id :sub-2 :data 2}]}})}\n  (dom/div\n    (dom/div\n      (dom/h4 \"Pretend Incoming Tree\")\n      (html-edn from))\n    (dom/div\n      (dom/h4 \"Normalized Result (click below to normalize)\")\n      (when result\n        (html-edn result)))\n    (dom/button {:onClick (fn [] (comp/transact! this `[(normalize-from-to-result {})]))} \"Normalized (Run tree->db)\")\n    (dom/button {:onClick (fn [] (comp/transact! this `[(reset {})]))} \"Clear Result\")))\n\n\n"]}