{"version":3,"sources":["book/queries/recursive_demo_2.cljs"],"mappings":";;;;;AAKA,AAAA,AAEA,AAAA;;;AAAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiCW;AAAjC,AAAA,AAAA,AAAA;AAAAN;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAA,AAAAF,AAAAE,AAAA,AACmBM;AADnB,AAEI,AAAA,AAAA,AAAA,AAACC,AAAMD,AAAME,AAAsBH,AAAgBI;;AAFvD;;AAAA,AAAA;AAAAR;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAAAH,AAAAG,AAAAH;;AAAA;;;;;AAIA,AAAA,AAAA;AAAA,AAAAS,AAAA,AAAA,AAAA,AAAeC;AAAf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAEuBuB;AAFvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAvB,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAeD;AAAf,AAAA,AAAAE,AAAA,AAAeF;AAAf,AAAA,AAAAG,AAAA,AAAAC,AAAeJ;AAAfG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAA4BT;AAA5B,AAAAP,AAAAgB,AAAA,AAAkCiB;AAAlC,AAAAjC,AAAAgB,AAAA,AAA8CkB;AAA9C,AAAAlC,AAAAgB,AAAA,AAA4DmB;AAA5D,AAcE,AAAAE,AAAA,AAAA,AAAA,AAAAC,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAiBL,AACjB,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAA,AAAgBH,AACd,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAA,AACc,AAAA,AAAAG,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAAH,AAAA,AAAAC,AAAA,AAAAG,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9C,AAAAgD,AAAA,AAAAL,AAAA,AAAAC,AAAA,AAAAG,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAAelC,AAAyBN;;AAJ3D,AAAA+B,AAAA,AAGI,AAAA,AAEF,AAAA,AAAA,AAAMJ,AACJ,AAAAG,AAAA,AAAA,AAAA,AACE,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAmB,AAACU,AAAAA,AAAAA,AAAUd,AAAAA;;;AArBtC,AAAA,AAAA,AAAAhB,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAOW;AAAPV;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAxB,AAAAY,AAAA;AAAA,AAAA,AAAAY;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAC,AAAAJ;AAAAK,AAAA,AAAAC,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAAH,AAAA,AAAAO,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAAC,AAAA,AAAAnB,AAAOoB;AAuBP,AAAKgB,AAAU,AAAA,AAAA,AAAA,AAACC,AAAajB;AAE7B,AAAA,AAAA;AAAA,AAAApB,AAAA,AAAA,AAAA,AAAAsC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAEwDlB;AAFxD,AAAA,AAAanB;AAAb,AAAA,AAAA,AAAA,AAEwC,AAAC+C,AAAe5B;AAFxD,AAAA,AAAanB;AAAb,AAAA,AAAAE,AAAA,AAAaF;AAAb,AAAA,AAAAuC,AAAA,AAAAnC,AAAaJ;AAAbuC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvD,AAAA,AAAAuD,AAAA,AAAA,AAAA,AAAA,AAAAtD,AAAAC,AAAAqD,AAAAA;AAAA,AAAApD,AAAAoD,AAAA,AAA0BO;AAA1B,AAGE,AAAAtB,AAAA,AAAA,AAAA,AACE,AAACW,AAAAA,AAAAA,AAAUW,AAAAA;;;AAJf,AAAA,AAAA,AAAAzC,AAAAC,AAAAC,AAAAiC;AAAA;AAAA,AAAA,AAAA,AAAOK;AAAPpC;AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAxB,AAAAY,AAAA;AAAA,AAAA,AAAAY;AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA+B,AAAA,AAAA,AAAA,AAAAC,AAAAhC;AAAAiC,AAAA,AAAA3B,AAAAP,AAAA;AAAA,AAAA,AAAAG,AAAAA,AAAA8B,AAAAC,AAAA/B,AAAA8B,AAAAC;;AAAA,AAAAF;;;AAAA,AAAA,AAAA/B,AAAA,AAAAkC,AAAA,AAAA,AAAA;AAAA,AAAAA;;;;AAAA;;;;;AAAA,AAAA1B,AAAA,AAAAnB,AAAO8C","names":["book.queries.recursive-demo-2/make-older","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__85821","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__85823","map__85824","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","id","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update-in","cljs.core/inc","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__85826","com.fulcrologic.fulcro.components/props","js/book","js/book.queries","js/book.queries.recursive-demo-2","js/book.queries.recursive-demo-2.Person","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85829","G__85830","G__85831","goog.object/get","obj85833","com.fulcrologic.fulcro.components/configure-component!","book.queries.recursive-demo-2/Person","name","spouse","age","p","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","book.queries.recursive-demo-2/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","map__85836","js/book.queries.recursive-demo-2.Root","obj85842","G__85843","G__85844","obj85846","book.queries.recursive-demo-2/Root","person-of-interest","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.queries.recursive-demo-2\n  (:require [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n            [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n            [com.fulcrologic.fulcro.dom :as dom]))\n\n(declare ui-person)\n\n(defmutation make-older [{:keys [id]}]\n  (action [{:keys [state]}]\n    (swap! state update-in [:person/id id :person/age] inc)))\n\n(defsc Person [this {:keys [db/id person/name person/spouse person/age]}]\n  {:query         (fn [] [:db/id :person/name :person/age {:person/spouse 1}]) ; force limit the depth\n   :initial-state (fn [p]\n                    ; this does look screwy...you can nest the same map in the recursive position,\n                    ; and it'll just merge into the one that was previously normalized during normalization.\n                    ; You need to do this or you won't get the loop in the database.\n                    {:db/id         1\n                     :person/name   \"Joe\"\n                     :person/age    20\n                     :person/spouse {:db/id         2\n                                     :person/name   \"Sally\"\n                                     :person/age    22\n                                     :person/spouse {:db/id 1 :person/name \"Joe\"}}})\n   :ident         [:person/id :db/id]}\n  (dom/div\n    (dom/div \"Name:\" name)\n    (dom/div \"Age:\" age\n      (dom/button {:onClick\n                   #(comp/transact! this `[(make-older {:id ~id})])} \"Make Older\"))\n    (when spouse\n      (dom/ul\n        (dom/div \"Spouse:\" (ui-person spouse))))))\n\n(def ui-person (comp/factory Person {:keyfn :db/id}))\n\n(defsc Root [this {:keys [person-of-interest]}]\n  {:initial-state {:person-of-interest {}}\n   :query         [{:person-of-interest (comp/get-query Person)}]}\n  (dom/div\n    (ui-person person-of-interest)))\n"]}