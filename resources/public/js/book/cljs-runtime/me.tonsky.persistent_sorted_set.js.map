{"version":3,"sources":["me/tonsky/persistent_sorted_set.cljs"],"mappings":"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","names":["me.tonsky.persistent-sorted-set/min-len","me.tonsky.persistent-sorted-set/max-len","me.tonsky.persistent-sorted-set/avg-len","me.tonsky.persistent-sorted-set/level-shift","cljs.core.range.cljs$core$IFn$_invoke$arity$3","p1__56502#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/first","me.tonsky.persistent-sorted-set/path-mask","me.tonsky.persistent-sorted-set/empty-path","me.tonsky.persistent-sorted-set/path-get","path","level","me.tonsky.persistent-sorted-set/path-set","idx","me.tonsky.persistent-sorted-set/binary-search-l","cmp","arr","r","k","l","cljs.core/long","m","mk","me.tonsky.persistent-sorted-set/binary-search-r","me.tonsky.persistent-sorted-set/lookup-exact","key","arr-l","G__56508","G__56509","me.tonsky.persistent-sorted-set/lookup-range","me.tonsky.persistent-sorted-set/cut-n-splice","cut-from","cut-to","splice-from","splice-to","xs","xs-l","l1","l2","l1xs","new-arr","me.tonsky.persistent-sorted-set.arrays/make-array","l__56315__auto__","n__4607__auto__","i__56316__auto__","me.tonsky.persistent-sorted-set/splice","me.tonsky.persistent-sorted-set/insert","me.tonsky.persistent-sorted-set/merge-n-split","a1","a2","a1-l","a2-l","total-l","r1-l","r2-l","r1","r2","me.tonsky.persistent-sorted-set/eq-arr","a1-from","a1-to","a2-from","a2-to","len","and__4120__auto__","i","G__56533","G__56534","me.tonsky.persistent-sorted-set/check-n-splice","from","to","var_args","G__56539","me.tonsky.persistent-sorted-set/return-array","js/Error","a3","x__4433__auto__","m__4434__auto__","me.tonsky.persistent-sorted-set/node-lim-key","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","me.tonsky.persistent-sorted-set/node-len","me.tonsky.persistent-sorted-set/node-merge","me.tonsky.persistent-sorted-set/node-merge-n-split","me.tonsky.persistent-sorted-set/node-lookup","me.tonsky.persistent-sorted-set/node-conj","me.tonsky.persistent-sorted-set/node-disj","me.tonsky.persistent-sorted-set/INode","_","next","root?","left","right","me.tonsky.persistent-sorted-set/rotate","node","me.tonsky.persistent_sorted_set.return_array.cljs$core$IFn$_invoke$arity$1","me.tonsky.persistent_sorted_set.return_array.cljs$core$IFn$_invoke$arity$3","me.tonsky.persistent_sorted_set.return_array.cljs$core$IFn$_invoke$arity$2","nodes","cljs.core/PROTOCOL_SENTINEL","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","me.tonsky.persistent-sorted-set/Node","me.tonsky.persistent-sorted-set/->Node","keys","pointers","arr__56357__auto__","me.tonsky.persistent-sorted-set.arrays/aconcat","ks","ps","new-keys","me.tonsky.persistent-sorted-set.arrays/amap","new-pointers","middle","child","left-child","right-child","disjned","left-idx","right-idx","me.tonsky.persistent-sorted-set/Leaf","me.tonsky.persistent-sorted-set/->Leaf","keys-l","G__56616","G__56617","me.tonsky.persistent-sorted-set/uninitialized-hash","self__","args56623","cljs.core/aclone","me.tonsky.persistent-sorted-set/BTSet","me.tonsky.persistent-sorted-set/->BTSet","root","shift","cnt","comparator","meta","_hash","this","cljs.core/pr-str*","new-meta","other","cljs.core/set?","cljs.core/count","p1__56618#","cljs.core/every?","cljs.core/contains?","h__4243__auto__","cljs.core/hash-unordered-coll","me.tonsky.persistent-sorted-set/conj","me.tonsky.persistent-sorted-set/disj","not-found","or__4131__auto__","me.tonsky.persistent-sorted-set/btset-iter","f","temp__5733__auto__","cljs.core._reduce.cljs$core$IFn$_invoke$arity$2","start","cljs.core._reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/rseq","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core/seq","me.tonsky.persistent-sorted-set/keys-for","set","me.tonsky.persistent-sorted-set/alter-btset","me.tonsky.persistent-sorted-set/-next-path","sub-path","G__56691","G__56692","G__56693","me.tonsky.persistent-sorted-set/next-path","me.tonsky.persistent-sorted-set/-rpath","me.tonsky.persistent-sorted-set/-prev-path","sub-level","G__56713","G__56714","G__56715","me.tonsky.persistent-sorted-set/prev-path","me.tonsky.persistent-sorted-set/iter","me.tonsky.persistent-sorted-set/Chunk","me.tonsky.persistent-sorted-set/->Chunk","off","end","cljs.core/ArrayChunk","val","n","val'","G__56717","G__56718","cljs.core/deref","cljs.core/reduced?","me.tonsky.persistent-sorted-set/-copy","me.tonsky.persistent-sorted-set/IIter","me.tonsky.persistent-sorted-set/Iter","me.tonsky.persistent-sorted-set/->Iter","cljs.core/equiv-sequential","left'","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","end-idx","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","first","temp__5737__auto__","acc","new-acc","G__56724","G__56725","new-left","G__56721","G__56722","G__56723","me.tonsky.persistent-sorted-set/riter","me.tonsky.persistent-sorted-set/ReverseIter","me.tonsky.persistent-sorted-set/->ReverseIter","new-right","me.tonsky.persistent-sorted-set/-distance","idx-l","idx-r","G__56726","G__56727","G__56728","G__56729","res","me.tonsky.persistent-sorted-set/distance","path-l","path-r","me.tonsky.persistent-sorted-set/est-count","iter","me.tonsky.persistent-sorted-set/-seek","me.tonsky.persistent-sorted-set/-rseek","me.tonsky.persistent-sorted-set/-slice","key-from","key-to","till-path","me.tonsky.persistent-sorted-set/arr-map-inplace","G__56730","me.tonsky.persistent-sorted-set/arr-partition-approx","min-len","max-len","chunk-len","cljs.core/transient","pos","rest","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","piece-len","cljs.core/to-array","cljs.core/persistent!","me.tonsky.persistent-sorted-set/sorted-arr-distinct?","al","p","e","me.tonsky.persistent-sorted-set/sorted-arr-distinct","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","roots","new-roots","new-root","G__56732","me.tonsky.persistent-sorted-set/slice","G__56734","me.tonsky.persistent-sorted-set/rslice","G__56735","G__56736","G__56737","me.tonsky.persistent-sorted-set/from-sorted-array","leaves","p1__56738#","current-level","G__56740","p1__56739#","me.tonsky.persistent-sorted-set/from-sequential","seq","me.tonsky.persistent-sorted-set.arrays/asort","G__56744","me.tonsky.persistent-sorted-set/sorted-set-by","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq56742","G__56743","cljs.core/next","self__4717__auto__","G__56747","me.tonsky.persistent-sorted-set/sorted-set","seq56746","self__4718__auto__","me.tonsky.persistent_sorted_set.sorted_set_by.cljs$core$IFn$_invoke$arity$1","cljs.core/compare"],"sourcesContent":["(ns ^{:doc\n  \"A B-tree based persistent sorted set. Supports transients, custom comparators, fast iteration, efficient slices (iterator over a part of the set) and reverse slices. Almost a drop-in replacement for [[clojure.core/sorted-set]], the only difference being this one can\u2019t store nil.\"\n  :author \"Nikita Prokopov\"}\n  me.tonsky.persistent-sorted-set\n  (:refer-clojure :exclude [iter conj disj sorted-set sorted-set-by])\n  (:require\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  (:require-macros\n    [me.tonsky.persistent-sorted-set.arrays :as arrays]))\n\n\n; B+ tree\n; -------\n\n; Leaf:     keys[]     :: array of values\n\n; Node:     pointers[] :: links to children nodes\n;           keys[]     :: max value for whole subtree\n;                         node.keys[i] == max(node.pointers[i].keys)\n; All arrays are 16..32 elements, inclusive\n\n; BTSet:    root       :: Node or Leaf\n;           shift      :: path bit-shift of root level, == (depth - 1) * level-shift\n;           cnt        :: size of a set, integer, rolling\n;           comparator :: comparator used for ordering\n;           meta       :: clojure meta map\n;           _hash      :: hash code, same as for clojure collections, on-demand, cached\n\n; Path: conceptually a vector of indexes from root to leaf value, but encoded in a single int.\n;       E.g. we have path [7 53 11] representing root.pointers[7].pointers[3].keys[11].\n;       In our case level-shift is 8, meaning each index will take 8 bits:\n;       (7 << 16) | (53 << 8) | 11 = 472331\n;       0000 0111   0011 0101   0000 1011\n\n; Iter:     set       :: Set this iterator belongs to\n;           left      :: Current path\n;           right     :: Right bound path (exclusive)\n;           keys      :: Cached ref for keys array for a leaf\n;           idx       :: Cached idx in keys array\n; Keys and idx are cached for fast iteration inside a leaf\"\n\n\n(def ^:const min-len 16)\n(def ^:const max-len 32)\n(def ^:private ^:const avg-len (arrays/half (+ max-len min-len)))\n(def ^:private ^:const level-shift (->> (range 31 -1 -1)\n                                     (filter #(bit-test max-len %))\n                                     first\n                                     inc))\n(def ^:private ^:const path-mask (dec (bit-shift-left 1 level-shift)))\n(def ^:private ^:const empty-path 0)\n\n(defn- path-get [path level]\n  (bit-and path-mask\n           (unsigned-bit-shift-right path level)))\n\n(defn- path-set [path level idx]\n  (bit-or path \n          (bit-shift-left idx level)))\n\n(defn- binary-search-l [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (neg? (cmp mk k))\n          (recur (inc m) r)\n          (recur l (dec m))))\n      l)))\n\n(defn- binary-search-r [cmp arr r k]\n  (loop [l 0\n         r (long r)]\n    (if (<= l r)\n      (let [m  (arrays/half (+ l r))\n            mk (arrays/aget arr m)]\n        (if (pos? (cmp mk k))\n          (recur l (dec m))\n          (recur (inc m) r)))\n      l)))\n\n(defn- lookup-exact [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (and (< idx arr-l)\n             (== 0 (cmp (arrays/aget arr idx) key)))\n      idx\n      -1)))\n\n(defn- lookup-range [cmp arr key]\n  (let [arr-l (arrays/alength arr)\n        idx   (binary-search-l cmp arr (dec arr-l) key)]\n    (if (== idx arr-l)\n      -1\n      idx)))\n\n;; Array operations\n\n(defn- cut-n-splice [arr cut-from cut-to splice-from splice-to xs]\n  (let [xs-l (arrays/alength xs)\n        l1   (- splice-from cut-from)\n        l2   (- cut-to splice-to)\n        l1xs (+ l1 xs-l)\n        new-arr (arrays/make-array (+ l1 xs-l l2))]\n    (arrays/acopy arr cut-from splice-from new-arr 0)\n    (arrays/acopy xs 0 xs-l new-arr l1)\n    (arrays/acopy arr splice-to cut-to new-arr l1xs)\n    new-arr))\n\n(defn- splice [arr splice-from splice-to xs]\n  (cut-n-splice arr 0 (arrays/alength arr) splice-from splice-to xs))\n\n(defn- insert [arr idx xs]\n  (cut-n-splice arr 0 (arrays/alength arr) idx idx xs))\n\n(defn- merge-n-split [a1 a2]\n  (let [a1-l    (arrays/alength a1)\n        a2-l    (arrays/alength a2)\n        total-l (+ a1-l a2-l)\n        r1-l    (arrays/half total-l)\n        r2-l    (- total-l r1-l)\n        r1      (arrays/make-array r1-l)\n        r2      (arrays/make-array r2-l)]\n    (if (<= a1-l r1-l)\n      (do\n        (arrays/acopy a1 0             a1-l          r1 0)\n        (arrays/acopy a2 0             (- r1-l a1-l) r1 a1-l)\n        (arrays/acopy a2 (- r1-l a1-l) a2-l          r2 0))\n      (do\n        (arrays/acopy a1 0    r1-l r1 0)\n        (arrays/acopy a1 r1-l a1-l r2 0)\n        (arrays/acopy a2 0    a2-l r2 (- a1-l r1-l))))\n    (arrays/array r1 r2)))\n\n(defn- ^boolean eq-arr [cmp a1 a1-from a1-to a2 a2-from a2-to]\n  (let [len (- a1-to a1-from)]\n    (and\n      (== len (- a2-to a2-from))\n      (loop [i 0]\n        (cond\n          (== i len)\n          true\n\n          (not (== 0 (cmp\n                       (arrays/aget a1 (+ i a1-from))\n                       (arrays/aget a2 (+ i a2-from)))))\n          false\n          \n          :else\n          (recur (inc i)))))))\n\n(defn- check-n-splice [cmp arr from to new-arr]\n  (if (eq-arr cmp arr from to new-arr 0 (arrays/alength new-arr))\n    arr\n    (splice arr from to new-arr)))\n\n(defn- return-array\n  \"Drop non-nil references and return array of arguments\"\n  ([a1]\n    (arrays/array a1))\n  ([a1 a2]\n    (if a1\n      (if a2\n        (arrays/array a1 a2)\n        (arrays/array a1))\n      (arrays/array a2)))\n  ([a1 a2 a3]\n    (if a1\n      (if a2\n        (if a3\n          (arrays/array a1 a2 a3)\n          (arrays/array a1 a2))\n        (if a3\n          (arrays/array a1 a3)\n          (arrays/array a1)))\n      (if a2\n        (if a3\n          (arrays/array a2 a3)\n          (arrays/array a2))\n        (arrays/array a3)))))\n\n;;\n\n(defprotocol INode\n  (node-lim-key       [_])\n  (node-len           [_])\n  (node-merge         [_ next])\n  (node-merge-n-split [_ next])\n  (node-lookup        [_ cmp key])\n  (node-conj          [_ cmp key])\n  (node-disj          [_ cmp key root? left right]))\n\n(defn- rotate [node root? left right]\n  (cond\n    ;; root never merges\n    root?\n    (return-array node)\n\n    ;; enough keys, nothing to merge\n    (> (node-len node) min-len)\n    (return-array left node right)\n\n    ;; left and this can be merged to one\n    (and left (<= (node-len left) min-len))\n    (return-array (node-merge left node) right)\n\n    ;; right and this can be merged to one\n    (and right (<= (node-len right) min-len))\n    (return-array left (node-merge node right))\n\n    ;; left has fewer nodes, redestribute with it\n    (and left (or (nil? right)\n                  (< (node-len left) (node-len right))))\n    (let [nodes (node-merge-n-split left node)]\n      (return-array (arrays/aget nodes 0) (arrays/aget nodes 1) right))\n\n    ;; right has fewer nodes, redestribute with it\n    :else\n    (let [nodes (node-merge-n-split node right)]\n      (return-array left (arrays/aget nodes 0) (arrays/aget nodes 1)))))\n\n(deftype Node [keys pointers]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Node. (arrays/aconcat keys (.-keys next))\n           (arrays/aconcat pointers (.-pointers next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys     (.-keys next))\n          ps (merge-n-split pointers (.-pointers next))]\n      (return-array (Node. (arrays/aget ks 0) (arrays/aget ps 0))\n                    (Node. (arrays/aget ks 1) (arrays/aget ps 1)))))\n\n  (node-lookup [_ cmp key]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx)\n        (node-lookup (arrays/aget pointers idx) cmp key))))\n  \n  (node-conj [_ cmp key]\n    (let [idx   (binary-search-l cmp keys (- (arrays/alength keys) 2) key)\n          nodes (node-conj (arrays/aget pointers idx) cmp key)]\n      (when nodes\n        (let [new-keys     (check-n-splice cmp keys     idx (inc idx) (arrays/amap node-lim-key nodes))\n              new-pointers (splice             pointers idx (inc idx) nodes)]\n          (if (<= (arrays/alength new-pointers) max-len)\n            ;; ok as is\n            (arrays/array (Node. new-keys new-pointers))\n            ;; gotta split it up\n            (let [middle  (arrays/half (arrays/alength new-pointers))]\n              (arrays/array\n                (Node. (.slice new-keys     0 middle)\n                       (.slice new-pointers 0 middle))\n                (Node. (.slice new-keys     middle)\n                       (.slice new-pointers middle)))))))))\n\n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-range cmp keys key)]\n      (when-not (== -1 idx) ;; short-circuit, key not here\n        (let [child       (arrays/aget pointers idx)\n              left-child  (when (>= (dec idx) 0)\n                            (arrays/aget pointers (dec idx)))\n              right-child (when (< (inc idx) (arrays/alength pointers))\n                            (arrays/aget pointers (inc idx)))\n              disjned     (node-disj child cmp key false left-child right-child)]\n          (when disjned     ;; short-circuit, key not here\n            (let [left-idx     (if left-child  (dec idx) idx)\n                  right-idx    (if right-child (+ 2 idx) (+ 1 idx))\n                  new-keys     (check-n-splice cmp keys     left-idx right-idx (arrays/amap node-lim-key disjned))\n                  new-pointers (splice             pointers left-idx right-idx disjned)]\n              (rotate (Node. new-keys new-pointers) root? left right))))))))\n\n(deftype Leaf [keys]\n  INode\n  (node-lim-key [_]\n    (arrays/alast keys))\n;;   Object\n;;   (toString [_] (pr-str* (vec keys)))\n  \n  (node-len [_]\n    (arrays/alength keys))\n  \n  (node-merge [_ next]\n    (Leaf. (arrays/aconcat keys (.-keys next))))\n  \n  (node-merge-n-split [_ next]\n    (let [ks (merge-n-split keys (.-keys next))]\n      (return-array (Leaf. (arrays/aget ks 0))\n                    (Leaf. (arrays/aget ks 1)))))\n  \n  (node-lookup [_ cmp key]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx)\n        (arrays/aget keys idx))))\n\n  (node-conj [_ cmp key]\n    (let [idx    (binary-search-l cmp keys (dec (arrays/alength keys)) key)\n          keys-l (arrays/alength keys)]\n      (cond\n        ;; element already here\n        (and (< idx keys-l)\n             (== 0 (cmp key (arrays/aget keys idx))))\n          nil\n      \n        ;; splitting\n        (== keys-l max-len)\n          (let [middle (arrays/half (inc keys-l))]\n            (if (> idx middle)\n              ;; new key goes to the second half\n              (arrays/array\n                (Leaf. (.slice keys 0 middle))\n                (Leaf. (cut-n-splice keys middle keys-l idx idx (arrays/array key))))\n              ;; new key goes to the first half\n              (arrays/array\n                (Leaf. (cut-n-splice keys 0 middle idx idx (arrays/array key)))\n                (Leaf. (.slice keys middle keys-l)))))\n       \n        ;; ok as is\n        :else\n          (arrays/array (Leaf. (splice keys idx idx (arrays/array key)))))))\n  \n  (node-disj [_ cmp key root? left right]\n    (let [idx (lookup-exact cmp keys key)]\n      (when-not (== -1 idx) ;; key is here\n        (let [new-keys (splice keys idx (inc idx) (arrays/array))]\n          (rotate (Leaf. new-keys) root? left right))))))\n\n;; BTSet\n\n(declare conj disj btset-iter)\n\n(def ^:private ^:const uninitialized-hash nil)\n\n(deftype BTSet [root shift cnt comparator meta ^:mutable _hash]\n  Object\n  (toString [this] (pr-str* this))\n\n  ICloneable\n  (-clone [_] (BTSet. root shift cnt comparator meta _hash))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (BTSet. root shift cnt comparator new-meta _hash))\n\n  IMeta\n  (-meta [_] meta)\n\n  IEmptyableCollection\n  (-empty [_] (BTSet. (Leaf. (arrays/array)) 0 0 comparator meta uninitialized-hash))\n\n  IEquiv\n  (-equiv [this other]\n    (and\n      (set? other)\n      (== cnt (count other))\n      (every? #(contains? this %) other)))\n\n  IHash\n  (-hash [this] (caching-hash this hash-unordered-coll _hash))\n\n  ICollection\n  (-conj [this key] (conj this key comparator))\n\n  ISet\n  (-disjoin [this key] (disj this key comparator))\n\n  ILookup \n  (-lookup [_ k]\n    (node-lookup root comparator k))\n  (-lookup [_ k not-found]\n    (or (node-lookup root comparator k) not-found))\n\n  ISeqable\n  (-seq [this] (btset-iter this))\n\n  IReduce\n  (-reduce [this f]\n    (if-let [i (btset-iter this)]\n      (-reduce i f)\n      (f)))\n  (-reduce [this f start]\n    (if-let [i (btset-iter this)]\n      (-reduce i f start)\n      start))\n           \n  IReversible\n  (-rseq [this] (rseq (btset-iter this)))\n\n  ; ISorted\n  ; (-sorted-seq [this ascending?])\n  ; (-sorted-seq-from [this k ascending?])\n  ; (-entry-key [this entry] entry)\n  ; (-comparator [this] comparator)\n\n  ICounted\n  (-count [_] cnt)\n\n  IEditableCollection\n  (-as-transient [this] this)\n\n  ITransientCollection\n  (-conj! [this key] (conj this key comparator))\n  (-persistent! [this] this)\n\n  ITransientSet\n  (-disjoin! [this key] (disj this key comparator))\n\n  IFn\n  (-invoke [this k] (-lookup this k))\n  (-invoke [this k not-found] (-lookup this k not-found))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"#{\" \" \" \"}\" opts (seq this))))\n  \n(defn- keys-for [set path]\n  (loop [level (.-shift set)\n         node  (.-root set)]\n    (if (pos? level)\n      (recur (- level level-shift)\n             (arrays/aget (.-pointers node)\n                   (path-get path level)))\n      (.-keys node))))\n\n(defn- alter-btset [set root shift cnt]\n  (BTSet. root shift cnt (.-comparator set) (.-meta set) uninitialized-hash))\n\n\n;; iteration\n\n(defn- -next-path [node path level]\n  (let [idx (path-get path level)]\n    (if (pos? level)\n      ;; inner node\n      (let [sub-path (-next-path (arrays/aget (.-pointers node) idx) path (- level level-shift))]\n        (if (== -1 sub-path)\n          ;; nested node overflow\n          (if (< (inc idx) (arrays/alength (.-pointers node)))\n            ;; advance current node idx, reset subsequent indexes\n            (path-set empty-path level (inc idx))\n            ;; current node overflow\n            -1)\n          ;; keep current idx\n          (path-set sub-path level idx)))\n      ;; leaf\n      (if (< (inc idx) (arrays/alength (.-keys node)))\n        ;; advance leaf idx\n        (path-set empty-path 0 (inc idx))\n        ;; leaf overflow\n        -1))))\n\n(defn- next-path\n  \"Returns path representing next item after `path` in natural traversal order,\n   or -1 if end of tree has been reached\"\n  [set path]\n  (-next-path (.-root set) path (.-shift set)))\n\n(defn- -rpath\n  \"Returns rightmost path possible starting from node and going deeper\"\n  [node level]\n  (loop [node  node\n         path  empty-path\n         level level]\n    (if (pos? level)\n      ;; inner node\n      (recur (arrays/alast (.-pointers node))\n             (path-set path level (dec (arrays/alength (.-pointers node))))\n             (- level level-shift))\n      ;; leaf\n      (path-set path 0 (dec (arrays/alength (.-keys node)))))))\n\n(defn- -prev-path [node path level]\n  (let [idx (path-get path level)]\n    (if (pos? level)\n      ;; inner node\n      (let [sub-level (- level level-shift)\n            sub-path  (-prev-path (arrays/aget (.-pointers node) idx) path sub-level)]\n        (if (== -1 sub-path)\n          ;; nested node overflow\n          (if (>= (dec idx) 0)\n            ;; advance current node idx, reset subsequent indexes\n            (let [idx      (dec idx)\n                  sub-path (-rpath (arrays/aget (.-pointers node) idx) sub-level)]\n              (path-set sub-path level idx))\n            ;; current node overflow\n            -1)\n          ;; keep current idx\n          (path-set sub-path level idx)))\n      ;; leaf\n      (if (>= (dec idx) 0)\n        ;; advance leaf idx\n        (path-set empty-path 0 (dec idx))\n        ;; leaf overflow\n        -1))))\n\n(defn- prev-path\n  \"Returns path representing previous item before `path` in natural traversal order,\n   or -1 if `path` was already beginning of a tree\"\n  [set path]\n  (-prev-path (.-root set) path (.-shift set)))\n\n(declare iter riter)\n\n(defn- btset-iter\n  \"Iterator that represents the whole set\"\n  [set]\n  (when (pos? (node-len (.-root set)))\n    (let [left   empty-path\n          right  (inc (-rpath (.-root set) (.-shift set)))]\n      (iter set left right))))\n\n;; replace with cljs.core/ArrayChunk after https://dev.clojure.org/jira/browse/CLJS-2470\n(deftype Chunk [arr off end]\n  ICounted\n  (-count [_] (- end off))\n\n  IIndexed\n  (-nth [this i]\n    (aget arr (+ off i)))\n  (-nth [this i not-found]\n    (if (and (>= i 0) (< i (- end off)))\n      (aget arr (+ off i))\n      not-found))\n\n  IChunk\n  (-drop-first [this]\n    (if (== off end)\n      (throw (js/Error. \"-drop-first of empty chunk\"))\n      (ArrayChunk. arr (inc off) end)))\n\n  IReduce\n  (-reduce [this f]\n    (if (== off end)\n      (f)\n      (-reduce (-drop-first this) f (aget arr off))))\n  (-reduce [this f start]\n    (loop [val start, n off]\n      (if (< n end)\n        (let [val' (f val (aget arr n))]\n          (if (reduced? val')\n            @val'\n            (recur val' (inc n))))\n        val))))\n\n(defprotocol IIter\n  (-copy [this left right]))\n\n(deftype Iter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (Iter. set l r (keys-for set l) (path-get l 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this] (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (< (inc idx) (arrays/alength keys))\n        ;; can use cached array to move forward\n        (when (< (inc left) right)\n          (Iter. set (inc left) right keys (inc idx)))\n        (let [left' (next-path set left)]\n          (when (and (not= -1 left') (< left' right))\n            (-copy this left' right))))))\n\n  IChunkedSeq\n  (-chunked-first [this]\n    (let [end-idx (if (= (bit-or left path-mask)\n                         (bit-or right path-mask))\n                    (bit-and right path-mask)\n                    (arrays/alength keys))]\n      (Chunk. keys idx end-idx)))\n\n  (-chunked-rest [this]\n    (or (-chunked-next this) ()))\n\n  IChunkedNext\n  (-chunked-next [this]\n    (let [left' (next-path set (+ left (- (arrays/alength keys) idx 1)))]\n      (when (and (not= -1 left') (< left' right))\n        (-copy this left' right))))\n           \n  IReduce\n  (-reduce [this f]\n    (if (nil? keys)\n      (f)\n      (let [first (-first this)]\n        (if-some [next (-next this)]\n          (-reduce next f first)\n          first))))\n\n  (-reduce [this f start]\n    (loop [left left\n           keys keys\n           idx  idx\n           acc  start]\n      (if (nil? keys)\n        acc\n        (let [new-acc (f acc (arrays/aget keys idx))]\n          (cond\n            (reduced? new-acc)\n            @new-acc\n\n            (< (inc idx) (arrays/alength keys)) ;; can use cached array to move forward\n            (if (< (inc left) right)\n              (recur (inc left) keys (inc idx) new-acc)\n              new-acc)\n\n            :else\n            (let [new-left (next-path set left)]\n              (if (and (not (== -1 new-left)) (< new-left right))\n                (recur new-left (keys-for set new-left) (path-get new-left 0) new-acc)\n                new-acc)))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (riter set (prev-path set left) (prev-path set right))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn iter [set left right]\n  (Iter. set left right (keys-for set left) (path-get left 0)))\n\n;; reverse iteration\n\n(deftype ReverseIter [set left right keys idx]\n  IIter\n  (-copy [_ l r]\n    (ReverseIter. set l r (keys-for set r) (path-get r 0)))\n\n  IEquiv\n  (-equiv [this other] (equiv-sequential this other))\n\n  ISequential\n  ISeqable\n  (-seq [this] (when keys this))\n\n  ISeq\n  (-first [this]\n    (when keys\n      (arrays/aget keys idx)))\n\n  (-rest [this]  (or (-next this) ()))\n\n  INext\n  (-next [this]\n    (when keys\n      (if (>= (dec idx) 0)\n        ;; can use cached array to advance\n        (when (> (dec right) left)\n          (ReverseIter. set left (dec right) keys (dec idx)))\n        (let [right (prev-path set right)]\n          (when (and (not= -1 right) (> right left))\n            (-copy this left right))))))\n\n  IReversible\n  (-rseq [this]\n    (when keys\n      (let [new-left  (if (== left -1) 0 (next-path set left))\n            new-right (next-path set right)\n            new-right (if (== new-right -1) (inc right) new-right)]\n        (iter set new-left new-right))))\n\n  Object\n  (toString [this] (pr-str* this))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (pr-sequential-writer writer pr-writer \"(\" \" \" \")\" opts (seq this))))\n\n(defn riter [set left right]\n  (ReverseIter. set left right (keys-for set right) (path-get right 0)))\n\n;; distance\n\n(defn- -distance [node left right level]\n  (let [idx-l (path-get left level)\n        idx-r (path-get right level)]\n    (if (pos? level)\n      ;; inner node\n      (if (== idx-l idx-r)\n        (-distance (arrays/aget (.-pointers node) idx-l) left right (- level level-shift))\n        (loop [level level\n               res   (- idx-r idx-l)]\n          (if (== 0 level)\n            res\n            (recur (- level level-shift) (* res avg-len)))))\n      (- idx-r idx-l))))\n\n(defn- distance [set path-l path-r]\n  (cond\n    (== path-l path-r) 0\n    (== (inc path-l) path-r) 1\n    (== (next-path set path-l) path-r) 1\n    :else (-distance (.-root set) path-l path-r (.-shift set))))\n\n(defn est-count [iter]\n  (distance (.-set iter) (.-left iter) (.-right iter)))\n\n\n;; Slicing\n\n(defn- -seek\n  \"Returns path to first element >= key,\n   or -1 if all elements in a set < key\"\n  [set key comparator]\n  (loop [node  (.-root set)\n         path  empty-path\n         level (.-shift set)]\n    (let [keys-l (node-len node)]\n      (if (== 0 level)\n        (let [keys (.-keys node)\n              idx  (binary-search-l comparator keys (dec keys-l) key)]\n          (if (== keys-l idx) -1 (path-set path 0 idx)))\n        (let [keys (.-keys node)\n              idx  (binary-search-l comparator keys (- keys-l 2) key)]\n          (recur (arrays/aget (.-pointers node) idx)\n                 (path-set path level idx)\n                 (- level level-shift)))))))\n\n(defn- -rseek\n  \"Returns path to the first element that is > key.\n   If all elements in a set are <= key, returns `(-rpath set) + 1`.\n   It\u2019s a virtual path that is bigger than any path in a tree\"\n  [set key comparator]\n  (loop [node  (.-root set)\n         path  empty-path\n         level (.-shift set)]\n    (let [keys-l (node-len node)]\n      (if (== 0 level)\n        (let [keys (.-keys node)\n              idx  (binary-search-r comparator keys (dec keys-l) key)]\n          (path-set path 0 idx))\n        (let [keys (.-keys node)\n              idx  (binary-search-r comparator keys (- keys-l 2) key)]\n          (recur (arrays/aget (.-pointers node) idx)\n                 (path-set path level idx)\n                 (- level level-shift)))))))\n\n(defn- -slice [set key-from key-to comparator]\n  (let [path (-seek set key-from comparator)]\n    (when-not (neg? path)\n      (let [till-path (-rseek set key-to comparator)]\n        (when (> till-path path)\n          (Iter. set path till-path (keys-for set path) (path-get path 0)))))))\n\n\n(defn- arr-map-inplace [f arr]\n  (let [len (arrays/alength arr)]\n    (loop [i 0]\n      (when (< i len)\n        (arrays/aset arr i (f (arrays/aget arr i)))\n        (recur (inc i))))\n    arr))\n\n\n(defn- arr-partition-approx\n  \"Splits `arr` into arrays of size between min-len and max-len,\n   trying to stick to (min+max)/2\"\n  [min-len max-len arr]\n  (let [chunk-len avg-len\n        len       (arrays/alength arr)\n        acc       (transient [])]\n    (when (pos? len)\n      (loop [pos 0]\n        (let [rest (- len pos)]\n          (cond\n            (<= rest max-len)\n              (conj! acc (.slice arr pos))\n            (>= rest (+ chunk-len min-len))\n              (do\n                (conj! acc (.slice arr pos (+ pos chunk-len)))\n                (recur (+ pos chunk-len)))\n            :else\n              (let [piece-len (arrays/half rest)]\n                (conj! acc (.slice arr pos (+ pos piece-len)))\n                (recur (+ pos piece-len)))))))\n    (to-array (persistent! acc))))\n\n\n(defn- sorted-arr-distinct? [arr cmp]\n  (let [al (arrays/alength arr)]\n    (if (<= al 1)\n      true\n      (loop [i 1\n             p (arrays/aget arr 0)]\n        (if (>= i al)\n          true\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              false\n              (recur (inc i) e))))))))\n\n\n(defn- sorted-arr-distinct\n  \"Filter out repetitive values in a sorted array.\n   Optimized for no-duplicates case\"\n  [arr cmp]\n  (if (sorted-arr-distinct? arr cmp)\n    arr\n    (let [al (arrays/alength arr)]\n      (loop [acc (transient [(arrays/aget arr 0)])\n             i   1\n             p   (arrays/aget arr 0)]\n        (if (>= i al)\n          (into-array (persistent! acc))\n          (let [e (arrays/aget arr i)]\n            (if (== 0 (cmp e p))\n              (recur acc (inc i) e)\n              (recur (conj! acc e) (inc i) e))))))))\n\n\n;; Public interface\n\n(defn conj\n  \"Analogue to [[clojure.core/conj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [roots (node-conj (.-root set) cmp key)]\n    (cond\n      ;; tree not changed\n      (nil? roots)\n        set\n     \n      ;; keeping single root\n      (== (arrays/alength roots) 1)\n        (alter-btset set\n          (arrays/aget roots 0)\n          (.-shift set)\n          (inc (.-cnt set)))\n     \n      ;; introducing new root\n      :else\n        (alter-btset set\n          (Node. (arrays/amap node-lim-key roots) roots)\n          (+ (.-shift set) level-shift)\n          (inc (.-cnt set))))))\n\n\n(defn disj\n  \"Analogue to [[clojure.core/disj]] with comparator that overrides the one stored in set.\"\n  [set key cmp]\n  (let [new-roots (node-disj (.-root set) cmp key true nil nil)]\n    (if (nil? new-roots) ;; nothing changed, key wasn't in the set\n      set\n      (let [new-root (arrays/aget new-roots 0)]\n        (if (and (instance? Node new-root)\n                 (== 1 (arrays/alength (.-pointers new-root))))\n          \n          ;; root has one child, make him new root\n          (alter-btset set\n            (arrays/aget (.-pointers new-root) 0)\n            (- (.-shift set) level-shift)\n            (dec (.-cnt set)))\n          \n          ;; keeping root level\n          (alter-btset set\n            new-root\n            (.-shift set)\n            (dec (.-cnt set))))))))\n\n\n(defn slice\n  \"An iterator for part of the set with provided boundaries.\n   `(slice set from to)` returns iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key-from key-to]\n    (-slice set key-from key-to (.-comparator set)))\n  ([set key-from key-to comparator]\n    (-slice set key-from key-to comparator)))\n\n\n(defn rslice\n  \"A reverse iterator for part of the set with provided boundaries.\n   `(rslice set from to)` returns backwards iterator for all Xs where from <= X <= to.\n   Optionally pass in comparator that will override the one that set uses. Supports efficient [[clojure.core/rseq]].\"\n  ([set key]\n    (some-> (-slice set key key (.-comparator set)) rseq))\n  ([set key-from key-to]\n    (some-> (-slice set key-to key-from (.-comparator set)) rseq))\n  ([set key-from key-to comparator]\n    (some-> (-slice set key-to key-from comparator) rseq)))\n\n\n(defn from-sorted-array\n  \"Fast path to create a set if you already have a sorted array of elements on your hands.\"\n  [cmp arr]\n  (let [leaves (->> arr\n                   (arr-partition-approx min-len max-len)\n                   (arr-map-inplace #(Leaf. %)))]\n    (loop [current-level leaves\n           shift 0]\n      (case (count current-level)\n        0 (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash)\n        1 (BTSet. (first current-level) shift (arrays/alength arr) cmp nil uninitialized-hash)\n        (recur (->> current-level\n                    (arr-partition-approx min-len max-len)\n                    (arr-map-inplace #(Node. (arrays/amap node-lim-key %) %)))\n               (+ shift level-shift))))))\n\n\n(defn from-sequential\n  \"Create a set with custom comparator and a collection of keys. Useful when you don\u2019t want to call [[clojure.core/apply]] on [[sorted-set-by]].\"\n  [cmp seq]\n  (let [arr (-> (into-array seq) (arrays/asort cmp) (sorted-arr-distinct cmp))]\n    (from-sorted-array cmp arr)))\n\n\n(defn sorted-set-by\n  ([cmp] (BTSet. (Leaf. (arrays/array)) 0 0 cmp nil uninitialized-hash))\n  ([cmp & keys] (from-sequential cmp keys)))\n\n\n(defn sorted-set\n  ([] (sorted-set-by compare))\n  ([& keys] (from-sequential compare keys)))"]}