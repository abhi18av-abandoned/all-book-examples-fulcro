{"version":3,"sources":["com/fulcrologic/fulcro/algorithms/react_interop.cljc"],"mappings":";;;;;AAMA;;;;;;;;;;;;;;AAAA,AAAMA,AAaHC;AAbH,AAcE;AAAKC,AAAQC;AAAb,AACE,AAACC,AAAMC,AACLJ,AACA,AAACK,AAAkBJ,AACnBC;;AAJCD;AAAQC;;;;AAAAA;;AAARD,AAAQC;;;AAARD;AAAQC;AAARD,AAAQC;;;;;;;AAMf;;;;;;AAAA,AAAMI,AAKHC;AALH,AAME;AAAKC,AAAKP,AAAQC;AAAlB,AACE,AAAU,AAACO,AAAAA,AAAAA,AAAgBD,AAAAA;AAA3B;AAAA,AACE,AAAAE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AACF,AAAA,AAACT,AAAMC,AACLG,AAC6BC,AACAP,AAC7BC;;AAPCM,AAAKP;AAAQC;;;;AAAAA;;AAAbM,AAAKP,AAAQC;;;AAAbM;;AAAKP;AAAQC;AAAbM,AAAKP,AAAQC;;;;;;;AASpB;;;;;;;;;;;;;;;;;AAAA,AAAMW,AAgBHC,AAAoBC;AAhBvB,AAiBE,AAAU,AAACC,AAAsBF;AAAjC;AAAA,AACE,AAAAJ,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAA;AAAA,AAAA,AAAA;;;AACF,AAAMK,AAAuB,AAACC,AAAsBJ;AAC9CK,AAAuB;AAAKC;AAAL,AACE,AAAMC,AAAa,AAAA,AAACC,AAAYF;AAC1BG,AAAa,AAAA,AAACD,AAAYF;AADhC,AAEE,AAAAI,AAA0BH;AAA1BI,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAD;AAAAA;;AAAA,AAAAE,AAAAJ;;;AAAAK,AAAA,AAAAH,AAAAI;AAAA,AAAA,AAAAJ;AAAAA;;AAAA,AAAA,AAAAK,AAAAP,AAAA;;;AAAAQ,AAAA,AAAAN,AAAAO;AAAA,AAAA,AAAAP;AAAAA;;AAAA,AAAAQ,AAAAV;;;AAAAW,AAAA,AAAAT,AAAAU;AAAA,AAAA,AAAAV;AAAAA;;AAAAF;;;AAAA,AAAA,AAAAa,AAAAV;AAAAW,AAAAR;AAAAS,AAAAN;AAAAO,AAAAJ;AAAAK,AAAAhB;AAAAiB,AAAAb;AAAAc,AAAAX;AAAAY,AAAAT;AAAA,AAAA,AAAAR,AAAAc;;AAAA,AAAAX,AAAAY;;AAAA,AAAAT,AAAAU;;AAAA,AAAAP,AAAAQ;;AAAA,AAAA,AACE,AAAAC,AAAgBtB;AAAhBuB,AAAA,AAAA,AAA8C1B;AAA9C,AAAA,AAAAyB,AAAAC,AAAAD,AAAAC,AAAC7B,AAAAA,AAAAA;AADH,AAAA,AAAAmB,AAAAI;;AAAA,AAAAP,AAAAM;;AAAA,AAAAT,AAAAQ;;AAAA,AAAAX,AAAAU;;;AAE3BU,AAAuB,AAAMC,AAAiB,AAACjC,AAAAA,AAAAA,AAAII,AAAAA;AAA5B,AACE,AAACb,AAAoB0C;;AAPpD,AAQED","names":["com.fulcrologic.fulcro.algorithms.react-interop/react-factory","js-component-class","props","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","js/React.createElement","com.fulcrologic.fulcro.dom/convert-props","com.fulcrologic.fulcro.algorithms.react-interop/hoc-wrapper-factory","component-class","this","com.fulcrologic.fulcro.components/component?","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","com.fulcrologic.fulcro.algorithms.react-interop/hoc-factory","target-fulcro-class","hoc","com.fulcrologic.fulcro.components/component-class?","target-factory","com.fulcrologic.fulcro.components.computed_factory.cljs$core$IFn$_invoke$arity$1","target-factory-interop","js-props","parent","com.fulcrologic.fulcro.components.isoget.cljs$core$IFn$_invoke$arity$2","fulcro-props","parent__72530__auto__","r__72531__auto__","or__4131__auto__","com.fulcrologic.fulcro.components/*app*","com.fulcrologic.fulcro.components/any->app","d__72532__auto__","com.fulcrologic.fulcro.components/*depth*","com.fulcrologic.fulcro.components/depth","s__72533__auto__","com.fulcrologic.fulcro.components/*shared*","com.fulcrologic.fulcro.components.shared.cljs$core$IFn$_invoke$arity$1","p__72534__auto__","com.fulcrologic.fulcro.components/*parent*","*app*-orig-val__84978","*depth*-orig-val__84979","*shared*-orig-val__84980","*parent*-orig-val__84981","*app*-temp-val__84982","*depth*-temp-val__84983","*shared*-temp-val__84984","*parent*-temp-val__84985","G__84986","G__84987","factory","WrappedComponent"],"sourcesContent":["(ns com.fulcrologic.fulcro.algorithms.react-interop\n  (:require\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [taoensso.timbre :as log]))\n\n(defn react-factory\n  \"Returns a factory for raw JS React classes.\n\n  ```\n  (def ui-thing (react-factory SomeReactLibComponent))\n\n  ...\n  (defsc X [_ _]\n    (ui-thing {:value 1}))\n  ```\n\n  The returned function will accept CLJS maps as props (not optional) and then any number of children. The CLJS props\n  will be converted to js for interop. You may pass js props as an optimization.\"\n  [js-component-class]\n  (fn [props & children]\n    (apply js/React.createElement\n      js-component-class\n      (dom/convert-props props)\n      children)))\n\n(defn hoc-wrapper-factory\n  \"Creates a React factory `(fn [parent fulcro-props & children])` for a component that has had an HOC applied,\n  and passes Fulcro's parent/props through to 'fulcro_hoc$parent' and 'fulcro_hoc_childprops' in the js props.\n\n  See hoc-factory, which is more likely what you want, as it further wraps the parent context for proper interop.\"\n  [component-class]\n  (fn [this props & children]\n    (when-not (comp/component? this)\n      (log/error \"The first argument to an HOC factory MUST be the parent component instance.\"))\n    (apply js/React.createElement\n      component-class\n      #js {\"fulcro_hoc$parent\"     this\n           \"fulcro_hoc$childprops\" props}\n      children)))\n\n(defn hoc-factory\n  \"Returns a (fn [parent-component props & children] ...) that will render the target-fulcro-class, but as\n  wrapped by the `hoc` function.\n\n  Use this when you have a JS React pattern that tells you:\n\n  ```\n  var WrappedComponent = injectCrap(Component);\n  ```\n\n  where `injectCrap` is the `hoc` parameter to this function.\n\n  Any injected data will appear as `:injected-props` (a js map) in the computed parameter of the target Fulcro component.\n\n  You can this use the function returned from `hoc-factory` as a normal component factory in fulcro.\n  \"\n  [target-fulcro-class hoc]\n  (when-not (comp/component-class? target-fulcro-class)\n    (log/error \"hoc-factory MUST be used with a Fulcro Class\"))\n  (let [target-factory         (comp/computed-factory target-fulcro-class)\n        target-factory-interop (fn [js-props]\n                                 (let [parent       (comp/isoget js-props \"fulcro_hoc$parent\")\n                                       fulcro-props (comp/isoget js-props \"fulcro_hoc$childprops\")]\n                                   (comp/with-parent-context parent\n                                     (target-factory fulcro-props {:injected-props js-props}))))\n        factory                (let [WrappedComponent (hoc target-factory-interop)]\n                                 (hoc-wrapper-factory WrappedComponent))]\n    factory))\n"]}