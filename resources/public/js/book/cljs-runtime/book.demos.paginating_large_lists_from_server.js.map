{"version":3,"sources":["book/demos/paginating_large_lists_from_server.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","book.demos.paginating-large-lists-from-server/infinite-pages","env","input","map__89403","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","params","start","end","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","id","cljs.core.range.cljs$core$IFn$_invoke$arity$2","book.demos.paginating-large-lists-from-server/page-exists?","state-map","page-number","page-items","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/boolean","cljs.core/seq","book.demos.paginating-large-lists-from-server/init-page","cljs.core/assoc-in","book.demos.paginating-large-lists-from-server/set-current-page","book.demos.paginating-large-lists-from-server/clear-item","item-id","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","book.demos.paginating-large-lists-from-server/clear-page","page","item-idents","item-ids","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","s","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","book.demos.paginating-large-lists-from-server/gc-distant-pages","n","G__89428","Math/abs","cljs.core/keys","p__89432","map__89433","book.demos.paginating-large-lists-from-server/load-if-missing","app","state","cljs.core/deref","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","book.demos.paginating-large-lists-from-server/ListItem","book.demos.paginating-large-lists-from-server/goto-page","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__89435","p__89437","map__89438","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__89443","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.paginating-large-lists-from-server","js/book.demos.paginating-large-lists-from-server.ListItem","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89446","G__89447","G__89448","goog.object/get","obj89450","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","book.demos.paginating-large-lists-from-server/ui-list-item","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/make-state-map","map__89451","js/book.demos.paginating-large-lists-from-server.ListPage","obj89456","G__89457","G__89458","obj89460","book.demos.paginating-large-lists-from-server/ListPage","number","items","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.data-fetch/marker-table","status","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.data-fetch/loading?","book.demos.paginating-large-lists-from-server/ui-list-page","p__89461","map__89462","map__89464","js/book.demos.paginating-large-lists-from-server.LargeList","obj89485","G__89486","G__89487","obj89489","book.demos.paginating-large-lists-from-server/LargeList","current-page","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","map__89482","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","book.demos.paginating-large-lists-from-server/ui-list","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","map__89490","js/book.demos.paginating-large-lists-from-server.Root","obj89493","G__89494","G__89495","obj89497","book.demos.paginating-large-lists-from-server/Root","list","p__89498","map__89499","book.demos.paginating-large-lists-from-server/initialize"],"sourcesContent":["(ns book.demos.paginating-large-lists-from-server\n  (:require\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.wsscode.pathom.connect :as pc]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SERVER:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(pc/defresolver infinite-pages [env input]\n  {::pc/output [{:paginate/items [:item/id]}]}\n  (let [params (-> env :ast :params)\n        {:keys [start end]} params]\n    {:paginate/items (mapv (fn [id] {:item/id id}) (range start end))}))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn page-exists? [state-map page-number]\n  (let [page-items (get-in state-map [:page/by-number page-number :page/items])]\n    (boolean (seq page-items))))\n\n(defn init-page\n  \"An idempotent init function that just ensures enough of a page exists to make the UI work.\n   Doesn't affect the items.\"\n  [state-map page-number]\n  (assoc-in state-map [:page/by-number page-number :page/number] page-number))\n\n(defn set-current-page\n  \"Point the current list's current page to the correct page entity in the db (via ident).\"\n  [state-map page-number]\n  (assoc-in state-map [:list/by-id 1 :list/current-page] [:page/by-number page-number]))\n\n(defn clear-item\n  \"Removes the given item from the item table.\"\n  [state-map item-id] (update state-map :items/by-id dissoc item-id))\n\n(defn clear-page\n  \"Clear the given page (and associated items) from the app database.\"\n  [state-map page-number]\n  (let [page        (get-in state-map [:page/by-number page-number])\n        item-idents (:page/items page)\n        item-ids    (map second item-idents)]\n    (as-> state-map s\n      (update s :page/by-number dissoc page-number)\n      (reduce (fn [acc id] (update acc :items/by-id dissoc id)) s item-ids))))\n\n(defn gc-distant-pages\n  \"Clears loaded items from pages 5 or more steps away from the given page number.\"\n  [state-map page-number]\n  (reduce (fn [s n]\n            (if (< 4 (Math/abs (- page-number n)))\n              (clear-page s n)\n              s)) state-map (keys (:page/by-number state-map))))\n\n(declare ListItem)\n\n(defn load-if-missing [{:keys [app state] :as env} page-number]\n  (when-not (page-exists? @state page-number)\n    (let [start (inc (* 10 (dec page-number)))\n          end   (+ start 9)]\n      (df/load! app :paginate/items ListItem {:params {:start start :end end}\n                                              :marker :page\n                                              :target [:page/by-number page-number :page/items]}))))\n\n(m/defmutation goto-page [{:keys [page-number]}]\n  (action [{:keys [state] :as env}]\n    (load-if-missing env page-number)\n    (swap! state (fn [s]\n                   (-> s\n                     (init-page page-number)\n                     (set-current-page page-number)\n                     (gc-distant-pages page-number))))))\n\n(defsc ListItem [this {:keys [item/id]}]\n  {:query [:item/id :ui/fetch-state]\n   :ident [:items/by-id :item/id]}\n  (dom/li (str \"Item \" id)))\n\n(def ui-list-item (comp/factory ListItem {:keyfn :item/id}))\n\n(defsc ListPage [this {:keys [page/number page/items] :as props}]\n  {:initial-state {:page/number 1 :page/items []}\n   :query         [:page/number {:page/items (comp/get-query ListItem)}\n                   [df/marker-table :page]]\n   :ident         [:page/by-number :page/number]}\n  (let [status (get props [df/marker-table :page])]\n    (dom/div\n      (dom/p \"Page number \" number)\n      (if (df/loading? status)\n        (dom/div \"Loading...\")\n        (dom/ul (mapv ui-list-item items))))))\n\n(def ui-list-page (comp/factory ListPage {:keyfn :page/number}))\n\n(defsc LargeList [this {:keys [list/current-page]}]\n  {:initial-state (fn [params] {:list/current-page (comp/get-initial-state ListPage {})})\n   :query         [{:list/current-page (comp/get-query ListPage)}]\n   :ident         (fn [] [:list/by-id 1])}\n  (let [{:keys [page/number]} current-page]\n    (dom/div\n      (dom/button {:disabled (= 1 number) :onClick #(comp/transact! this `[(goto-page {:page-number ~(dec number)})])} \"Prior Page\")\n      (dom/button {:onClick #(comp/transact! this `[(goto-page {:page-number ~(inc number)})])} \"Next Page\")\n      (ui-list-page current-page))))\n\n(def ui-list (comp/factory LargeList))\n\n(defsc Root [this {:keys [pagination/list]}]\n  {:initial-state (fn [params] {:pagination/list (comp/get-initial-state LargeList {})})\n   :query         [{:pagination/list (comp/get-query LargeList)}]}\n  (dom/div (ui-list list)))\n\n(defn initialize\n  \"To be used as started-callback. Load the first page.\"\n  [{:keys [app]}]\n  (comp/transact! app `[(goto-page {:page-number 1})]))\n"]}