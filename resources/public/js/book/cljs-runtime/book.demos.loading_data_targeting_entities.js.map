{"version":3,"sources":["book/demos/loading_data_targeting_entities.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","p__89233","map__89234","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","book.demos.loading-data-targeting-entities/random-person-resolver","env","id","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__89237","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.loading-data-targeting-entities","js/book.demos.loading-data-targeting-entities.Person","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89241","G__89242","G__89243","goog.object/get","obj89245","com.fulcrologic.fulcro.components/configure-component!","book.demos.loading-data-targeting-entities/Person","name","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","book.demos.loading-data-targeting-entities/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","p__89250","map__89251","map__89253","js/book.demos.loading-data-targeting-entities.Pane","obj89259","G__89260","G__89261","obj89263","book.demos.loading-data-targeting-entities/Pane","person","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","book.demos.loading-data-targeting-entities/ui-pane","p__89264","map__89265","map__89269","js/book.demos.loading-data-targeting-entities.Panel","obj89273","G__89274","G__89275","obj89277","book.demos.loading-data-targeting-entities/Panel","left-pane","right-pane","params","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","book.demos.loading-data-targeting-entities/ui-panel","book.demos.loading-data-targeting-entities/load-random-person","component","where","load-target","G__89281","cljs.core/Keyword","js/Error","com.fulcrologic.fulcro.algorithms.data_targeting.multiple_targets.cljs$core$IFn$_invoke$arity$variadic","person-ident","cljs.core/rand-int","com.fulcrologic.fulcro.data_fetch.load_BANG_.cljs$core$IFn$_invoke$arity$4","map__89284","js/book.demos.loading-data-targeting-entities.Root","obj89287","G__89288","G__89289","obj89291","book.demos.loading-data-targeting-entities/Root","panel"],"sourcesContent":["(ns book.demos.loading-data-targeting-entities\n  (:require\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.components :as comp]\n    [com.fulcrologic.fulcro.algorithms.data-targeting :as targeting]\n    [com.wsscode.pathom.connect :as pc]))\n\n;; SERVER\n\n(pc/defresolver random-person-resolver [env {:keys [id]}]\n  {::pc/input [:person/id]\n   ::pc/output [:person/name]}\n  {:person/id id :person/name (str \"Person \" id)})\n\n;; CLIENT\n\n(defsc Person [this {:keys [person/name]}]\n  {:query [:db/id :person/name]\n   :ident [::person-by-id :db/id]}\n  (dom/div (str \"Hi, I'm \" name)))\n\n(def ui-person (comp/factory Person {:keyfn :db/id}))\n\n(defsc Pane [this {:keys [db/id pane/person] :as props}]\n  {:query         [:db/id {:pane/person (comp/get-query Person)}]\n   :initial-state (fn [{:keys [id]}] {:db/id id :pane/person nil})\n   :ident         [:pane/by-id :db/id]}\n\n  (dom/div\n    (dom/h4 (str \"Pane \" id))\n    (if person\n      (ui-person person)\n      (dom/div \"No person loaded...\"))))\n\n(def ui-pane (comp/factory Pane {:keyfn :db/id}))\n\n(defsc Panel [this {:keys [panel/left-pane panel/right-pane]}]\n  {:query         [{:panel/left-pane (comp/get-query Pane)}\n                   {:panel/right-pane (comp/get-query Pane)}]\n   :initial-state (fn [params] {:panel/left-pane  (comp/get-initial-state Pane {:id :left})\n                                :panel/right-pane (comp/get-initial-state Pane {:id :right})})\n   :ident         (fn [] [:PANEL :only-one])}\n  (dom/div\n    (ui-pane left-pane)\n    (ui-pane right-pane)))\n\n(def ui-panel (comp/factory Panel {:keyfn :db/id}))\n\n(defn load-random-person [component where]\n  (let [load-target  (case where\n                       (:left :right) [:pane/by-id where :pane/person]\n                       :both (targeting/multiple-targets\n                               [:pane/by-id :left :pane/person]\n                               [:pane/by-id :right :pane/person]))\n\n        person-ident [::person-by-id (rand-int 100)]]\n    (df/load! component person-ident Person {:target load-target :marker false})))\n\n(defsc Root [this {:keys [root/panel] :as props}]\n  {:query         [{:root/panel (comp/get-query Panel)}]\n   :initial-state (fn [params] {:root/panel (comp/get-initial-state Panel {})})}\n  (dom/div\n    (ui-panel panel)\n    (dom/button {:onClick #(load-random-person this :left)} \"Load into Left\")\n    (dom/button {:onClick #(load-random-person this :right)} \"Load into Right\")\n    (dom/button {:onClick #(load-random-person this :both)} \"Load into Both\")))\n\n\n"]}