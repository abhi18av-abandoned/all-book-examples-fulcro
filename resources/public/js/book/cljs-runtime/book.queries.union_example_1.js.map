{"version":3,"sources":["book/queries/union_example_1.cljs"],"mappings":"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","names":["book.queries.union-example-1/person?","props","cljs.core/contains?","book.queries.union-example-1/place?","book.queries.union-example-1/thing?","book.queries.union-example-1/item-ident","taoensso.timbre._log_BANG_.cljs$core$IFn$_invoke$arity$10","taoensso.timbre/*config*","cljs.core/Delay","book.queries.union-example-1/item-key","book.queries.union-example-1/make-person","id","n","book.queries.union-example-1/make-place","book.queries.union-example-1/make-thing","options__72617__auto__","p__85598","map__85599","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","params","com.fulcrologic.fulcro.components/make-state-map","com.fulcrologic.fulcro.components/wrapped-render","map__85601","com.fulcrologic.fulcro.components/props","js/book","js/book.queries","js/book.queries.union-example-1","js/book.queries.union-example-1.PersonDetail","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85604","G__85605","G__85606","goog.object/get","obj85608","com.fulcrologic.fulcro.components/configure-component!","book.queries.union-example-1/PersonDetail","this","name","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__85609","map__85610","map__85612","js/book.queries.union-example-1.PlaceDetail","obj85615","G__85616","G__85617","obj85619","book.queries.union-example-1/PlaceDetail","p__85620","map__85621","map__85623","js/book.queries.union-example-1.ThingDetail","obj85626","G__85627","G__85628","obj85630","book.queries.union-example-1/ThingDetail","label","p__85631","map__85632","map__85634","map__85635","com.fulcrologic.fulcro.components.get_computed.cljs$core$IFn$_invoke$arity$1","js/book.queries.union-example-1.PersonListItem","obj85640","G__85641","G__85642","obj85644","book.queries.union-example-1/PersonListItem","onSelect","computed","com.fulcrologic.fulcro.components/force-children","G__85638","com.fulcrologic.fulcro.dom/macro-create-element*","book.queries.union-example-1/ui-person","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","p__85645","map__85646","map__85648","map__85649","js/book.queries.union-example-1.PlaceListItem","obj85654","G__85655","G__85656","obj85658","book.queries.union-example-1/PlaceListItem","G__85652","book.queries.union-example-1/ui-place","p__85659","map__85660","map__85662","map__85663","js/book.queries.union-example-1.ThingListItem","obj85668","G__85669","G__85670","obj85672","book.queries.union-example-1/ThingListItem","G__85666","book.queries.union-example-1/ui-thing","page__85300__auto__","cljs.core/first","com.fulcrologic.fulcro.components.get_ident.cljs$core$IFn$_invoke$arity$2","G__85674","cljs.core/Keyword","fexpr__85675","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","fexpr__85676","fexpr__85679","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","js/book.queries.union-example-1.ItemDetail-Union","book.queries.union-example-1/ItemDetail-Union","obj85681","G__85682","G__85683","obj85685","book.queries.union-example-1/ui-ItemDetail-Union","computed__85340__auto__","props__85341__auto__","props-with-computed__85342__auto__","com.fulcrologic.fulcro.components/computed","js/book.queries.union-example-1.ItemDetail","obj85687","G__85688","G__85689","obj85691","book.queries.union-example-1/ItemDetail","book.queries.union-example-1/ui-item-detail","js/book.queries.union-example-1.ItemUnion","obj85693","G__85694","G__85695","obj85697","book.queries.union-example-1/ItemUnion","book.queries.union-example-1/ui-item-union","p__85698","map__85699","map__85701","map__85702","js/book.queries.union-example-1.ItemList","obj85710","G__85711","G__85712","obj85714","book.queries.union-example-1/ItemList","items","p","cljs.core.map.cljs$core$IFn$_invoke$arity$2","i","G__85705","book.queries.union-example-1/ui-item-list","map__85717","js/book.queries.union-example-1.Root","obj85725","G__85726","G__85727","obj85729","book.queries.union-example-1/Root","item-list","item-detail","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.routing.legacy_ui_routers.routing_tree.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.routing.legacy-ui-routers/make-route","com.fulcrologic.fulcro.routing.legacy-ui-routers/router-instruction","showDetail","p__85719","vec__85720","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","kind","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","G__85723"],"sourcesContent":["(ns book.queries.union-example-1\n  (:require\n    [com.fulcrologic.fulcro.dom :as dom :refer [div table td tr th tbody]]\n    [com.fulcrologic.fulcro.routing.legacy-ui-routers :as r :refer [defsc-router]]\n    [book.elements :as ele]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [taoensso.timbre :as log]))\n\n(defn person? [props] (contains? props :person/id))\n(defn place? [props] (contains? props :place/id))\n(defn thing? [props] (contains? props :thing/id))\n\n(defn item-ident\n  \"Generate an ident from a person, place, or thing.\"\n  [props]\n  (cond\n    (person? props) [:person/id (:person/id props)]\n    (place? props) [:place/id (:place/id props)]\n    (thing? props) [:thing/id (:thing/id props)]\n    :else (log/error \"Cannot generate a valid ident. Invalid props.\" props)))\n\n(defn item-key\n  \"Generate a distinct react key for a person, place, or thing\"\n  [props] (str (item-ident props)))\n\n(defn make-person [id n] {:person/id id :person/name n})\n(defn make-place [id n] {:place/id id :place/name n})\n(defn make-thing [id n] {:thing/id id :thing/label n})\n\n(defsc PersonDetail [this {:person/keys [id name] :as props}]\n  ; defsc-router expects there to be an initial state for each possible target. We'll cause this to be a \"no selection\"\n  ; state so that the detail screen that starts out will show \"Nothing selected\". We initialize all three in case\n  ; we later re-order them in the defsc-router.\n  {:ident         (fn [] (item-ident props))\n   :query         [:person/id :person/name]\n   :initial-state {:person/id :no-selection}}\n  (dom/div\n    (if (= id :no-selection)\n      \"Nothing selected\"\n      (str \"Details about person \" name))))\n\n(defsc PlaceDetail [this {:place/keys [id name] :as props}]\n  {:ident         (fn [] (item-ident props))\n   :query         [:place/id :place/name]\n   :initial-state {:place/id :no-selection}}\n  (dom/div\n    (if (= id :no-selection)\n      \"Nothing selected\"\n      (str \"Details about place \" name))))\n\n(defsc ThingDetail [this {:thing/keys [id label] :as props}]\n  {:ident         (fn [] (item-ident props))\n   :query         [:thing/id :thing/label]\n   :initial-state {:thing/id :no-selection}}\n  (dom/div\n    (if (= id :no-selection)\n      \"Nothing selected\"\n      (str \"Details about thing \" label))))\n\n(defsc PersonListItem [this\n                       {:person/keys [id name] :as props}\n                       {:keys [onSelect] :as computed}]\n  {:ident (fn [] (item-ident props))\n   :query [:person/id :person/name]}\n  (dom/li {:onClick #(onSelect (item-ident props))}\n    (dom/a {} (str \"Person \" id \" \" name))))\n\n(def ui-person (comp/factory PersonListItem {:keyfn item-key}))\n\n(defsc PlaceListItem [this {:place/keys [id name] :as props} {:keys [onSelect] :as computed}]\n  {:ident (fn [] (item-ident props))\n   :query [:place/id :place/name]}\n  (dom/li {:onClick #(onSelect (item-ident props))}\n    (dom/a {} (str \"Place \" id \" : \" name))))\n\n(def ui-place (comp/factory PlaceListItem {:keyfn item-key}))\n\n(defsc ThingListItem [this {:thing/keys [id label] :as props} {:keys [onSelect] :as computed}]\n  {:ident (fn [] (item-ident props))\n   :query [:thing/id :thing/label]}\n  (dom/li {:onClick #(onSelect (item-ident props))}\n    (dom/a {} (str \"Thing \" id \" : \" label))))\n\n(def ui-thing (comp/factory ThingListItem item-key))\n\n(defsc-router ItemDetail [this props]\n  {:router-id      :detail-router\n   :ident          (fn [] (item-ident props))\n   :default-route  PersonDetail\n   :router-targets {:person/id PersonDetail\n                    :place/id  PlaceDetail\n                    :thing/id  ThingDetail}}\n  (dom/div \"No route\"))\n\n(def ui-item-detail (comp/factory ItemDetail))\n\n(defsc ItemUnion [this props]\n  {:ident (fn [] (item-ident props))\n   :query (fn [] {:person/id (comp/get-query PersonListItem)\n                  :place/id  (comp/get-query PlaceListItem)\n                  :thing/id  (comp/get-query ThingListItem)})}\n  (cond\n    (person? props) (ui-person props)\n    (place? props) (ui-place props)\n    (thing? props) (ui-thing props)\n    :else (dom/div \"Invalid ident used in app state.\")))\n\n(def ui-item-union (comp/factory ItemUnion {:keyfn item-key}))\n\n(defsc ItemList [this {:keys [items]} {:keys [onSelect]}]\n  {\n   :initial-state (fn [p]\n                    ; These would normally be loaded...but for demo purposes we just hand code a few\n                    {:items [(make-person 1 \"Tony\")\n                             (make-thing 2 \"Toaster\")\n                             (make-place 3 \"New York\")\n                             (make-person 4 \"Sally\")\n                             (make-thing 5 \"Pillow\")\n                             (make-place 6 \"Canada\")]})\n   :ident         (fn [] [:lists/id :singleton])\n   :query         [{:items (comp/get-query ItemUnion)}]}\n  (dom/ul :.ui.list\n    (map (fn [i] (ui-item-union (comp/computed i {:onSelect onSelect}))) items)))\n\n(def ui-item-list (comp/factory ItemList))\n\n(defsc Root [this {:keys [item-list item-detail]}]\n  {:query         [{:item-list (comp/get-query ItemList)}\n                   {:item-detail (comp/get-query ItemDetail)}]\n   :initial-state (fn [p] (merge\n                            (r/routing-tree\n                              (r/make-route :detail [(r/router-instruction :detail-router [:param/kind :param/id])]))\n                            {:item-list   (comp/get-initial-state ItemList nil)\n                             :item-detail (comp/get-initial-state ItemDetail nil)}))}\n  (let [; This is the only thing to do: Route the to the detail screen with the given route params!\n        showDetail (fn [[kind id]]\n                     (comp/transact! this `[(r/route-to {:handler :detail :route-params {:kind ~kind :id ~id}})]))]\n    ; devcards, embed in iframe so we can use bootstrap css easily\n    (div {:key \"example-frame-key\"}\n      (dom/style \".boxed {border: 1px solid black}\")\n      (table :.ui.table {}\n        (tbody\n          (tr\n            (th \"Items\")\n            (th \"Detail\"))\n          (tr\n            (td (ui-item-list (comp/computed item-list {:onSelect showDetail})))\n            (td (ui-item-detail item-detail))))))))\n"]}