{"version":3,"sources":["com/wsscode/pathom/trace.cljc"],"mappings":"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","names":["com.wsscode.pathom.trace/now","cljs.core/inst-ms","js/Date","com.wsscode.pathom.trace/trace","env","event","temp__5733__auto__","event-trace","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.core/any?","cljs.spec.alpha/cat-impl","cljs.core/map?","cljs.spec.alpha/map-spec-impl","G__59735","var_args","G__59750","com.wsscode.pathom.trace/trace-enter","js/Error","id","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","trace-id","G__59753","com.wsscode.pathom.trace/trace-leave","com.wsscode.pathom.trace/live-trace!","trace-atom","cljs.core/add-watch","_","n","evt","cljs.core/peek","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.trace/compute-durations","trace","leave-items","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","p1__59763#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","initial-time","cljs.core/first","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","e","p__59764","map__59765","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","timestamp","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","map__59767","et","leave","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","js/com","js/com.wsscode","js/com.wsscode.pathom","js/com.wsscode.pathom.trace","js/com.wsscode.pathom.trace.trace-tree-collect","method-table__4613__auto__","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__59769","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.trace/trace-tree-collect","_x","row","x","com.wsscode.pathom.trace/tree-assoc-detail","keys","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","cljs.core.into.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.trace/trace-style","style","p__59772","map__59773","com.wsscode.pathom.trace/tree-assoc-key-detail","key","com.wsscode.pathom.trace/trace->tree*","paths","path","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__59780","map__59781","relative-timestamp","G__59783","cljs.core/Keyword","p1__59775#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","next-path","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","cljs.core/assoc-in","cljs.core.update.cljs$core$IFn$_invoke$arity$4","count","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.wsscode.pathom.trace/trace->tree","cljs.core/group-by","com.wsscode.pathom.trace/compute-details-duration","res","p1__59797#","cljs.core/vec","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","last-detail","last-ts","p1__59798#","x__4219__auto__","y__4220__auto__","or__4131__auto__","com.wsscode.pathom.trace/normalize-tree-details","trace-tree","clojure.walk/postwalk","G__59799","p__59801","map__59802","com.wsscode.pathom.trace/compute-d3-tree","duration","children","details","G__59804","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p__59808","map__59809","p__59811","vec__59812","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","k","v","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/name","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/second","com.wsscode.pathom.trace/trace->viz","com.wsscode.pathom.trace/wrap-parser-trace","parser","tx","cljs.core/some","trace*","env'","parser-trace","com.wsscode.pathom.trace.trace_enter.cljs$core$IFn$_invoke$arity$2","res__59683__auto__","com.wsscode.common.async-cljs/chan?","c__52131__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__52132__auto__","switch__52035__auto__","state_59845","state_val_59846","statearr-59848","inst_59843","cljs.core.async.impl.ioc-helpers/return-chan","inst_59823","statearr-59849","cljs.core.async.impl.ioc-helpers/process-exception","cljs.core.async.impl.ioc-helpers/add-exception-frame","cljs.core.async.impl.ioc-helpers/take!","inst_59829","inst_59830","com.wsscode.common.async-cljs/throw-err","inst_59831","inst_59832","inst_59833","cljs.core/PersistentHashMap","inst_59834","inst_59835","inst_59836","inst_59837","inst_59838","inst_59839","cljs.core/deref","inst_59840","inst_59841","statearr-59854","statearr-59855","statearr-59856","state-machine__52036__auto__","ret-value__52037__auto__","result__52038__auto__","cljs.core/keyword-identical?","e59857","js/Object","ex__52039__auto__","statearr-59858","state__52133__auto__","statearr-59859","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","com.wsscode.pathom.trace.trace_leave.cljs$core$IFn$_invoke$arity$3","com.wsscode.pathom.trace/trace-plugin"],"sourcesContent":["(ns com.wsscode.pathom.trace\n  #?(:cljs (:require-macros [com.wsscode.pathom.trace]))\n  (:require [clojure.spec.alpha :as s]\n            [#?(:clj  com.wsscode.common.async-clj\n                :cljs com.wsscode.common.async-cljs)\n             :refer [let-chan]]\n            [clojure.walk :as walk]))\n\n(defn now []\n  #?(:clj  (System/currentTimeMillis)\n     :cljs (inst-ms (js/Date.))))\n\n(defn trace [env event]\n  (if-let [event-trace (get env ::trace*)]\n    (swap! event-trace conj\n      (assoc event\n        :com.wsscode.pathom.core/path (:com.wsscode.pathom.core/path env [])\n        ::timestamp (now)))))\n\n(s/fdef trace\n  :args (s/cat :env map? :event (s/keys :opt [::event])))\n\n(defn trace-enter\n  ([env event]\n   (let [id (gensym \"pathom-trace-\")]\n     (trace env (assoc event ::direction ::enter ::id id))\n     id))\n  ([env event trace-id]\n   (trace env (assoc event ::direction ::enter ::id trace-id))\n   trace-id))\n\n(defn trace-leave\n  ([env trace-id]\n   (trace env {::direction ::leave ::id trace-id}))\n  ([env trace-id event]\n   (trace env (assoc event ::direction ::leave ::id trace-id))\n   trace-id))\n\n(defmacro tracing [env event & body]\n  `(if (get ~env ::trace*)\n     (let [trace-id# (trace-enter ~env ~event)\n           res#      (do ~@body)]\n       (trace-leave ~env trace-id# ~event)\n       res#)\n     (do ~@body)))\n\n(defn live-trace! [trace-atom]\n  (add-watch trace-atom :live\n    (fn [_ _ _ n]\n      (let [evt (peek n)]\n        (print (str (pr-str [(::event evt) (dissoc evt ::event)]) \"\\n\"))))))\n\n(defn compute-durations [trace]\n  (let [leave-items  (into {} (comp (filter (comp #(= ::leave %) ::direction))\n                                    (map (juxt ::id identity)))\n                           trace)\n\n        initial-time (::timestamp (first trace))]\n\n    (into []\n          (comp (remove (fn [e] e (= ::leave (::direction e))))\n                (map (fn [{::keys [id timestamp] :as e}]\n                       (let [e (assoc e ::relative-timestamp (- timestamp initial-time))]\n                         (if-let [{et ::timestamp :as leave} (get leave-items id)]\n                           (-> e\n                               (assoc\n                                 ::timestamp-leave et\n                                 ::duration (- et timestamp))\n                               (merge (dissoc leave ::timestamp))\n                               (dissoc ::id ::direction))\n                           e)))))\n          trace)))\n\n(defmulti trace-tree-collect (fn [_x row] (::event row)))\n\n(defmethod trace-tree-collect :default [x _] x)\n\n(defn tree-assoc-detail [row x keys]\n  (update-in x [:response ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace-style [row style]\n  (assoc row ::style style))\n\n(defn tree-assoc-key-detail [{:keys [key] :as row} x keys]\n  (update-in x [:response ::children key ::details] (fnil conj [])\n    (select-keys row (into [::event ::label ::relative-timestamp ::duration ::style] keys))))\n\n(defn trace->tree* [paths path]\n  (-> (reduce\n        (fn [x {::keys [event relative-timestamp]\n                :keys  [key]\n                :as    row}]\n          (case event\n            (:com.wsscode.pathom.parser/parse-loop :com.wsscode.pathom.core/trace-plugin)\n            (update x :response #(merge (select-keys row [::relative-timestamp ::duration :com.wsscode.pathom.core/path]) %))\n\n            :com.wsscode.pathom.parser/process-key\n            (let [next-path (conj path key)]\n              (if (contains? (:visited x) next-path)\n                x\n                (-> x\n                    (assoc-in [:response :com.wsscode.pathom.core/path] path)\n                    (assoc-in [:response ::children key]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [::relative-timestamp :key]))\n                          (assoc :com.wsscode.pathom.core/path next-path)))\n                    (update :visited conj next-path))))\n\n            :com.wsscode.pathom.core/join-seq\n            (let [count (:com.wsscode.pathom.core/seq-count row)]\n              (reduce\n                (fn [x i]\n                  (let [next-path (conj path i)]\n                    (assoc-in x [:response ::children i]\n                      (-> (merge (trace->tree* paths next-path) (select-keys row [::relative-timestamp :key]) {:key i})\n                          (assoc :com.wsscode.pathom.core/path next-path)))))\n                x\n                (range count)))\n\n            (:com.wsscode.pathom.parser/async-return :com.wsscode.pathom.parser/skip-wait-key :com.wsscode.pathom.parser/call-read\n              :com.wsscode.pathom.parser/skip-resolved-key :com.wsscode.pathom.parser/external-wait-key)\n            (update-in x [:response ::children key ::details] (fnil conj []) (select-keys row [::event ::label ::style ::relative-timestamp :key]))\n\n            :com.wsscode.pathom.parser/max-iterations-reached\n            (update-in x [:response ::children key ::details] (fnil conj []) (select-keys row [::event ::label ::style ::relative-timestamp :com.wsscode.pathom.parser/max-key-iterations]))\n\n            (:com.wsscode.pathom.parser/process-pending :com.wsscode.pathom.parser/reset-loop\n              :com.wsscode.pathom.parser/flush-watchers-loop ::trace-done)\n            (update-in x [:response ::details] (fnil conj []) (select-keys row [::event ::label ::style ::relative-timestamp :com.wsscode.pathom.parser/provides :com.wsscode.pathom.parser/merge-result?\n                                                                                :com.wsscode.pathom.parser/loop-keys]))\n\n            :com.wsscode.pathom.parser/merge-result\n            (reduce\n              (fn [x key]\n                (update-in x [:response ::children key ::details] (fnil conj []) (select-keys row [::event ::label ::style ::relative-timestamp])))\n              x\n              (keys (:com.wsscode.pathom.parser/response-value row)))\n\n            (:com.wsscode.pathom.connect/compute-plan :com.wsscode.pathom.connect/waiting-resolver :com.wsscode.pathom.connect/schedule-resolver\n              :com.wsscode.pathom.connect/call-resolver-with-cache :com.wsscode.pathom.connect/call-resolver :com.wsscode.pathom.core/parallel-sequence-loop\n              :com.wsscode.pathom.connect/call-resolver-batch :com.wsscode.pathom.connect/batch-items-ready :com.wsscode.pathom.connect/batch-result-error :com.wsscode.pathom.connect/batch-result-ready\n              :com.wsscode.pathom.connect/merge-resolver-response :com.wsscode.pathom.connect/resolver-error :com.wsscode.pathom.connect/invalid-resolve-response)\n            (update-in x [:response ::details] (fnil conj [])\n              (select-keys row [::event ::label ::style ::relative-timestamp ::duration :com.wsscode.pathom.connect/waiting-key :com.wsscode.pathom.connect/input-data\n                                :com.wsscode.pathom.parser/provides :com.wsscode.pathom.connect/sym :com.wsscode.pathom.core/error :com.wsscode.pathom.connect/items-count :com.wsscode.pathom.connect/plan :key]))\n\n            :com.wsscode.pathom.parser/value-return\n            (-> x\n                (update-in [:response ::children key ::details] (fnil conj []) (select-keys row [::event ::label ::style ::relative-timestamp]))\n                (update-in [:response ::children key] assoc ::duration (- relative-timestamp (get-in x [:response ::children key ::relative-timestamp]))))\n\n            (trace-tree-collect x row)))\n        {:visited  #{}\n         :response {}}\n        (get paths path))\n      :response))\n\n(defn trace->tree [trace]\n  (let [paths (->> trace compute-durations (group-by :com.wsscode.pathom.core/path))]\n    (trace->tree* paths [])))\n\n(defn compute-details-duration [x]\n  (let [res         (update x ::details #(vec (sort-by ::relative-timestamp %)))\n        last-detail (peek (::details res))\n        last-ts     (+ (::duration last-detail 0) (::relative-timestamp last-detail 0))]\n    (update res ::duration #(max (or % 0) (- last-ts (::relative-timestamp res 0))))))\n\n(defn normalize-tree-details [trace-tree]\n  (walk/postwalk\n    (fn [x]\n      (cond-> x\n        (and (map? x) (contains? x ::details))\n        (compute-details-duration)))\n    trace-tree))\n\n(defn compute-d3-tree [{::keys                        [relative-timestamp duration children details]\n                        :com.wsscode.pathom.core/keys [path]\n                        :keys                         [key]}]\n  (cond-> {:start    relative-timestamp\n           :path     path\n           :duration (or duration 0)\n           :details  (mapv (fn [{::keys [relative-timestamp duration event]\n                                 :as    row}]\n                             (let [details (->> (dissoc row ::relative-timestamp ::timestamp ::duration ::event)\n                                                (into {} (map (fn [[k v]] [(keyword (name k)) v]))))]\n                               (merge {:event    (name event)\n                                       :duration (or duration 0)\n                                       :start    relative-timestamp}\n                                      details)))\n                       details)}\n    key (assoc :name (str key))\n    children (assoc :children\n                    (into [] (map (comp compute-d3-tree second) children)))))\n\n(defn trace->viz [trace]\n  (-> trace trace->tree normalize-tree-details compute-d3-tree\n      (assoc :hint \"Query\")))\n\n(defn wrap-parser-trace [parser]\n  (fn wrap-parser-trace-internal [env tx]\n    (if (some #{:com.wsscode.pathom/trace} tx)\n      (let [trace*       (or (::trace* env) (atom []))\n            env'         (assoc env ::trace* trace*)\n            parser-trace (trace-enter env' {::event ::trace-plugin})]\n        (let-chan [res (parser env' tx)]\n          (trace-leave env' parser-trace {::event ::trace-plugin})\n          (trace env' {::event ::trace-done})\n          (assoc res :com.wsscode.pathom/trace (trace->viz @trace*))))\n      (parser env tx))))\n\n(def trace-plugin\n  {:com.wsscode.pathom.core/wrap-parser\n   wrap-parser-trace\n\n   :com.wsscode.pathom.connect/register\n   [{:com.wsscode.pathom.connect/sym     `trace\n     :com.wsscode.pathom.connect/output  [:com.wsscode.pathom/trace]\n     :com.wsscode.pathom.connect/resolve (fn [env _] {:com.wsscode.pathom/trace nil})}]})\n"]}