{"version":3,"sources":["book/demos/parallel_vs_sequential_loading.cljs"],"mappings":"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","names":["com.wsscode.pathom.connect/resolver","book.demos.parallel-vs-sequential-loading/long-query-resolver","_","options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","map__89466","com.fulcrologic.fulcro.components/props","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","js/book","js/book.demos","js/book.demos.parallel-vs-sequential-loading","js/book.demos.parallel-vs-sequential-loading.Child","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89469","G__89470","G__89471","goog.object/get","obj89473","com.fulcrologic.fulcro.components/configure-component!","book.demos.parallel-vs-sequential-loading/Child","id","name","long-query","com.fulcrologic.fulcro.data-fetch/marker-table","status","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom/macro-create-element*","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.data-fetch/load-field!","com.fulcrologic.fulcro.data-fetch/loading?","book.demos.parallel-vs-sequential-loading/ui-child","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","map__89474","js/book.demos.parallel-vs-sequential-loading.Root","obj89477","G__89478","G__89479","obj89481","book.demos.parallel-vs-sequential-loading/Root","children","params","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.demos.parallel-vs-sequential-loading\n  (:require\n    [com.fulcrologic.fulcro.data-fetch :as df]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.wsscode.pathom.connect :as pc]\n    [taoensso.timbre :as log]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; SERVER:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(pc/defresolver long-query-resolver [_ _]\n  {::pc/output [:background/long-query]}\n  {:background/long-query 42})\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; CLIENT:\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defsc Child [this {:keys [id name background/long-query] :as props}]\n  {:query (fn [] [:id :name :background/long-query [df/marker-table '_]])\n   :ident [:background.child/by-id :id]}\n  (let [status (get-in props [df/marker-table [:fetching id]])]\n    (dom/div {:style {:display \"inline\" :float \"left\" :width \"200px\"}}\n      (dom/button {:onClick #(df/load-field! this :background/long-query {:parallel true\n                                                                          :marker   [:fetching id]})} \"Load stuff parallel\")\n      (dom/button {:onClick #(df/load-field! this :background/long-query {:marker [:fetching id]})} \"Load stuff sequential\")\n      (dom/div\n        name\n        (if (df/loading? status)\n          (dom/span \"Loading...\")\n          (dom/span long-query))))))\n\n(def ui-child (comp/factory Child {:keyfn :id}))\n\n(defsc Root [this {:keys [children] :as props}]\n  ; cheating a little...raw props used for child, instead of embedding them there.\n  {:initial-state (fn [params] {:children [{:id 1 :name \"A\"} {:id 2 :name \"B\"} {:id 3 :name \"C\"}]})\n   :query         [{:children (comp/get-query Child)}]}\n  (dom/div\n    (mapv ui-child children)\n    (dom/br {:style {:clear \"both\"}}) (dom/br)))\n\n"]}