{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","x__4433__auto__","m__4434__auto__","datascript.db/datom-tx","goog/typeOf","m__4431__auto__","cljs.core/missing-protocol","datascript.db/datom-added","datascript.db/IDatom","this","cljs.core/PROTOCOL_SENTINEL","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","datascript.db/hash-datom","o","and__4120__auto__","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__57579","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/List","G__57580","G__57582","G__57583","G__57584","G__57585","cljs.core/Keyword","datascript.db.datom.cljs$core$IFn$_invoke$arity$5","datascript.db/datom-from-reader","vec","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","datascript.db/cmp","o1","o2","cljs.core/compare","datascript.db/cmp-datoms-eavt","d1","d2","c__57002__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","cljs.core/-compare","goog.array/defaultCompare","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into.cljs$core$IFn$_invoke$arity$2","first-a","cljs.core/first","first-b","diff","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/next","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript.db/-datoms","datascript.db/-seek-datoms","datascript.db/-rseek-datoms","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript.db/-schema","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__4385__auto__","k__4386__auto__","this__4387__auto__","k57589","else__4388__auto__","G__57593","schema","eavt","aevt","avet","max-eid","max-tx","rschema","hash","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__57594","vec__57595","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__57588","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__57598","coll__4382__auto__","cljs.core/hash-unordered-coll","this57590","other57591","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","this__4392__auto__","k__4393__auto__","pred__57599","cljs.core/keyword-identical?","expr__57600","G__57602","G__57603","G__57604","G__57605","G__57606","G__57607","G__57608","G__57609","G__57610","G__57611","G__57612","G__57613","G__57614","G__57615","G__57616","G__57617","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","datascript.db/DB","this__4428__auto__","writer__4429__auto__","G__57592","extmap__4424__auto__","G__57618","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-seq","cljs.core/-rseq","G__57619","datascript.db/empty-db","w","datascript.db/pr-db","key","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","fexpr__57622","vec__57623","me.tonsky.persistent_sorted_set.slice.cljs$core$IFn$_invoke$arity$3","datascript.db.datom.cljs$core$IFn$_invoke$arity$4","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","datascript.db/indexing?","cs","cljs.core.get.cljs$core$IFn$_invoke$arity$2","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice.cljs$core$IFn$_invoke$arity$3","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","G__57620","G__57621","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","cljs.core/native-satisfies?","k57635","G__57639","unfiltered-db","pred","p__57640","vec__57641","G__57634","fexpr__57644","this57636","other57637","pred__57645","expr__57646","G__57648","G__57649","G__57650","G__57651","G__57652","G__57653","datascript.db/FilteredDB","G__57638","G__57654","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","_","datascript.db/attr->properties","G__57655","G__57656","datascript.db/rschema","cljs.core/reduce-kv","m","keys->values","value","prop","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__57657","chunk__57658","count__57659","i__57660","vec__57667","temp__5735__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__57670","kv","comp?","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__57674","datascript.db.empty_db.cljs$core$IFn$_invoke$arity$1","cljs.core/map?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","me.tonsky.persistent_sorted_set.sorted_set_by.cljs$core$IFn$_invoke$arity$1","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","datascript.db/init-max-eid","or__4131__auto__","G__57676","datascript.db/init-db","datoms","datascript.db.init_db.cljs$core$IFn$_invoke$arity$2","indexed","arr","G__57677","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/max","datascript.db/equiv-db-index","xs","ys","cljs.core/deref","h","cljs.core/reset!","p__57678","map__57679","cljs.core/hash-map","datascript.db/db-from-reader","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__57681","vec__57682","t","default-e","default-tx","G__57685","G__57686","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__57687","vec__57688","c0","c1","c2","c3","G__57691","k57693","G__57697","db-before","db-after","tx-data","tempids","tx-meta","p__57698","vec__57699","G__57692","fexpr__57702","this57694","other57695","pred__57703","expr__57704","G__57706","G__57707","G__57708","G__57709","G__57710","G__57711","G__57712","G__57713","G__57714","G__57715","datascript.db/TxReport","G__57696","G__57716","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/entid","eid","cljs.core/sequential?","vec__57717","cljs.core/array?","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","datascript.db/validate-datom","datom","temp__5739__auto__","found","datascript.db/validate-eid","at","datascript.db/validate-val","datascript.db/current-tx","report","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/advance-max-eid","G__57720","G__57722","datascript.db/allocate-eid","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","G__57723","cljs.core/assoc-in","datascript.db/with-datom","indexing?","G__57724","cljs.core.update_in.cljs$core$IFn$_invoke$arity$5","me.tonsky.persistent-sorted-set/conj","temp__5737__auto__","removing","G__57725","me.tonsky.persistent-sorted-set/disj","datascript.db/transact-report","cljs.core/conj","datascript.db/reverse-ref?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","vec__57726","ns","name","datascript.db/check-upsert-conflict","entity","acc","vec__57729","_e","datascript.db/upsert-eid","idents","vec__57732","_a","_v","datascript.db/maybe-wrap-multival","vs","cljs.core/coll?","datascript.db/explode","iter__4523__auto__","s__57736","cljs.core/LazySeq","xs__6292__auto__","vec__57741","iterys__4519__auto__","s__57738","c__4521__auto__","size__4522__auto__","b__57740","cljs.core/chunk-buffer","i__57739","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57737","cljs.core/cons","cljs.core/rest","fs__4520__auto__","iter__57735","reverse?","straight-a","p__57744","vec__57745","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","tempids'","report'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","initial-es","vec__57766","seq__57767","first__57768","map__57769","entities","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","old-eid","id","datascript.db.allocate_eid.cljs$core$IFn$_invoke$arity$3","new-eid","new-entity","vec__57771","op","vec__57774","seq__57775","first__57776","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/not","ident","fun","cljs.core/fn?","vec__57777","ov","nv","cljs.core/vec","cljs.core/some","vid","allocated-eid","e-datoms","v-datoms","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","vec__57780"],"sourcesContent":["(ns ^:no-doc datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    #?(:clj [clojure.pprint :as pp])\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp raise defrecord-updatable cond+]]))\n  (:refer-clojure :exclude [seqable?])) \n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0))\n  ([e a v tx] (Datom. e a v tx 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n  (defmacro combine-cmp [& comps]\n    (loop [comps (reverse comps)\n           res   (num 0)]\n      (if (not-empty comps)\n        (recur\n          (next comps)\n          `(let [c# ~(first comps)]\n             (if (== 0 c#)\n               ~res\n               c#)))\n        res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp [o1 o2]\n  (if (nil? o1) 0\n    (if (nil? o2) 0\n      (compare o1 o2))))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n(defn cmp-datoms-eavt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defn cmp-datoms-eavt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (cmp first-a first-b)]\n        (cond\n          (== diff 0) (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)  (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)  (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (-seq  (.-eavt db)))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (empty-db (.-schema db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.Seqable (seq [db]           (seq eavt))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n                            (empty [db]         (empty-db schema))\n       clojure.lang.IEditableCollection \n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt (.-eavt db)\n          aevt (.-aevt db)\n          avet (.-avet db)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n              (filter (fn [^Datom d] (and (= v (.-v d))\n                                          (= tx (datom-tx d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n              (filter (fn [^Datom d] (= v (.-v d)))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                   ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n                (filter (fn [^Datom d] (= tx (datom-tx d)))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (and (= v (.-v d))\n                                            (= tx (datom-tx d)))))))\n         (if (indexing? db a)                                                   ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (= v (.-v d))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (= v (.-v d))\n                                     (= tx (datom-tx d)))) eavt)                ;; _ _ v tx\n         (filter (fn [^Datom d] (= v (.-v d))) eavt)                            ;; _ _ v _\n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                      ;; _ _ _ tx\n         eavt])))                                                               ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (when-not (indexing? db attr)\n      (raise \"Attribute \" attr \" should be marked as :db/index true\" {}))\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eavt-quick)))\n\n(defn db? [x]\n  (and (satisfies? ISearch x)\n       (satisfies? IIndexAccess x)\n       (satisfies? IDB x)))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (-datoms db :eavt []))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.Seqable (seq [db]           (-datoms db :eavt []))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db] (-schema (.-unfiltered-db db)))\n  (-attrs-by [db property] (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n           (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n           (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n                (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n                (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n                (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (when (true? v)\n      (case k\n        :db/isComponent [:db/isComponent]\n        :db/index       [:db/index]\n        []))))\n\n(defn- rschema [schema]\n  (reduce-kv\n    (fn [m attr keys->values]\n      (reduce-kv\n        (fn [m key value]\n          (reduce\n            (fn [m prop]\n              (assoc m prop (conj (get m prop #{}) attr)))\n            m (attr->properties key value)))\n        m keys->values))\n    {} schema))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (throw (ex-info (str \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\")\n                        {:error     :schema/validation\n                         :attribute a\n                         :key       :db/isComponent}))))\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema  schema\n       :rschema (rschema (merge implicit-schema schema))\n       :eavt    (set/sorted-set-by cmp-datoms-eavt)\n       :aevt    (set/sorted-set-by cmp-datoms-aevt)\n       :avet    (set/sorted-set-by cmp-datoms-avet)\n       :max-eid e0\n       :max-tx  tx0\n       :hash    (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema  schema\n        :rschema rschema\n        :eavt    eavt\n        :aevt    aevt\n        :avet    avet\n        :max-eid max-eid\n        :max-tx  max-tx\n        :hash    (atom 0)}))))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))\n\n     (defmethod pp/simple-dispatch Datom [^Datom d]\n       (pp/pprint-logical-block :prefix \"#datascript/Datom [\" :suffix \"]\"\n         (pp/write-out (.-e d))\n         (.write ^java.io.Writer *out* \" \")\n         (pp/pprint-newline :linear)\n         (pp/write-out (.-a d))\n         (.write ^java.io.Writer *out* \" \")\n         (pp/pprint-newline :linear)\n         (pp/write-out (.-v d))\n         (.write ^java.io.Writer *out* \" \")\n         (pp/pprint-newline :linear)\n         (pp/write-out (datom-tx d))\n         (.write ^java.io.Writer *out* \" \")\n         (pp/pprint-newline :linear)\n         (pp/write-out (datom-added d))))\n\n     (defn- pp-db [db ^java.io.Writer w]\n       (pp/pprint-logical-block :prefix \"#datascript/DB {\" :suffix \"}\"\n         (pp/pprint-logical-block\n           (pp/write-out :schema)\n           (.write w \" \")\n           (pp/pprint-newline :linear)\n           (pp/write-out (:schema db)))\n         (.write w \", \")\n         (pp/pprint-newline :linear)\n\n         (pp/pprint-logical-block\n           (pp/write-out :datoms)\n           (.write w \" \")\n           (pp/pprint-newline :linear)\n           (pp/pprint-logical-block :prefix \"[\" :suffix \"]\"\n             (pp/print-length-loop [aseq (seq db)]\n               (when aseq\n                 (let [^Datom d (first aseq)]\n                   (pp/write-out [(.-e d) (.-a d) (.-v d) (datom-tx d)])\n                   (when (next aseq)\n                     (.write w \" \")\n                     (pp/pprint-newline :linear)\n                     (recur (next aseq))))))))))\n\n     (defmethod pp/simple-dispatch DB [db] (pp-db db *out*))\n     (defmethod pp/simple-dispatch FilteredDB [db] (pp-db db *out*))\n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    eid\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-eid [eid at]\n  (when-not (number? eid)\n    (raise \"Bad entity id \" eid \" at \" at \", expected number\"\n           {:error :transact/syntax, :entity-id eid, :context at})))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx [report]\n  (inc (get-in report [:db-before :max-tx])))\n\n(defn- next-eid [db]\n  (inc (:max-eid db)))\n\n(defn- #?@(:clj  [^Boolean tx-id?]\n           :cljs [^boolean tx-id?])\n  [e]\n  (or (= e :db/current-tx)\n      (= e \":db/current-tx\") ;; for datascript.js interop\n      (= e \"datomic.tx\")\n      (= e \"datascript.tx\")))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (and (> eid (:max-eid db))\n         (< eid tx0)) ;; do not trigger advance if transaction id was referenced\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update-in report [:db-after] advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n        (assoc-in [:tempids e] eid)\n      (tempid? e)\n        (assoc-in [:tempids e] eid)\n      true\n        (update-in [:db-after] advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update-in [:eavt] set/conj datom cmp-datoms-eavt-quick)\n        true      (update-in [:aevt] set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update-in [:avet] set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))]\n        (cond-> db\n          true      (update-in [:eavt] set/disj removing cmp-datoms-eavt-quick)\n          true      (update-in [:aevt] set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update-in [:avet] set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- transact-report [report datom]\n  (-> report\n      (update-in [:db-after] with-datom datom)\n      (update-in [:tx-data] conj datom)))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n\n(defn- check-upsert-conflict [entity acc]\n  (let [[e a v] acc\n        _e (:db/id entity)]\n    (if (or (nil? _e)\n            (tempid? _e)\n            (nil? acc)\n            (== _e e))\n      acc\n      (raise \"Conflicting upsert: \" [a v] \" resolves to \" e\n             \", but entity already has :db/id \" _e\n             { :error :transact/upsert\n               :entity entity\n               :assertion acc }))))\n\n\n(defn- upsert-eid [db entity]\n  (when-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (->>\n      (reduce-kv\n        (fn [acc a v] ;; acc = [e a v]\n          (if (contains? idents a)\n            (if-some [e (:e (first (-datoms db :avet [a v])))]\n              (cond\n                (nil? acc)        [e a v] ;; first upsert\n                (= (get acc 0) e) acc     ;; second+ upsert, but does not conflict\n                :else\n                (let [[_e _a _v] acc]\n                  (raise \"Conflicting upserts: \" [_a _v] \" resolves to \" _e\n                         \", but \" [a v] \" resolves to \" e\n                         { :error     :transact/upsert\n                           :entity    entity\n                           :assertion [e a v]\n                           :conflict  [_e _a _v] })))\n              acc) ;; upsert attr, but resolves to nothing\n            acc)) ;; non-upsert attr\n        nil\n        entity)\n     (check-upsert-conflict entity)\n     first))) ;; getting eid from acc\n\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n\n(defn- explode [db entity]\n  (let [eid (:db/id entity)]\n    (for [[a vs] entity\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)]\n    (if (multival? db a)\n      (if (empty? (-search db [e a v]))\n        (transact-report report new-datom)\n        report)\n      (if-some [^Datom old-datom (first (-search db [e a]))]\n        (if (= (.-v old-datom) v)\n          report\n          (-> report\n            (transact-report (datom e a (.-v old-datom) tx false))\n            (transact-report new-datom)))\n        (transact-report report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :let `(let ~expr (cond+ ~@rest))\n        `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      { :error :transact/upsert })\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (loop [report (-> initial-report\n                  (update :db-after transient))\n         es     initial-es]\n    (let [[entity & entities] es\n          db                  (:db-after report)\n          {:keys [tempids]}   report]\n      (cond\n        (empty? es)\n        (-> report\n            (assoc-in  [:tempids :db/current-tx] (current-tx report))\n            (update-in [:db-after :max-tx] inc)\n            (update :db-after persistent!))\n\n        (nil? entity)\n        (recur report entities)\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [upserted-eid (upsert-eid db entity)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur (allocate-eid report old-eid upserted-eid)\n                     (concat (explode db (assoc entity :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid)\n                                                  (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n                 (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (-> (-search db [ident :db/fn]) first :v)\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e) (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n                (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [vid (get tempids v)]\n              (recur report (cons [op e a vid] entities))\n              (recur (allocate-eid report v (next-eid db)) es))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (= op :db/retract)\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (first (-search db [e a v]))]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (= op :db.fn/retractAttribute)\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}