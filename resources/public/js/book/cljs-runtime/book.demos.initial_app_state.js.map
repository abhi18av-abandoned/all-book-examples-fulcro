{"version":3,"sources":["book/demos/initial_app_state.cljs"],"mappings":"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","names":["com.fulcrologic.fulcro.mutations/mutate","p__89077","map__89078","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","state","sym","params","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","p__89080","map__89081","options__72617__auto__","p__89083","map__89084","p__89086","map__89087","com.fulcrologic.fulcro.components/wrapped-render","map__89089","com.fulcrologic.fulcro.components/props","js/book","js/book.demos","js/book.demos.initial-app-state","js/book.demos.initial-app-state.ItemLabel","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89092","G__89093","G__89094","goog.object/get","obj89096","com.fulcrologic.fulcro.components/configure-component!","book.demos.initial-app-state/ItemLabel","this","value","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","book.demos.initial-app-state/ui-label","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","p__89097","map__89098","map__89100","js/book.demos.initial-app-state.Foo","obj89103","G__89104","G__89105","obj89107","book.demos.initial-app-state/Foo","label","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","id","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.dom/macro-create-element*","book.demos.initial-app-state/ui-foo","p__89126","map__89127","map__89129","js/book.demos.initial-app-state.Bar","obj89132","G__89133","G__89134","obj89136","book.demos.initial-app-state/Bar","book.demos.initial-app-state/ui-bar","p__89137","map__89138","map__89140","js/book.demos.initial-app-state.ListItem","obj89144","G__89145","G__89146","obj89148","book.demos.initial-app-state/ListItem","type","props","G__89142","cljs.core/Keyword","book.demos.initial-app-state/ui-list-item","map__89150","js/book.demos.initial-app-state.Settings","obj89153","G__89154","G__89155","obj89157","book.demos.initial-app-state/Settings","book.demos.initial-app-state/ui-settings","map__89158","js/book.demos.initial-app-state.Main","obj89161","G__89162","G__89163","obj89165","book.demos.initial-app-state/Main","book.demos.initial-app-state/ui-main","p__89166","map__89167","map__89169","js/book.demos.initial-app-state.PaneSwitcher","obj89173","G__89174","G__89175","obj89177","book.demos.initial-app-state/PaneSwitcher","G__89171","book.demos.initial-app-state/ui-panes","map__89178","js/book.demos.initial-app-state.Root","obj89181","G__89182","G__89183","obj89185","book.demos.initial-app-state/Root","panes","items","evt","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.demos.initial-app-state\n  (:require\n    [com.fulcrologic.fulcro.dom :as dom]\n    [com.fulcrologic.fulcro.mutations :as m]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]))\n\n(defmethod m/mutate 'nav/settings [{:keys [state]} sym params]\n  {:action (fn [] (swap! state assoc :panes [:settings :singleton]))})\n\n(defmethod m/mutate 'nav/main [{:keys [state]} sym params]\n  {:action (fn [] (swap! state assoc :panes [:main :singleton]))})\n\n(defsc ItemLabel [this {:keys [value]}]\n  {:initial-state (fn [{:keys [value]}] {:value value})\n   :query         [:value]\n   :ident         (fn [] [:labels/by-value value])}\n  (dom/p value))\n\n(def ui-label (comp/factory ItemLabel {:keyfn :value}))\n\n;; Foo and Bar are elements of a mutli-type to-many union relation (each leaf can be a Foo or a Bar). We use params to\n;; allow initial state to put more than one in place and have them be unique.\n(defsc Foo [this {:keys [label]}]\n  {:query         [:type :id {:label (comp/get-query ItemLabel)}]\n   :initial-state (fn [{:keys [id label]}] {:id id :type :foo :label (comp/get-initial-state ItemLabel {:value label})})}\n  (dom/div\n    (dom/h2 \"Foo\")\n    (ui-label label)))\n\n(def ui-foo (comp/factory Foo {:keyfn :id}))\n\n(defsc Bar [this {:keys [label]}]\n  {:query         [:type :id {:label (comp/get-query ItemLabel)}]\n   :initial-state (fn [{:keys [id label]}] {:id id :type :bar :label (comp/get-initial-state ItemLabel {:value label})})}\n  (dom/div\n    (dom/h2 \"Bar\")\n    (ui-label label)))\n\n(def ui-bar (comp/factory Bar {:keyfn :id}))\n\n;; This is the to-many union component. It is the decision maker (it has no state or rendering of it's own)\n;; The initial state of this component is the to-many (vector) value of various children\n;; The render just determines which thing it is, and passes on the that renderer\n(defsc ListItem [this {:keys [id type] :as props}]\n  {:initial-state (fn [params] [(comp/get-initial-state Bar {:id 1 :label \"A\"}) (comp/get-initial-state Foo {:id 2 :label \"B\"}) (comp/get-initial-state Bar {:id 3 :label \"C\"})])\n   :query         (fn [] {:foo (comp/get-query Foo) :bar (comp/get-query Bar)}) ; use lambda for unions\n   :ident         (fn [] [type id])}                        ; lambda for unions\n  (case type\n    :foo (ui-foo props)\n    :bar (ui-bar props)\n    (dom/p \"No Item renderer!\")))\n\n(def ui-list-item (comp/factory ListItem {:keyfn :id}))\n\n;; Settings and Main are the target \"Panes\" of a to-one union (e.g. imagine tabs...we use buttons as the tab switching in\n;; this example). The initial state looks very much like any other component, as does the rendering.\n(defsc Settings [this {:keys [label]}]\n  {:initial-state (fn [params] {:type :settings :id :singleton :label (comp/get-initial-state ItemLabel {:value \"Settings\"})})\n   :query         [:type :id {:label (comp/get-query ItemLabel)}]}\n  (ui-label label))\n\n(def ui-settings (comp/factory Settings {:keyfn :type}))\n\n(defsc Main [this {:keys [label]}]\n  {:initial-state (fn [params] {:type :main :id :singleton :label (comp/get-initial-state ItemLabel {:value \"Main\"})})\n   :query         [:type :id {:label (comp/get-query ItemLabel)}]}\n  (ui-label label))\n\n(def ui-main (comp/factory Main {:keyfn :type}))\n\n;; This is a to-one union component. Again, it has no state of its own or rendering. The initial state is the single\n;; child that should appear. Fulcro (during startup) will detect this component, and then use the query to figure out\n;; what other children (the ones that have initial-state defined) should be placed into app state.\n(defsc PaneSwitcher [this {:keys [id type] :as props}]\n  {:initial-state (fn [params] (comp/get-initial-state Main nil))\n   :query         (fn [] {:settings (comp/get-query Settings) :main (comp/get-query Main)})\n   :ident         (fn [] [type id])}\n  (case type\n    :settings (ui-settings props)\n    :main (ui-main props)\n    (dom/p \"NO PANE!\")))\n\n(def ui-panes (comp/factory PaneSwitcher {:keyfn :type}))\n\n;; The root. Everything just composes to here (state and query)\n;; Note, in core (where we create the app) there is no need to say anything about initial state!\n(defsc Root [this {:keys [panes items]}]\n  {:initial-state (fn [params] {:panes (comp/get-initial-state PaneSwitcher nil)\n                                :items (comp/get-initial-state ListItem nil)})\n   :query         [{:items (comp/get-query ListItem)}\n                   {:panes (comp/get-query PaneSwitcher)}]}\n  (dom/div\n    (dom/button {:onClick (fn [evt] (comp/transact! this '[(nav/settings)]))} \"Go to settings\")\n    (dom/button {:onClick (fn [evt] (comp/transact! this '[(nav/main)]))} \"Go to main\")\n\n    (ui-panes panes)\n\n    (dom/h1 \"Heterogenous list:\")\n\n    (dom/ul\n      (mapv ui-list-item items))))\n"]}