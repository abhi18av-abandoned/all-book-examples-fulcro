{"version":3,"sources":["book/server/morphing_example.cljs"],"mappings":"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","names":["options__72617__auto__","this","props","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.server","js/book.server.morphing-example","js/book.server.morphing-example.CategoryQuery","props__72618__auto__","this__72619__auto__","temp__5733__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","init-state__72620__auto__","obj88473","G__88474","G__88475","goog.object/get","obj88477","com.fulcrologic.fulcro.components/configure-component!","book.server.morphing-example/CategoryQuery","js/book.server.morphing-example.ItemQuery","obj88479","G__88480","G__88481","obj88483","book.server.morphing-example/ItemQuery","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","book.server.morphing-example/sample-server-response","book.server.morphing-example/component-query","book.server.morphing-example/hand-written-query","map__88484","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","js/book.server.morphing-example.ToolbarItem","obj88487","G__88488","G__88489","obj88491","book.server.morphing-example/ToolbarItem","name","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","book.server.morphing-example/ui-toolbar-item","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","map__88492","js/book.server.morphing-example.ToolbarCategory","obj88495","G__88496","G__88497","obj88499","book.server.morphing-example/ToolbarCategory","items","com.fulcrologic.fulcro.components/force-children","cljs.core.map.cljs$core$IFn$_invoke$arity$2","book.server.morphing-example/ui-toolbar-category","book.server.morphing-example/group-items-reset","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__88501","map__88502","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","params","app","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","com.fulcrologic.fulcro.algorithms.merge.merge_STAR_.cljs$core$IFn$_invoke$arity$3","book.server.morphing-example/add-to-category","db","item","category-ident","item-location","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","com.fulcrologic.fulcro.components/ident","book.server.morphing-example/group-items*","sorted-items","cljs.core/vals","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","category-ids","cljs.core/keys","clear-items","id","cljs.core/assoc-in","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","all-categories","p1__88507#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","book.server.morphing-example/group-items","p__88508","map__88509","map__88515","js/book.server.morphing-example.Toolbar","obj88521","G__88522","G__88523","obj88525","book.server.morphing-example/Toolbar","categories","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","js/book.server.morphing-example.fulcroapp-morphing-example","book.server.morphing-example/fulcroapp-morphing-example","com.fulcrologic.fulcro.application.fulcro_app.cljs$core$IFn$_invoke$arity$1","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","book.macros/app-registry","cljs.core/assoc","com.fulcrologic.fulcro.application.mount_BANG_.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.algorithms.normalize.tree__GT_db.cljs$core$IFn$_invoke$arity$3"],"sourcesContent":["(ns book.server.morphing-example\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.dom :as dom]\n    [book.macros :refer [defexample]]\n    [com.fulcrologic.fulcro.mutations :refer [defmutation]]\n    [com.fulcrologic.fulcro.algorithms.normalize :as fnorm]\n    [com.fulcrologic.fulcro.algorithms.merge :as merge]))\n\n(defsc CategoryQuery [this props]\n  {:query [:db/id :category/name]\n   :ident [:categories/by-id :db/id]})\n\n(defsc ItemQuery [this props]\n  {:query [:db/id :item/name {:item/category (comp/get-query CategoryQuery)}]\n   :ident [:items/by-id :db/id]})\n\n(def sample-server-response\n  {:all-items [{:db/id 5 :item/name \"item-42\" :item/category {:db/id 1 :category/name \"A\"}}\n               {:db/id 6 :item/name \"item-92\" :item/category {:db/id 1 :category/name \"A\"}}\n               {:db/id 7 :item/name \"item-32\" :item/category {:db/id 1 :category/name \"A\"}}\n               {:db/id 8 :item/name \"item-52\" :item/category {:db/id 2 :category/name \"B\"}}]})\n\n(def component-query [{:all-items (comp/get-query ItemQuery)}])\n\n(def hand-written-query [{:all-items [:db/id :item/name\n                                      {:item/category [:db/id :category/name]}]}])\n\n(defsc ToolbarItem [this {:keys [item/name]}]\n  {:query [:db/id :item/name]\n   :ident [:items/by-id :db/id]}\n  (dom/li name))\n\n(def ui-toolbar-item (comp/factory ToolbarItem {:keyfn :db/id}))\n\n(defsc ToolbarCategory [this {:keys [category/name category/items]}]\n  {:query [:db/id :category/name {:category/items (comp/get-query ToolbarItem)}]\n   :ident [:categories/by-id :db/id]}\n  (dom/li\n    name\n    (dom/ul\n      (map ui-toolbar-item items))))\n\n(def ui-toolbar-category (comp/factory ToolbarCategory {:keyfn :db/id}))\n\n(defmutation group-items-reset [params]\n  (action [{:keys [app state]}]\n    (swap! state (fn [s]\n                   (-> s\n                     (dissoc :categories/by-id :toolbar/categories)\n                     (merge/merge* component-query sample-server-response))))))\n\n(defn add-to-category\n  \"Returns a new db with the given item added into that item's category.\"\n  [db item]\n  (let [category-ident (:item/category item)\n        item-location  (conj category-ident :category/items)]\n    (update-in db item-location (fnil conj []) (comp/ident ItemQuery item))))\n\n(defn group-items*\n  \"Returns a new db with all of the items sorted by name and grouped into their categories.\"\n  [db]\n  (let [sorted-items   (->> db :items/by-id vals (sort-by :item/name))\n        category-ids   (-> db (:categories/by-id) keys)\n        clear-items    (fn [db id] (assoc-in db [:categories/by-id id :category/items] []))\n        db             (reduce clear-items db category-ids)\n        db             (reduce add-to-category db sorted-items)\n        all-categories (->> db :categories/by-id vals (mapv #(comp/ident CategoryQuery %)))]\n    (assoc db :toolbar/categories all-categories)))\n\n(defmutation ^:intern group-items [params]\n  (action [{:keys [state]}]\n    (swap! state group-items*)))\n\n(defsc Toolbar [this {:keys [toolbar/categories]}]\n  {:query [{:toolbar/categories (comp/get-query ToolbarCategory)}]}\n  (dom/div\n    (dom/button {:onClick #(comp/transact! this `[(group-items {})])} \"Trigger Post Mutation\")\n    (dom/button {:onClick #(comp/transact! this `[(group-items-reset {})])} \"Reset\")\n    (dom/ul\n      (map ui-toolbar-category categories))))\n\n(defexample \"Morphing Data\" Toolbar \"morphing-example\" :initial-db (fnorm/tree->db component-query sample-server-response true))\n\n"]}