{"version":3,"sources":["book/queries/dynamic_queries.cljs"],"mappings":"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","names":["options__72617__auto__","p__85566","map__85567","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components/wrapped-render","map__85569","com.fulcrologic.fulcro.components/props","js/book","js/book.queries","js/book.queries.dynamic-queries","js/book.queries.dynamic-queries.Leaf","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj85572","G__85573","G__85574","goog.object/get","obj85576","com.fulcrologic.fulcro.components/configure-component!","book.queries.dynamic-queries/Leaf","this","x","y","params","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/force-children","com.fulcrologic.fulcro.components/set-query!","book.queries.dynamic-queries/ui-leaf","e","com.fulcrologic.fulcro.mutations/set-value!","or__4131__auto__","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$2","map__85578","js/book.queries.dynamic-queries.Root","obj85584","G__85585","G__85586","obj85588","book.queries.dynamic-queries/Root","leaf","props","p","com.fulcrologic.fulcro.components.get_initial_state.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns book.queries.dynamic-queries\n  (:require\n    [com.fulcrologic.fulcro.dom :as dom]\n    [goog.object]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.mutations :as m]))\n\n(declare ui-leaf)\n\n; This component allows you to toggle the query between [:x] and [:y]\n(defsc Leaf [this {:keys [x y]}]\n  {:initial-state (fn [params] {:x 1 :y 42})\n   :query         (fn [] [:x])                              ; avoid error checking so we can destructure both :x and :y in props\n   :ident         (fn [] [:LEAF :ID])}                      ; there is only one leaf in app state\n  (dom/div\n    (dom/button {:onClick (fn [] (comp/set-query! this ui-leaf {:query [:x]}))} \"Set query to :x\")\n    (dom/button {:onClick (fn [] (comp/set-query! this ui-leaf {:query [:y]}))} \"Set query to :y\")\n    ; If the query is [:x] then x will be defined, otherwise it will not.\n    (dom/button {:onClick (fn [e] (if x\n                                    (m/set-value! this :x (inc x))\n                                    (m/set-value! this :y (inc y))))}\n      (str \"Count: \" (or x y)))                             ; only one will be defined at a time\n    \" Leaf\"))\n\n(def ui-leaf (comp/factory Leaf {:qualifier :x}))\n\n(defsc Root [this {:keys [root/leaf] :as props}]\n  {:initial-state (fn [p] {:root/leaf (comp/get-initial-state Leaf {})})\n   :query         (fn [] [{:root/leaf (comp/get-query ui-leaf)}])}\n  (dom/div (ui-leaf leaf)))\n"]}