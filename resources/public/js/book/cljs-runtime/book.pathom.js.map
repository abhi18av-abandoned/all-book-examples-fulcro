{"version":3,"sources":["book/pathom.cljs"],"mappings":";;;;;;AAOA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAACC;;AAElB,AAAA;;;AAAAC,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAyCW;AAAzC,AAAA,AAAA,AAAA;AAAAN;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAA,AAAAF,AAAAE,AAAA,AACmBM;AADnB,AAAAR,AAAAE,AAAA,AACuBO;AADvB,AAEI,AAAA,AAACC,AAAgCH;;AACjC,AAACI,AAAOrB,AAAQiB;;AAChB,AAAA,AAAA,AAAA,AAAA,AAACK,AAAMH,AAAMI,AAA+DN;;AAJhF;;AAAA,AAAA;AAAAJ;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAE,AAAAA,AAAAH,AAAAG,AAAAH;;AAAA;;;;;AAMA,AAAA,AAAMW,AAAYC;AAAlB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAC2BC,AACAC,AACAC,AACbC,AACC,AAAA,AAAA,AAACC,AAAiCN,AAClCO,AACAC,AACA,AAACC,AAA6BC;;AAEhD,AAAA,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE,AAAU3B;AADd,AAEG,AAAM4B,AAAU,AAACjB,AAAWgB;AACtBE,AAAU,AAAA,AAAY,AAAA,AAAA,AAACC,AAA0B;AAAKC;AAAL,AAAU,AAACH,AAAAA,AAAAA,AAAO5B,AAAAA,AAAI+B,AAAAA;;;AAD7E,AAAA,AAAA,AAAA,AAAA,AAEuB;AAAKC,AAAKC;AAAV,AACE,AAAA,AAACE;;AAAD,AACG,AAACN,AAAAA,AAAAA,AAAUG,AAAAA,AAAKC,AAAAA;;AADnB,AAAAC,AAEG/C;;;;;AAP/B,AAAA,AAAA,AAAMsC,AAQFE;AARJ,AASG,AAAA,AAACS,AAAYT;;;AAThB,AAAA,AAAA,AAAMF;;AAAN","names":["js/book","js/book.pathom","js/book.pathom.latency","book.pathom/latency","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","book.pathom/set-server-latency","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","map__89764","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__89770","map__89773","env","temp__5735__auto__","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","delay","app","state","js/console.log","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","book.pathom/new-parser","my-resolvers","com.wsscode.pathom.core/parallel-parser","com.wsscode.pathom.core/map-reader","com.wsscode.pathom.connect/parallel-reader","com.wsscode.pathom.connect/open-ident-reader","com.wsscode.pathom.connect/mutate-async","com.wsscode.pathom.connect.connect_plugin.cljs$core$IFn$_invoke$arity$1","com.wsscode.pathom.core/error-handler-plugin","com.wsscode.pathom.core/request-cache-plugin","com.wsscode.pathom.core/post-process-parser-plugin","com.wsscode.pathom.core/elide-not-found","var_args","G__89782","book.pathom/mock-remote","js/Error","resolvers","parser","transmit!","com.fulcrologic.fulcro.networking.mock-server-remote/mock-http-server","req","this","send-node","cljs.core/deref","js/setTimeout","book.pathom.mock_remote.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":["(ns book.pathom\n  (:require\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.networking.mock-server-remote :refer [mock-http-server]]\n    [com.wsscode.pathom.core :as p]\n    [com.wsscode.pathom.connect :as pc]))\n\n(defonce latency (atom 100))\n\n(defmutation set-server-latency [{:keys [delay]}]\n  (action [{:keys [app state]}]\n    (js/console.log \"Latency set to\" delay)\n    (reset! latency delay)\n    (swap! state assoc-in [:server-control/by-id :server :server-control/delay] delay)))\n\n(defn new-parser [my-resolvers]\n  (p/parallel-parser\n    {::p/env     {::p/reader [p/map-reader\n                              pc/parallel-reader\n                              pc/open-ident-reader]}\n     ::p/mutate  pc/mutate-async\n     ::p/plugins [(pc/connect-plugin {::pc/register my-resolvers})\n                  p/error-handler-plugin\n                  p/request-cache-plugin\n                  (p/post-process-parser-plugin p/elide-not-found)]}))\n\n(defn mock-remote\n  ([resolvers env]\n   (let [parser    (new-parser resolvers)\n         transmit! (:transmit! (mock-http-server {:parser (fn [req] (parser env req))}))]\n     {:remote {:transmit! (fn [this send-node]\n                            (js/setTimeout\n                              #(transmit! this send-node)\n                              @latency))}}))\n  ([resolvers]\n   (mock-remote resolvers {})))\n"]}