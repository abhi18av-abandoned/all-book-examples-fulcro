{"version":3,"sources":["book/ui/d3_example.cljs"],"mappings":"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","names":["book.ui.d3-example/render-squares","dom-node","props","svg","js/module$node_modules$d3$dist$d3_node","data","cljs.core/clj->js","selection","d","options__72617__auto__","com.fulcrologic.fulcro.components/wrapped-render","com.fulcrologic.fulcro.components/props","js/book","js/book.ui","js/book.ui.d3-example","js/book.ui.d3-example.D3Thing","props__72618__auto__","this__72619__auto__","temp__5733__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$2","init-state__72620__auto__","obj80828","G__80830","G__80831","goog.object/get","obj80833","com.fulcrologic.fulcro.components/configure-component!","book.ui.d3-example/D3Thing","this","temp__5735__auto__","next-props","next-state","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","r","goog.object/set","book.ui.d3-example/d3-thing","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","book.ui.d3-example/random-square","cljs.core/rand-int","G__80835","js/Error","book.ui.d3-example/add-square","com.fulcrologic.fulcro.mutations/->Mutation","com.fulcrologic.fulcro.mutations/mutate","fulcro-mutation-env-symbol","p__80847","map__80848","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","env","com.fulcrologic.fulcro.algorithms.lookup/app-algorithm","default-action","params","state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","book.ui.d3-example/clear-squares","p__80856","map__80857","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","com.fulcrologic.fulcro.components/make-state-map","js/book.ui.d3-example.Root","obj80871","G__80872","G__80873","obj80875","book.ui.d3-example/Root","com.fulcrologic.fulcro.components/force-children","cljs.core/vec","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core/List","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/array-map","cljs.core.concat.cljs$core$IFn$_invoke$arity$0","com.fulcrologic.fulcro.components.transact_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom/macro-create-element*"],"sourcesContent":["(ns book.ui.d3-example\n  (:require\n    [com.fulcrologic.fulcro.dom :as dom]\n    ;; REQUIRES shadow-cljs, with \"d3\" in package.json\n    [\"d3\" :as d3]\n    [goog.object :as gobj]\n    [com.fulcrologic.fulcro.mutations :as m :refer [defmutation]]\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]))\n\n(defn render-squares [dom-node props]\n  (let [svg       (-> d3 (.select dom-node))\n        data      (clj->js (:squares props))\n        selection (-> svg\n                    (.selectAll \"rect\")\n                    (.data data (fn [d] (.-id d))))]\n    (-> selection\n      .enter\n      (.append \"rect\")\n      (.style \"fill\" (fn [d] (.-color d)))\n      (.attr \"x\" \"0\")\n      (.attr \"y\" \"0\")\n      .transition\n      (.attr \"x\" (fn [d] (.-x d)))\n      (.attr \"y\" (fn [d] (.-y d)))\n      (.attr \"width\" (fn [d] (.-size d)))\n      (.attr \"height\" (fn [d] (.-size d))))\n    (-> selection\n      .exit\n      .transition\n      (.style \"opacity\" \"0\")\n      .remove)\n    false))\n\n(defsc D3Thing [this props]\n  {:componentDidMount     (fn [this]\n                            (when-let [dom-node (gobj/get this \"svg\")]\n                              (render-squares dom-node (comp/props this))))\n   :shouldComponentUpdate (fn [this next-props next-state]\n                            (when-let [dom-node (gobj/get this \"svg\")]\n                              (render-squares dom-node next-props))\n                            false)}\n  (dom/svg {:style   {:backgroundColor \"rgb(240,240,240)\"}\n            :width   200 :height 200\n            :ref     (fn [r] (gobj/set this \"svg\" r))\n            :viewBox \"0 0 1000 1000\"}))\n\n(def d3-thing (comp/factory D3Thing))\n\n(defn random-square []\n  {\n   :id    (rand-int 10000000)\n   :x     (rand-int 900)\n   :y     (rand-int 900)\n   :size  (+ 50 (rand-int 300))\n   :color (case (rand-int 5)\n            0 \"yellow\"\n            1 \"green\"\n            2 \"orange\"\n            3 \"blue\"\n            4 \"black\")})\n\n(defmutation add-square [params]\n  (action [{:keys [state]}]\n    (swap! state update :squares conj (random-square))))\n\n(defmutation clear-squares [params]\n  (action [{:keys [state]}]\n    (swap! state assoc :squares [])))\n\n(defsc Root [this props]\n  {:query         [:squares]\n   :initial-state {:squares []}}\n  (dom/div\n    (dom/button {:onClick #(comp/transact! this\n                             `[(add-square {})])} \"Add Random Square\")\n    (dom/button {:onClick #(comp/transact! this\n                             `[(clear-squares {})])} \"Clear\")\n    (dom/br)\n    (dom/br)\n    (d3-thing props)))\n\n"]}