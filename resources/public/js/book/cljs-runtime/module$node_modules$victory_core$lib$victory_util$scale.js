shadow$provide.module$node_modules$victory_core$lib$victory_util$scale=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function toNewName(scale){return"scale".concat(function(s){return s&&s[0].toUpperCase()+s.slice(1)}(scale))}function getScaleTypeFromData(props,axis){if(!props.data)return"linear";axis=_helpers.default.createAccessor(props[axis]);props=props.data.map(axis);return _collection.default.containsDates(props)?"time":
"linear"}function getScaleFromProps(props,axis){if(props.scale&&(props.scale.x||props.scale.y?props.scale[axis]:1)&&(props=props.scale[axis]||props.scale,axis="function"===typeof props?(0,_isFunction2.default)(props.copy)&&(0,_isFunction2.default)(props.domain)&&(0,_isFunction2.default)(props.range):"string"===typeof props?(0,_includes2.default)(supportedScaleStrings,props):!1,axis))return(0,_isFunction2.default)(props)?props:d3Scale[toNewName(props)]()}function getType(scale){var scaleType=[{name:"log",
method:"base"},{name:"ordinal",method:"unknown"},{name:"pow-sqrt",method:"exponent"},{name:"quantile",method:"quantiles"},{name:"quantize-threshold",method:"invertExtent"}].filter(function(type){return void 0!==scale[type.method]})[0];return scaleType?scaleType.name:void 0}Object.defineProperty(exports,"__esModule",{value:!0});exports.default=void 0;var _isFunction2=_interopRequireDefault(require("module$node_modules$lodash$isFunction")),_includes2=_interopRequireDefault(require("module$node_modules$lodash$includes")),
_helpers=_interopRequireDefault(require("module$node_modules$victory_core$lib$victory_util$helpers")),_collection=_interopRequireDefault(require("module$node_modules$victory_core$lib$victory_util$collection")),d3Scale=function(obj){if(obj&&obj.__esModule)return obj;var newObj={};if(null!=obj)for(var key in obj)if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):{};desc.get||desc.set?Object.defineProperty(newObj,
key,desc):newObj[key]=obj[key]}newObj.default=obj;return newObj}(require("module$node_modules$d3_scale$dist$d3_scale")),supportedScaleStrings=["linear","time","log","sqrt"];exports.default={getBaseScale:function(props,axis){var scale=getScaleFromProps(props,axis);if(scale)return scale;if(props.domain&&props.domain[axis])var domain=props.domain[axis];else props.domain&&Array.isArray(props.domain)&&(domain=props.domain);scale=domain?_collection.default.containsDates(domain)?"time":"linear":void 0;props=
scale||getScaleTypeFromData(props,axis);return d3Scale[toNewName(props)]()},getDefaultScale:function(){return d3Scale.scaleLinear()},getScaleFromProps:getScaleFromProps,getScaleType:function(props,axis){if(props.scale&&(props.scale.x||props.scale.y?props.scale[axis]:1)){var JSCompiler_inline_result=props.scale[axis]||props.scale;JSCompiler_inline_result="string"===typeof JSCompiler_inline_result?JSCompiler_inline_result:getType(JSCompiler_inline_result)}else JSCompiler_inline_result=void 0;return JSCompiler_inline_result||
getScaleTypeFromData(props,axis)},getType:getType}}
//# sourceMappingURL=module$node_modules$victory_core$lib$victory_util$scale.js.map
