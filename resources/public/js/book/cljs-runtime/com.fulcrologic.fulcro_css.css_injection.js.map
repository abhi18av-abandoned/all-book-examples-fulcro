{"version":3,"sources":["com/fulcrologic/fulcro_css/css_injection.cljc"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","com.fulcrologic.fulcro-css.css-injection/error","seq89838","self__4718__auto__","cljs.core/seq","msg","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","js/console.log","com.fulcrologic.fulcro-css.css-injection/component-css-includes-with-depth","component","breadth","depth","includes","com.fulcrologic.fulcro-css.css/get-includes","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__89842#","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/PersistentHashMap","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__89843#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__89844","G__89845","G__89846","p__89851","map__89852","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro-css.css-injection/find-css-nodes","order","state-map","query","cljs.core/map?","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.components.get_query.cljs$core$IFn$_invoke$arity$1","ast","edn-query-language.core/query->ast","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","traverse","p__89854","map__89855","children","G__89857","and__4120__auto__","com.fulcrologic.fulcro-css.css/CSS?","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.core/deref","p1__89849#","traverse*","nodes","ordered-nodes","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","p1__89850#","unique-nodes","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro_css.css_injection.error.cljs$core$IFn$_invoke$arity$variadic","cljs.spec.alpha/def-impl","cljs.spec.alpha/fspec-impl","cljs.spec.alpha.spec_impl.cljs$core$IFn$_invoke$arity$4","cljs.spec.alpha/cat-impl","cljs.core/seq?","get-rules","components","p1__89865#","p2__89866#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro-css.css/get-css-rules","com.fulcrologic.fulcro-css.css-injection/compute-css","props","js/Error","cljs.core/contains?","map__89867","cljs.core.get.cljs$core$IFn$_invoke$arity$3","auto-include?","garden-flags","rules","G__89869","com.fulcrologic.fulcro-css.css/get-css","G__89870","css","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","options__72617__auto__","com.fulcrologic.fulcro.components/wrapped-render","map__89871","com.fulcrologic.fulcro.components/props","js/com","js/com.fulcrologic","js/com.fulcrologic.fulcro-css","js/com.fulcrologic.fulcro-css.css-injection","js/com.fulcrologic.fulcro-css.css-injection.StyleElement","props__72618__auto__","this__72619__auto__","temp__5733__auto__","init-state__72620__auto__","obj89881","G__89882","G__89883","goog.object/get","obj89885","com.fulcrologic.fulcro.components/configure-component!","com.fulcrologic.fulcro-css.css-injection/StyleElement","this","key","com.fulcrologic.fulcro.components.set_state_BANG_.cljs$core$IFn$_invoke$arity$2","com.fulcrologic.fulcro.dom.macro_create_element.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components.get_state.cljs$core$IFn$_invoke$arity$2","factory","com.fulcrologic.fulcro.components.factory.cljs$core$IFn$_invoke$arity$1","com.fulcrologic.fulcro-css.css-injection/style-element","G__89892","com.fulcrologic.fulcro.components/component?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","G__89893","com.fulcrologic.fulcro.components/any->app","com.fulcrologic.fulcro.application/current-state","cljs.core.update.cljs$core$IFn$_invoke$arity$3","com.fulcrologic.fulcro.components/react-type","com.fulcrologic.fulcro-css.css-injection/remove-from-dom","id","old-element","js/document","parent","com.fulcrologic.fulcro-css.css-injection/upsert-css","options","style-ele"],"sourcesContent":["(ns com.fulcrologic.fulcro-css.css-injection\n  (:require\n    [com.fulcrologic.fulcro.components :as comp :refer [defsc]]\n    [com.fulcrologic.fulcro.application :as app]\n    [clojure.spec.alpha :as s]\n    [garden.core :as g]\n    [edn-query-language.core :as eql]\n    [com.fulcrologic.fulcro-css.css :as css]\n    #?(:cljs [com.fulcrologic.fulcro.dom :as dom]\n       :clj  [com.fulcrologic.fulcro.dom-server :as dom])))\n\n(defn error [& msg]\n  #?(:cljs (apply js/console.log msg)\n     :clj  (.println System/err (apply str msg))))\n\n(defn component-css-includes-with-depth [component breadth depth]\n  (let [includes (css/get-includes component)]\n    (-> (into []\n          (map #(hash-map ::depth (inc depth)\n                  ::breadth breadth\n                  ::component %))\n          includes)\n      (into (mapcat #(component-css-includes-with-depth % breadth (inc depth)) includes)))))\n\n(defn find-css-nodes\n  \"Scan the given component and return an ordered vector of the css rules in depth-first order.\n  `order` can be :depth-first (default) or :breadth-first\"\n  [{:keys [component order state-map]}]\n  (let [query         (if (map? state-map) (comp/get-query component state-map) (comp/get-query component))\n        ast           (eql/query->ast query)\n        breadth       (atom 0)\n        traverse      (fn traverse* [{:keys [children component]} depth]\n                        (into\n                          (cond-> []\n                            (and component (css/CSS? component)) (conj {::depth     depth\n                                                                        ::breadth   (swap! breadth inc)\n                                                                        ::component component})\n                            component (into (component-css-includes-with-depth component @breadth depth)))\n                          (mapcat #(traverse* % (inc depth)) (seq children))))\n        nodes         (traverse ast 0)\n        ordered-nodes (if (= order :breadth-first)\n                        (sort-by ::breadth nodes)\n                        (sort-by #(- (::depth %)) nodes))\n        unique-nodes  (distinct (map ::component ordered-nodes))]\n    (when-not query\n      (error \"Auto-include was used for CSS, but the component had no query! No CSS Found.\"))\n    unique-nodes))\n\n(s/fdef find-css-nodes\n  :args (s/cat :options map?)\n  :ret seq?)\n\n(let [get-rules (fn [components] (reduce #(into %1 (css/get-css-rules %2)) [] components))]\n  (defn compute-css\n    \"Compute the stringified CSS based on the given props. This can be used to generate a\n    server-side version of CSS for the initial DOM, and is used the other injection functions to compute\n    the CSS.\n\n    Props are as described in `style-element`.\n    \"\n    [props]\n    (assert (and (map? props) (contains? props :component)) \"Argument must be a map that contains the key :component\")\n    (let [{:keys [component auto-include? garden-flags] :or {garden-flags {}}} props\n          rules (if (false? auto-include?)\n                  (some-> component (css/get-css))\n                  (some-> (find-css-nodes props) get-rules))\n          css   (g/css garden-flags rules)]\n      css)))\n\n(defsc StyleElement [this {:keys [order key]}]\n  {:componentDidMount (fn [this]\n                        (let [css (compute-css (comp/props this))]\n                          (comp/set-state! this {:css css})))}\n  ;; This ensures best performance. React doesn't check/diff it this way.\n  (dom/style {:dangerouslySetInnerHTML {:__html (comp/get-state this :css)}}))\n\n(let [factory (comp/factory StyleElement)]\n  (defn style-element\n    \"Renders a style element. Valid props are:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n    The resulting React style element avoids re-rendering unless the props change, and the CSS is cached at component mount; therefore\n    this element will avoid all overhead on refresh. In development you may wish to have the CSS change on hot code reload, in which case\n    you can simply change the `:react-key` on the props to force a re-mount (which will recompute the CSS).\n    \"\n    [props]\n    (let [component (:component props)\n          props     (cond-> props\n                      (comp/component? component) (->\n                                                    (assoc :state-map (some-> component comp/any->app app/current-state))\n                                                    (update :component comp/react-type)))]\n      #?(:cljs (factory props)\n         :clj  (dom/style {}\n                 (compute-css props))))))\n\n#?(:cljs\n   (defn remove-from-dom \"Remove the given element from the DOM by ID\"\n     [id]\n     (if-let [old-element (.getElementById js/document id)]\n       (let [parent (.-parentNode old-element)]\n         (.removeChild parent old-element)))))\n\n#?(:clj\n   (defn upsert-css\n     \"In CLJ this is a STUB (to prevent compile errors in CLJC UI files).\n\n     Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"\n     [id options]\n     (error \"Upsert-css not available for CLJ use. There is no DOM.  Use `compute-css` and manual embedding in your returned server page instead.\"))\n   :cljs\n   (defn upsert-css\n     \"(Re)place the STYLE element with the provided ID on the document's low-level DOM with the co-located CSS of\n     the specified component.\n\n     The `options` is the same as passed to `style-element`:\n\n     - `:component`: (REQUIRED) The UI component to pull CSS from. Class or instance allowed.\n     - `:order`: (optional)  `:depth-first` (default) or `:breadth-first` (legacy order)\n     - `:react-key` : (optional) A React key. Changing the key will force it to update the CSS (which is otherwise caches for performance)\n     - `:auto-include?`: (optional) When set to true (default) it will use the component query to recursively scan for\n       CSS instead of explicit includes. When set to (exactly) `false` then it ONLY uses the user-declared inclusions on\n       the component.\n     - `:garden-flags`: (optional) A map with [garden compiler flags](https://github.com/noprompt/garden/wiki/Compiler#flags)\n\n     ONLY WORKS FOR CLJS, since otherwise there is no DOM to change.\"\n     [id options]\n     (assert (and (map? options) (contains? options :component)) \"Argument must be a map that contains the key :component\")\n     (remove-from-dom id)\n     (let [style-ele (.createElement js/document \"style\")\n           css       (compute-css options)]\n       (set! (.-innerHTML style-ele) css)\n       (.setAttribute style-ele \"id\" id)\n       (.appendChild (.-body js/document) style-ele))))\n"]}